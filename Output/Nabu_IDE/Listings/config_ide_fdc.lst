              	; --------------------------------------
              	; zasm: assemble "config_ide_fdc.asm"
              	; date: 2024-09-01 20:40:22
              	; --------------------------------------


              	;
              	;**************************************************************
              	;*
              	;*          I S H K U R   S Y S T E M   C O N F I G
              	;*
              	;*      This file contains points that should be modifed
              	;*      if new devices are to be added to IshkurCP/M. At
              	;*      a mimumum, they need to be included at the bottom
              	;*      of the file, and added to their appropriate dev
              	;*      switch. Some devices may need additional config
              	;*      directly in their source files
              	;*       
              	;*
              	;**************************************************************
              	;
              	;   Set default drive / user
              	;   (uuuudddd) where 'uuuu' is the user number and 'dddd' is the drive number.
              	;
0000:         	default	equ	0
              	
              	;
              	;**************************************************************
              	;*
              	;*                M E M O R Y   C O N F I G
              	;*
              	;*        CP/M memory will start at mem*1024. For example,
              	;*        if memory is configured to be 40, then the image
              	;*        will start at 40kb. The higher memory is configured
              	;*        to, the more memory user programs will have. If memory
              	;*        is configured to be too high, then the core image and
              	;*        BSS space will not fit.
              	;*
              	;**************************************************************
              	;
              	;
              	;   Set memory base here. 
              	;
0035:         	mem	equ	53		; CP/M image starts at mem*1024
              	
              	
              	
              	#target	BIN			; Set up memory segments
D400:         	#code	_TEXT,(mem)*1024
F489:         	#data	_BSS,_TEXT_end
FAC2:         	#data	_NOINIT,_BSS_end
FF00:         	#data	_JUMP_TABLE,0xFF00
FF00: 00000000	intvec:	defs	16
FF04: 00...   	
FF10: 00000000	dircbuf:defs	128
FF14: 00...   	
              	.area	_TEXT
              	
              	; Include CP/M and BIOS
              	#include "../zcpr1_ccp.asm"
              	;**************************************************************
              	;*
              	;*         Z C P R 1   C O M M A N D   P R O C E S S O R
              	;*
              	;*          Adapted to work with Ishkur by snhirsch
              	;*
              	;**************************************************************
              	
0003:         	iobyte	equ	3		;i/o definition byte.
0004:         	tdrive	equ	4		;current drive name and user number.
0004:         	UDFLAG  equ     4
0005:         	entry	equ	5		;entry point for the cp/m bdos.
0005:         	BDOS    equ     5
005C:         	tfcb	equ	5ch		;default file control block.
005C:         	TFCB    equ     5ch
0080:         	TBUFF   equ     80h
0080:         	tbuff	equ	80h		;i/o buffer and command line storage.
0100:         	tbase	equ	100h		;transiant program storage area.
              	;
              	;   set control character equates.
              	;
0003:         	cntrlc	equ	3		;control-c
0005:         	cntrle	equ	05h		;control-e
0008:         	bs	equ	08h		;backspace
0009:         	tab	equ	09h		;tab
000A:         	lf	equ	0ah		;line feed
000C:         	ff	equ	0ch		;form feed
000D:         	cr	equ	0dh		;carriage return
0010:         	cntrlp	equ	10h		;control-p
0012:         	cntrlr	equ	12h		;control-r
0013:         	cntrls	equ	13h		;control-s
0015:         	cntrlu	equ	15h		;control-u
0018:         	cntrlx	equ	18h		;control-x
001A:         	cntrlz	equ	1ah		;control-z (end-of-file mark)
007F:         	del	equ	7fh		;rubout
              	
              	;================================================================
              	
              	;	.Z80
              	;	TITLE	'NZCPR V 1.6Z OF 01/07/84'
              	;  This is ZCPR Version 1.6 changed to Zilog mnemonics and put in a
              	;form suitable for the Microsoft M80 assembler. Note that the file uses
              	;the PHASE option to create the memory offset. The COM file should be 
              	;created using L80 with the /P:100 switch option. The COM file can be
              	;loaded into the sysgen program using the methods described in the ZCPR
              	;documentation.
              	;		MMA - Murray Arnow
              	;
              	;  CP/M Z80 Command Processor Replacement (CPR) Version 1.6 in
              	; the NZCPR line.
              	;
              	;	CCPZ CREATED AND CUSTOMIZED FOR ARIES-II BY RLC
              	;	ZCPR VERSION 1.0 CREATED FROM CCPZ VERSION 4.0 BY RLC IN
              	;		A COORDINATED EFFORT WITH CCP-GROUP
              	;
              	;	ZCPR is a group effort by CCP-GROUP, whose active membership involved
              	; in this project consists of the following:
              	;		RLC - Richard Conn
              	;		RGF - Ron Fowler
              	;		KBP - Keith Peterson
              	;		FJW - Frank Wancho
              	;	The following individuals also provided a contribution:
              	;		SBB - Steve Bogolub
              	;
              	;  Since RLC has decided that ZCPR V1.0 is the last official version
              	; sanctioned by the CCPZ group, changes beyond that point are being
              	; called by consensus of a group of new changers "NZCPR Vx.x". The
              	; following individuals have put in their code or opinions:
              	;
              	;		SBB - Steve Bogolub
              	;		PST - Paul Traina
              	;		HLB - Howard Booker
              	;		CAF - Chuck Forsberg
              	;		RAF - Bob Fischer
              	;		BB  - Ben Bronson
              	;		PRG - Paul Grupp
              	;		PJH - Paul Homchick
              	;		HEW - Hal Walchli
              	;
              	;   In an attempt to maintain a link to the past, changes between the
              	; current version of NZCPR are provided as both a difference file
              	; between NZCPR's (NZ14-16.DIF) and as a difference between the current
              	; version and the "official" ZCPR V1.0 (NZCPR-16.DIF).  These changes
              	; are made and supported by individuals in contact with each other through
              	; the Hyde Park RCPM in Chicago. Make comments or complaints there, to
              	; SBB or PST or anyone else interested.
              	;
              	;   The most obvious differences between NZCPR and ZCPR are the security
              	; features, controlled by additional conditional assembly flags. Such
              	; features restrict access to ZCPR intrinsic commands, add additional
              	; levels of .COM file searching, and prevent access to higher drives
              	; or user levels, with either internal or external password control of
              	; these features. Less obvious differences involve code optimization to
              	; gain space, and some minor bug fixes in the TYPE command.
              	;
              	;******** Structure Notes ********
              	;
              	;	This CPR is divided into a number of major sections.  The following
              	; is an outline of these sections and the names of the major routines
              	; located therein.
              	;
              	; Section	Function/Routines
              	; -------	-----------------
              	;
              	;   --		Opening Comments, Equates, and Macro Definitions
              	;
              	;    0		JMP Table into CPR
              	;
              	;    1		Buffers
              	;
              	;    2		CPR Starting Modules
              	;			CPR1	CPR	RESTRT	RSTCPR	RCPRNL
              	;			PRNNF	CMDTBL
              	;
              	;    3		Utilities
              	;			CRLF	CONOUT	CONIN	LCOUT	LSTOUT
              	;			READF	READ	BDOSB	PRINTC	PRINT
              	;			GETDRV	DEFDMA	DMASET	RESET	BDOSJP
              	;			LOGIN	OPENF	OPEN	GRBDOS	CLOSE
              	;			SEARF	SEAR1	SEARN	SUBKIL	DELETE
              	;			RESETUSR GETUSR	SETUSR	PAGER	UCASE
              	;			NOECHO
              	;
              	;     4		CPR Utilities
              	;			SETUD	SETU0D	REDBUF	CNVBUF	CMDSER
              	;			BREAK	USRNUM	ERROR	SDELM	ADVAN
              	;			SBLANK	ADDAH	NUMBER	NUMERR	HEXNUM
              	;			DIRPTR	SLOGIN	DLOGIN	COMLOG	SCANER
              	;
              	;     5		CPR-Resident Commands and Functions
              	;     5A		DIR	DIRPR	FILLQ
              	;     5B		ERA
              	;     5C		LIST
              	;     5D		TYPE
              	;     5E		SAVE
              	;     5F		REN
              	;     5G		USER
              	;     5H		DFU
              	;     5I		JUMP
              	;     5J		GO
              	;     5K		COM	CALLPROG	ERRLOG	ERRJMP
              	;     5L		GET	MEMLOAD	PRNLE
              	;     5M		PASS	NORM
              	;
              	;
0000:         	FALSE	EQU	0
00FF:         	TRUE	EQU	0FFh
              	;
              	;  CUSTOMIZATION EQUATES
              	;
              	;  The following equates may be used to customize this CPR for the user's
              	;    system and integration technique.  The following constants are provided:
              	;
              	;    REL - TRUE if integration is to be done via MOVCPM
              	;        - FALSE if integration is to be done via DDT and SYSGEN
              	;
              	;    SECURE -  TRUE to conditionally disable potentially-harmful
              	;	       commands (GO, ERA, SAVE, REN, DFU, GET, JUMP). Under
              	;	       SECURE, if WHEEL contains RESTRCT, do not accept those
              	;	       commands, and search for COM files under current user
              	;	       then user "DEFUSR" only. If WHEEL does not contain
              	;	       RESTRCT (presumably from passworded change), allow
              	;	       all commands, and search current user, then last user
              	;	       set by DFU (originally "RESUSR"), then user "DEFUSR"
              	;	       for COM files, giving access with password to an
              	;	       additional level of COM files.
              	;
              	;	       (Note: WHEEL must point to a safe place in memory that
              	;		won't be overlayed)
              	;
              	;	If you have chosen a SECURE system,  all resident commands may be
              	; activated by entering:  PASS <password> <cr>  Where <password> is a sequence
              	; of characters placed at PASSID (if INPASS is true, otherwise, see
              	; documentation in PST's PASS.ASM).  If the password is incorrect. the system
              	; will come back with PASS? as if it was looking for a COM file.
              	;	NORM is the reverse of PASS, it will disable the WHEEL mode.
              	;
              	;    INPASS -  If in the SECURE mode, you wish to use a program similar
              	;	       to PST's PASS.ASM, set this false, otherwise, ZCPR will
              	;	       handle the PASSword coding with a built in command.
              	;
              	;    DRUSER -  Set this EQU false if you wish to disable RAF's neat hack
              	;	       that allows you the type B: 7 to move to drive B: user area
              	;	       seven.  This also removes the USER command.  Basically, set
              	;	       this equate false if you want to use USERPW or some other pgm.
              	;
              	;    RAS    -  Remote-Access System; setting this equate to TRUE disables
              	;	       certain CPR commands that are considered harmful in a Remote-
              	;	       Access environment; use under Remote-Access Systems (RBBS) for
              	;	       security purposes.  Note: SECURE is the direct enemy of RAS,
              	;	       DON'T define both equates or you will be VERY sorry.
              	;	       The advantage SECURE has over RAS is that by saying a magic
              	;	       word, all of the normal commands pop into existance.
              	;
              	;    MAXDRIV - Maximum legal drive number stored in this location.
              	;	       (0 means only A:, etc.)  0000H disables this feature.
              	;	       The value MAXDR is stuffed into MAXDRIV at cold boot,
              	;	       and presumably will be changed later by a passworded
              	;	       program if desired.
              	;
              	;	       (This code is in addition to BIOS checks. It's needed here
              	;	       because X: can hang if X: is off line in some BIOS
              	;	       implementations. Personally, I think CAF and others should fix
              	;	       their BIOS instead. Mine works right...SBB).
              	;
              	;    USRMAX -  Maximum legal user # + 1 stored in this location. 0000H
              	;	       disables this feature, and uses the value of MAXUSR+1 instead.
              	;
              	;    BASE - Base Address of user's CP/M system (normally 0 for DR version)
              	;           This equate allows easy modification by non-standard CP/M (eg,H89)
              	;
              	;    CPRLOC - Base Page Address of CPR; this value can be obtained by running
              	;	      the BDOSLOC program on your system, or by setting the
              	;	      MSIZE and BIOSEX equates to the system memory size in
              	;	      K-bytes and the "extra" memory required by your BIOS
              	;	      in K-bytes. BIOSEX is zero if your BIOS is normal size,
              	;	      and can be negative if your BIOS is in PROM or in
              	;	      non-contiguous memory.
              	;
              	;    EPRMPT - Set TRUE to be prompted "OK?" after seeing what files will
              	;	      be erased. No, this is NOT for individual file prompting,
              	;	      it is just to confirm deletion of all selected files at once.
              	;
              	;  Various individuals keep trying to yank out the TYPE, LIST, and DIR
              	; commands, either to use the space for other options or just because
              	; they prefer replacement COM files. To these individuals, I (SBB) say
              	; keep your paws off these commands. For compatibility with the stock
              	; CCP, intrinsic DIR and TYPE commands are required. And many users in
              	; MY neighborhood find it more convenient to use the intrinsic LIST
              	; command than to have a LIST/PRINT program on every disk. If you want
              	; to call a transient program by an intrinsic, then CHANGE THE INTRINSIC
              	; NAME IN THE TABLE. Even setting the name to blanks is fine to get
              	; rid of it. The point is, don't remove features others may want, just
              	; because you disagree, then throw it back in our laps. For those who
              	; simply MUST be rid of these commands, the following symbols control
              	; generation of the code in a CLEAN ACCEPTABLE fashion that allows
              	; others to have these features:
              	;
              	;    CPRTYP -	Set to TRUE to generate code for intrinsic TYPE command.
              	;
              	;    WSTYPE -	Set to TRUE to generate an extra three lines of code
              	;		to correctly interpret the WordStar (tm) internal
              	;		end of line hyphen for display, which is the ASCII
              	;		NEWLINE code (1FH) and normally non-printing or
              	;		troublemaking -- thanks to PJH for this one. CPRTYP
              	;		must be TRUE, or this symbol will be ignored.
              	;
              	;    CPRLST -	Set to TRUE to generate code for intrinsic LIST command.
              	;		Since almost all of the LIST code is common to the
              	;		TYPE code, CPRTYP must be set TRUE as well, or this
              	;		symbol will be ignored.
              	;
              	;    CPRDIR -	Set to TRUE to generate code for intrinsic DIR command.
              	;		Note that unlike the various directory programs, a
              	;		restricted DIR command here allows displaying the names
              	;		of SYS file ONLY, so many RCPM operators WANT this code.
              	;
              	;  Remember, you only get a total of 2048 (0800H) bytes of space for
              	; ALL of the generated code, or many other areas of your system
              	; generation will be affected. For example, to be fully SECURE, you
              	; would set SECURE to TRUE, and define MAXDRIV and USRMAX, and maybe
              	; use the internal password by setting INPASS to TRUE (external is
              	; MUCH recommended for easier modification). Those options absolutely
              	; generate too much code unless either CPRTYP or CPRDIR or both are
              	; set FALSE. A system with SECURE set to FALSE is right on the edge,
              	; and requires a give and take on options to fit, i.e. you can have
              	; MAXDRIV and USRMAX with DIR and TYPE if you leave out LIST and
              	; querying on ERASE, and so on.
              	;
              	;***************************************************************************
              	;** Be careful when playing with different combinations of these equates. **
              	;** You might not have enough memory to some combinations.  Check this    **
              	;** if you have problems, if they still persist, gripe to me (PST).       **
              	;***************************************************************************
              	;
              	;REL	EQU	TRUE		;SET TO TRUE FOR MOVCPM INTEGRATION
              	;
              	;BASE	EQU	0		;BASE OF CP/M SYSTEM (SET FOR STANDARD CP/M)
              	;
              	;; 	IF	REL
              	;; CPRLOC	EQU	0		;MOVCPM IMAGE
              	;; 	ELSE
              	;; ;
              	;; ; If REL is FALSE, the value of CPRLOC may be set in one
              	;; ; of two ways.  The first way is to set MSIZE and BIOSEX
              	;; ; as described above using the following three lines:
              	;; ;
              	;; ;MSIZE	EQU	56		;SIZE OF MEM IN K-BYTES
              	;; ;BIOSEX	EQU	2		;EXTRA # K-BYTES IN BIOS
              	;; ;CPRLOC	EQU	3400H+(MSIZE-20-BIOSEX)*1024	;CPR ORIGIN
              	;; ;
              	;; ; The second way is to obtain the origin of your current
              	;; ; CPR using BDSLOC or its equivalent, then merely set CPRLOC
              	;; ; to that value as in the following line:
              	;; ;
              	;; CPRLOC	EQU	0C400H		;FILL IN WITH BDOSLOC SUPPLIED VALUE
              	;; ;
              	;; ; Note that you should only use one method or the other.
              	;; ; Do NOT define CPRLOC twice!
              	;; ;
              	;; ; The following gives the required offset to load the CPR into the
              	;; ; CP/M SYSGEN Image through DDT (the Roffset command); Note that this
              	;; ; value conforms with the standard value presented in the CP/M reference
              	;; ; manuals, but it may not necessarily conform with the location of the
              	;; ; CCP in YOUR CP/M system; several systems (Morrow Designs, P&T, Heath
              	;; ; Org-0 to name a few) have the CCP located at a non-standard address in
              	;; ; the SYSGEN Image
              	;; ;
              	;; CPRR	EQU	0E00H-CPRLOC	;DDT LOAD OFFSET FOR APPLE SOFTCARD 56K
              	;; ;CPRR	EQU	0980H-CPRLOC	;DDT LOAD OFFSET
              	;; ;CPRR	EQU	1600H-CPRLOC	;DDT LOAD OFFSET FOR COMPUPRO DISK-1
              	;; ;CPRR	EQU	1100H-CPRLOC	;DDT LOAD OFFSET FOR MORROW DESIGNS
              	;; 	ENDIF
              	;
0000:         	RAS	EQU	FALSE		;SET TO TRUE IF CPR IS FOR A REMOTE-ACCESS
              					; SYSTEM AND YOU DON'T WANT TO RUN SECURE
              					; (FOO...)
              	;
0000:         	USRMAX	EQU	0000H		;LOCATION OF BYTE IN MEMORY CONTAINING
              					; NUMBER OF HIGHEST ALLOWABLE USER CODE + 1
              					; THIS VALUE IS SET BY CPR ON COLD BOOT,
              					; AND PRESUMABLY CONTROLLED AFTER THAT
              					; BY A PASSWORD PROGRAM. IF USRMAX=0, THEN
              					; MAXUSR BELOW IS USED FOR CHECKING ONLY.
              					; 03FH IS RECOMMENDED IF USED  ***
000F:         	MAXUSR	EQU	15		;MAX ALLOWED USER NUMBER, THIS + 1 IS STUFFED
              					; INTO USRMAX ON COLD BOOT, OR USED DIRECTLY
              					; IF USRMAX=0
              	;
0000:         	MAXDRIV	EQU	0000H		;LOCATION THAT HAS MAX LEGAL DRIVE #
              					;SET IT TO ZERO TO DISABLE THIS CHECK
              					;03DH IS RECOMMENDED IF USED ***
0001:         	MAXDR	EQU	1		;MAX DRIVE # TO SET INTO MAXDRIV ON COLD BOOT
              	;
0000:         	SECURE	EQU	FALSE		;SET TRUE FOR SECURE ENVIRONMENT...
              	;
0000:         	DEFUSR	EQU	0		;DEFAULT USER FOR UNRESTRICTED COM FILES
              	;
              		IF	SECURE
              	WHEEL	EQU	3EH		;SET TO "RESTRCT" FOR LIMITED ACCESS
              	RESTRCT EQU	0		;WHEN (WHEEL)==RESTRCT, LIMIT COMMANDS
              	RESUSR	EQU	15		;CHECK HERE FOR RESTRICTED ACCESS COM FILES
              					; (LIKE PIP) UNTIL CHANGED BY DFU OR WARM BOOT
              		ENDIF			;SECURE
              	;
0000:         	INPASS	EQU	FALSE		;SET TRUE IF RUNNING SECURE AND NOT PASS.COM
              	;
00FF:         	DRUSER	EQU	TRUE		;TRUE TO ALLOW USER COMMAND AND DRIVE/USER HACK
              	;
0000:         	EPRMPT	EQU	FALSE		;TRUE TO PROMPT BEFORE ERASING ALL FILES
              	;
00FF:         	CPRTYP	EQU	TRUE		;TRUE TO GENERATE TYPE CODE
00FF:         	WSTYPE	EQU	TRUE		;TRUE TO GENERATE WORDSTAR HYPHEN CHECK (CPRTYP
              					; MUST BE TRUE TOO)
00FF:         	CPRLST	EQU	TRUE		;TRUE TO GENERATE LIST CODE (CPRTYP MUST BETRUE TOO)
00FF:         	CPRDIR	EQU	TRUE		;TRUE TO GENERATE DIR CODE
              	;
              	;  ***  Note to Apple Softcard Users  ***
              	;
              	;  In their infinite (?) wisdom (???), Microsoft decided that the way to
              	; get a two-column directory display instead of four-column (narrow 40-col
              	; screen, remember) was to have their BIOS poke CCP every time it was
              	; loaded, if there was no terminal interface card in I/O slot 3.
              	; Naturally, that will turn into a random poke on any non-standard
              	; CCP, like this one.  The best way to get this CPR up on the Apple is to
              	; load it into CPM56.COM, at location 0E00H in the image.  The BIOS code
              	; that pokes the CPR can also be modified at that time.  The poke is done
              	; by "STA 0C8B2H", found at 24FEH in the CPM56 image.  To keep this
              	; feature, change the 0C8B2H address in that instruction by hand to
              	; the value generated for the symbol TWOPOK in the DIR routine.  If
              	; you have assembled out the DIR code by setting CPRDIR to FALSE, then
              	; disable this feature by changing the "STA" to "LDA", i.e. set the
              	; contents of location 24FEH from 32H to 3AH. If you wish to force
              	; a two-column display in all cases, set the TWOCOL switch below to a
              	; value of TRUE, and disable the poke.
              	;
0000:         	TWOCOL	EQU	FALSE		;TRUE IF TWO COL DIR INSTEAD OF FOUR
              	;
              	; The following is presented as an option, but is not generally user-customiz-
              	; able.  A basic design choice had to be made in the design of ZCPR concerning
              	; the execution of SUBMIT files.  The original CCP had a problem in this sense
              	; in that it ALWAYS looked for the SUBMIT file from drive A: and the SUBMIT
              	; program itself (SUBMIT.COM) would place the $$$.SUB file on the currently
              	; logged-in drive, so when the user was logged into B: and he issued a SUBMIT
              	; command, the $$$.SUB was placed on B: and did not execute because the CCP
              	; looked for it on A: and never found it.
              	;
              	;	After much debate it was decided to have ZCPR perform the same type of
              	; function as CCP (look for the $$$.SUB file on A:), but the problem with
              	; SUBMIT.COM still exists.  Hence, RGF designed SuperSUB and RLC took his
              	; SuperSUB and designed SUB from it; both programs are set up to allow the
              	; selection at assembly time of creating the $$$.SUB on the logged-in drive
              	; or on drive A:.
              	;
              	;	A final definition of the Indirect Command File ($$$.SUB or SUBMIT
              	; File) is presented as follows:
              	;
              	;		"An Indirect Command File is one which contains
              	;		 a series of commands exactly as they would be
              	;		 entered from a CP/M Console.  The SUBMIT Command
              	;		 (or SUB Command) reads this files and transforms
              	;		 it for processing by the ZCPR (the $$$.SUB File).
              	;		 ZCPR will then execute the commands indicated
              	;		 EXACTLY as if they were typed at the Console."
              	;
              	;	Hence, to permit this to happen, the $$$.SUB file must always
              	; be present on a specific drive, and A: is the choice for said drive.
              	; With this facility engaged as such, Indirect Command Files like:
              	;
              	;		DIR
              	;		A:
              	;		DIR
              	;
              	; can be executed, even though the currently logged-in drive is changed
              	; during execution.  If the $$$.SUB file was present on the currently
              	; logged-in drive, the above series of commands would not work since the
              	; ZCPR would be looking for $$$.SUB on the logged-in drive, and switching
              	; logged-in drives without moving the $$$.SUB file as well would cause
              	; processing to abort.
              	;
00FF:         	SUBA	EQU	TRUE 		;Set to TRUE to have $$$.SUB always on A:
              					;Set to FALSE to have $$$.SUB on the
              					; logged-in drive
              	;
              	;   The following flag enables extended processing for user-program supplied
              	; command lines.  This is for Command Level 3 of ZCPR.  Under the current
              	; ZCPR philosophy, three command levels exist:
              	;
              	;	(1) that command issued by the user from his console at the '>' prompt
              	;	(2) that command issued by a $$$.SUB file at the '$' prompt
              	;	(3) that command issued by a user program by placing the command into
              	;	    CIBUFF and setting the character count in CBUFF
              	;
              	;   Setting CLEVEL3 to TRUE enables extended processing of the third level of
              	; ZCPR command.  All the user program need do is to store the command line and
              	; set the character count; ZCPR will initialize the pointers properly, store
              	; the ending zero properly, and capitalize the command line for processing.
              	; Once the command line is properly stored, the user executes the command line
              	; by reentering the ZCPR through CPRLOC [NOTE:  The C register MUST contain
              	; a valid User/Disk Flag (see location 4) at this time.]
              	;
00FF:         	CLEVEL3	EQU	TRUE		;ENABLE COMMAND LEVEL 3 PROCESSING
              	;
              	;
              	;*** TERMINAL AND 'TYPE' CUSTOMIZATION EQUATES
              	;
0018:         	NLINES	EQU	24		;NUMBER OF LINES ON CRT SCREEN
00FF:         	WIDE	EQU	TRUE		;TRUE IF WIDE DIR DISPLAY
007C:         	FENCE	EQU	'|'		;SEP CHAR BETWEEN DIR FILES
              	;
0000:         	PGDFLT	EQU	FALSE 		;SET TO FALSE TO DISABLE PAGING BY DEFAULT
0050:         	PGDFLG	EQU	'P'		;FOR TYPE COMMAND: PAGE OR NOT (DEP ON PGDFLT)
              					;  THIS FLAG REVERSES THE DEFAULT EFFECT
              	;
0041:         	SYSFLG	EQU	'A' 		;FOR DIR COMMAND: LIST $SYS AND $DIR
              	;
0053:         	SOFLG	EQU	'S'		;FOR DIR COMMAND: LIST $SYS FILES ONLY
              	;
0000:         	SUPRES	EQU	FALSE		;SUPRESSES USER # REPORT FOR USER 0
              	;
0024:         	SPRMPT	EQU	'$'		;CPR PROMPT INDICATING SUBMIT COMMAND
003E:         	CPRMPT	EQU	'>'		;CPR PROMPT INDICATING USER COMMAND
              	;
0048:         	NUMBASE	EQU	'H'		;CHARACTER USED TO SWITCH FROM DEFAULT
              					; NUMBER BASE
              	;
0053:         	SECTFLG	EQU	'S'		;OPTION CHAR FOR SAVE COMMAND TO SAVE SECTORS
              	;
              	; END OF CUSTOMIZATION SECTION
              	;
000D:         	CR	EQU	0DH
000A:         	LF	EQU	0AH
0009:         	TAB	EQU	09H
000C:         	FFEED	EQU	0CH
0007:         	BEL	EQU	07H
              	;
              	;; WBOOT	EQU	BASE+0000H		;CP/M WARM BOOT ADDRESS
              	;; UDFLAG	EQU	BASE+0004H		;USER NUM IN HIGH NYBBLE, DISK IN LOW
              	;; BDOS	EQU	BASE+0005H		;BDOS FUNCTION CALL ENTRY PT
              	;; TFCB	EQU	BASE+005CH		;DEFAULT FCB BUFFER
              	;; TBUFF	EQU	BASE+0080H		;DEFAULT DISK I/O BUFFER
              	;; TPA	EQU	BASE+0100H		;BASE OF TPA
              	
0100:         	TPA    EQU     100H
              	
              	;
              	;**** Section 0 ****
              	;
              	;	ORG	0100H
              	;	.PHASE	CPRLOC
              	;
              	;  ENTRY POINTS INTO ZCPR
              	;
              	;    If the ZCPR is entered at location CPRLOC (at the JMP to CPR), then
              	; the default command in CIBUFF will be processed.  If the ZCPR is entered
              	; at location CPRLOC+3 (at the JMP to CPR1), then the default command in
              	; CIBUFF will NOT be processed.
              	;
              	;    NOTE:  Entry into ZCPR in this way is permitted under this version,
              	; but in order for this to work, CIBUFF and CBUFF MUST be initialized properly
              	; AND the C register MUST contain a valid User/Disk Flag (see Location 4: the
              	; most significant nybble contains the User Number and the least significant
              	; nybble contains the Disk Number).
              	;
              	;    Some user programs (such as SYNONYM3) attempt to use the default
              	; command facility.  Under the original CCP, it was necessary to initialize
              	; the pointer after the reserved space for the command buffer to point to
              	; the first byte of the command buffer.  Under current versions, this is
              	; no longer the case.  The CIBPTR (Command Input Buffer PoinTeR) is located
              	; to be compatible with such programs (provided they determine the buffer
              	; length from the byte at MBUFF [CPRLOC + 6]), but under ZCPR this is
              	; no longer necessary, since this buffer pointer is automatically
              	; initialized in all cases.
              	;
D400:         	cbase:  
D400:         	ENTRY:
D400: C3C3D4  		JP	CPR		; Process potential default command, and set
              					; USRMAX to MAXUSR default
D403: C3BFD4  		JP	CPR1		; Do NOT process potential default command
              	;	
              	;**** Section 1 ****
              	; BUFFERS ET AL
              	;
              	; INPUT COMMAND LINE AND DEFAULT COMMAND
              	;
              	;   The command line to be executed is stored here.  This command line
              	; is generated in one of three ways:
              	;
              	;	(1) by the user entering it through the BDOS READLN function at
              	;	    the du> prompt [user input from keyboard]
              	;	(2) by the SUBMIT File Facility placing it there from a $$$.SUB
              	;	    file
              	;	(3) by an external program or user placing the required command
              	;	    into this buffer
              	;
              	;   In all cases, the command line is placed into the buffer starting at
              	; CIBUFF.  This command line is terminated by the last character (NOT Carriage
              	; Return), and a character count of all characters in the command line
              	; up to and including the last character is placed into location CBUFF
              	; (immediately before the command line at CIBUFF).  The placed command line
              	; is then parsed, interpreted, and the indicated command is executed.
              	; If CLEVEL3 is permitted, a terminating zero is placed after the command
              	; (otherwise the user program has to place this zero) and the CIBPTR is
              	; properly initialized (otherwise the user program has to init this ptr).
              	; If the command is placed by a user program, entering at CPRLOC is enough
              	; to have the command processed.  Again, under the current ZCPR, it is not
              	; necessary to store the pointer to CIBUFF in CIBPTR; ZCPR will do this for
              	; the calling program if CLEVEL3 is made TRUE.
              	;
              	;   WARNING:  The command line must NOT exceed BUFLEN characters in length.
              	; For user programs which load this command, the value of BUFLEN can be
              	; obtained by examining the byte at MBUFF (CPRLOC + 6).
              	;
D406:         	inbuff: 
0050:         	BUFLEN	EQU	80		;MAXIMUM BUFFER LENGTH
D406:         	MBUFF:
D406: 50      		DEFB	BUFLEN		;MAXIMUM BUFFER LENGTH
D407:         	CBUFF:
D407: 00      		DEFB	0		;NUMBER OF VALID CHARS IN COMMAND LINE
              	
D408:         	CIBUFF:
D408: 494E4954	 	DEFM	'INIT '
D40C: 20      	
D40D: FF      	        DEFB    255
D40E: 20202020	        DEFM    '        ';DEFAULT (COLD BOOT) COMMAND
D412: 20202020	
              	;
              	;  The copyright notice from Digital Research is genned into the
              	; stock CCP at this location. It should be maintained in ZCPR,
              	; since Digital Research grants permission for ZCPR to exist.
              	;
D416: 2020434F		DEFM	'  COPYRIGHT (C) 1979, DIGITAL RESEARCH  '
D41A: 50595249	
D41E: 47485420	
D422: 28432920	
D426: 31393739	
D42A: 2C204449	
D42E: 47495441	
D432: 4C205245	
D436: 53454152	
D43A: 43482020	
D43E:         	CIBUF:
D43E: 00      		DEFB	0		;COMMAND STRING TERMINATOR
D43F: 4E5A4350		DEFM	'NZCPR V 1.6 of'
D443: 52205620	
D447: 312E3620	
D44B: 6F66    	
D44D: 2030382F		DEFM	' 08/03/82 '	;ZCPR ID FOR DISK DUMP
D451: 30332F38	
D455: 3220    	
D457: 0000    	 	DEFS	BUFLEN-($-CIBUFF)+1	;TOTAL IS 'BUFLEN' BYTES
              	;
D459:         	CIBPTR:
D459: 08D4    		DEFW	CIBUFF		;POINTER TO COMMAND INPUT BUFFER
D45B:         	CIPTR:
D45B: 3ED4    		DEFW	CIBUF		;POINTER TO CURR COMMAND FOR
              					; ERROR REPORTING
              	;
D45D: 00000000		DEFS	26		;STACK AREA
D461: 00...   	
D477:         	STACK	EQU	$		;TOP OF STACK
              	;
              	; FILE TYPE FOR COMMAND
              	;
D477:         	COMMSG:
D477: 434F4D  		DEFM	'COM'
              	;
              	; SUBMIT FILE CONTROL BLOCK
              	;
D47A:         	SUBFCB:
              		IF	SUBA		;IF $$$.SUB ON A:
D47A: 01      		DEFB	1		;DISK NAME SET TO DEFAULT TO DRIVE A:
              	;	ENDIF
              	;
              	;	IF	NOT SUBA	;IF $$$.SUB ON CURRENT DRIVE
              	        ELSE
              		DEFB	0		;DISK NAME SET TO DEFAULT TO CURRENT DRIVE
              		ENDIF
              	;
D47B: 242424  		DEFM	'$$$'		;FILE NAME
D47E: 20202020		DEFM	'     '
D482: 20      	
D483: 535542  		DEFM	'SUB'		;FILE TYPE
D486: 00      		DEFB	0		;EXTENT NUMBER
D487: 00      		DEFB	0		;S1
D488:         	SUBFS2:
D488: 00      		DEFS	1		;S2
D489:         	SUBFRC:
D489: 00      		DEFS	1		;RECORD COUNT
D48A: 00000000		DEFS	16		;DISK GROUP MAP
D48E: 00...   	
D49A:         	SUBFCR:
D49A: 00      		DEFS	1		;CURRENT RECORD NUMBER
              	; COMMAND FILE CONTROL BLOCK
              	;
D49B:         	FCBDN:
D49B: 00      		DEFS	1		;DISK NAME
D49C:         	FCBFN:
D49C: 00000000		DEFS	8		;FILE NAME
D4A0: 00000000	
D4A4:         	FCBFT:
D4A4: 000000  		DEFS	3		;FILE TYPE
D4A7: 00      		DEFS	1		;EXTENT NUMBER
D4A8: 0000    		DEFS	2		;S1 AND S2
D4AA: 00      		DEFS	1		;RECORD COUNT
D4AB:         	FCBDM:
D4AB: 00000000		DEFS	16		;DISK GROUP MAP
D4AF: 00...   	
D4BB:         	FCBCR:
D4BB: 00      		DEFS	1		;CURRENT RECORD NUMBER
              	;
              	; OTHER BUFFERS
              	;
D4BC:         	PAGCNT:
D4BC: 16      		DEFB	NLINES-2	;LINES LEFT ON PAGE
D4BD:         	CHRCNT:
D4BD: 00      		DEFB	0		;CHAR COUNT FOR TYPE
D4BE:         	QMCNT:
D4BE: 00      		DEFB	0		;QUESTION MARK COUNT FOR FCB TOKEN SCANNER
              	;
              	;
              	;**** Section 2 ****
              	; CPR STARTING POINTS.  NOTE THAT SOME CP/M IMPLEMENTATIONS
              	; REQUIRE THE COLD START ADDRESS TO BE IN THE STARTING PAGE
              	; OF THE CPR, FOR DYNAMIC CCP LOADING.  CMDTBL WAS MOVED FOR
              	; THIS REASON.
              	;
              	; SET USRMAX AND/OR MAXDRIV TO DEFAULT VALUES ON COLD BOOT
              	; IF REQUIRED. NOTE THAT SOME BIOS IMPLEMENTATIONS WILL END
              	; UP HERE INSTEAD OF AT THE WARM BOOT, DEFEATING PASSWORDING
              	; OF THESE OPTIONS. RECOMMEND SUCH A BIOS BE FIXED.
              	;
              		IF	USRMAX OR MAXDRIV
              	CPR:
              		IF	USRMAX
              		LD	A,MAXUSR+1	;SET USRMAX ON COLD BOOT
              		LD	(USRMAX),A
              		ENDIF			;USRMAX
              	;
              		IF	MAXDRIV
              		LD	A,MAXDR		;SET MAXDRIV ON COLD BOOT
              		LD	(MAXDRIV),A
              		ENDIF			;MAXDRIV
              	;
              		JR	CPR2		; THEN PROCEED
              		ENDIF			;USRMAX OR MAXDRIV
              	;
              	; START CPR AND DON'T PROCESS DEFAULT COMMAND STORED
              	;
D4BF:         	CPR1:
D4BF: AF      		XOR	A		;SET NO DEFAULT COMMAND
D4C0: 3207D4  		LD	(CBUFF),A
              	;
              	; START CPR AND POSSIBLY PROCESS DEFAULT COMMAND
              	;
              	; NOTE ON MODIFICATION BY RGF: BDOS RETURNS 0FFH IN
              	; ACCUMULATOR WHENEVER IT LOGS IN A DIRECTORY, IF ANY
              	; FILE NAME CONTAINS A '$' IN IT.  THIS IS NOW USED AS
              	; A CLUE TO DETERMINE WHETHER OR NOT TO DO A SEARCH
              	; FOR SUBMIT FILE, IN ORDER TO ELIMINATE WASTEFUL SEARCHES.
              	;
              		IF	USRMAX OR MAXDRIV
              	CPR2:
              		ELSE
D4C3:         	CPR:
              		ENDIF			;USRMAX OR MAXDRIV
              	;
D4C3: 3177D4  		LD	SP,STACK	;RESET STACK
D4C6: C5      		PUSH	BC
D4C7: 79      		LD	A,C		;C=USER/DISK NUMBER (SEE LOC 4)
D4C8: 1F      		RRA			;EXTRACT USER NUMBER
D4C9: 1F      		RRA
D4CA: 1F      		RRA
D4CB: 1F      		RRA
D4CC: E60F    		AND	0FH
D4CE: 5F      		LD	E,A		;SET USER NUMBER
D4CF: CD70D6  		CALL	SETUSR
D4D2: CD33D6  		CALL	RESET		;RESET DISK SYSTEM
D4D5: 32E8D4  		LD	(RNGSUB),A	;SAVE SUBMIT CLUE FROM DRIVE A:
D4D8: C1      		POP	BC
D4D9: 79      		LD	A,C		;C=USER/DISK NUMBER (SEE LOC 4)
D4DA: E60F    		AND	0FH		;EXTRACT DEFAULT DISK DRIVE
D4DC: 3284D6  		LD	(TDRIVE),A	;SET IT
D4DF: 2803    		JR	Z,NOLOG		;SKIP IF 0...ALREADY LOGGED
D4E1: CD38D6  		CALL	LOGIN		;LOG IN DEFAULT DISK
              	;
              		IF	SUBA	;IF $$$.SUB IS ON CURRENT DRIVE
              	        ELSE
              		LD	(RNGSUB),A	;BDOS '$' CLUE
              		ENDIF
              	;
D4E4:         	NOLOG:
D4E4: 117AD4  		LD	DE,SUBFCB	;CHECK FOR $$$.SUB ON CURRENT DISK
D4E8:         	batch   equ     $+1
D4E8:         	RNGSUB	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
D4E7: 3E00    	        LD	A,0	        ;2ND BYTE (IMMEDIATE ARG) IS THE RNGSUB FLAG
D4E9: B7      		OR	A		;SET FLAGS ON CLUE
D4EA: 2F      		CPL			;PREPARE FOR COMING 'CPL'
D4EB: C452D6  		CALL	NZ,SEAR1
D4EE: 2F      		CPL			;0FFH IS RETURNED IF NO $$$.SUB, SO COMPLEMENT
D4EF: 32E8D4  		LD	(RNGSUB),A	;SET FLAG (0=NO $$$.SUB)
D4F2: 3A07D4  		LD	A,(CBUFF)	;EXECUTE DEFAULT COMMAND?
D4F5: B7      		OR	A		;0=NO
D4F6: 2026    		JR	NZ,RS1
              	;
              	; PROMPT USER AND INPUT COMMAND LINE FROM HIM
              	;
D4F8:         	RESTRT:
D4F8: 3177D4  		LD	SP,STACK	;RESET STACK
              	;
              	; PRINT PROMPT (DU>)
              	;
D4FB: CDA7D5  		CALL	CRLF		;PRINT PROMPT
D4FE: CD28D6  		CALL	GETDRV		;CURRENT DRIVE IS PART OF PROMPT
D501: C641    		ADD	A,'A'		;CONVERT TO ASCII A-P
D503: CDAED5  		CALL	CONOUT
D506: CD6ED6  		CALL	GETUSR		;GET USER NUMBER
              	;
              		IF	SUPRES		;IF SUPPRESSING USR # REPORT FOR USR 0
              		OR	A
              		JR	Z,RS000
              		ENDIF
              	;
D509: FE0A    		CP	10		;USER < 10?
D50B: 3809    		JR	C,RS00
D50D: D60A    		SUB	10		;SUBTRACT 10 FROM IT
D50F: F5      		PUSH	AF		;SAVE IT
D510: 3E31    		LD	A,'1'		;OUTPUT 10'S DIGIT
D512: CDAED5  		CALL	CONOUT
D515: F1      		POP	AF
D516:         	RS00:
D516: C630    		ADD	A,'0'		;OUTPUT 1'S DIGIT (CONVERT TO ASCII)
D518: CDAED5  		CALL	CONOUT
              	;
              	; READ INPUT LINE FROM USER OR $$$.SUB
              	;
D51B:         	RS000:
D51B: CD89D6  		CALL	REDBUF		;INPUT COMMAND LINE FROM USER (OR $$$.SUB)
              	;
              	; PROCESS INPUT LINE
              	;
D51E:         	RS1:
              	;
              		IF	CLEVEL3		;IF THIRD COMMAND LEVEL IS PERMITTED
D51E: CDEAD6  		CALL	CNVBUF		;CAPITALIZE COMMAND LINE, PLACE ENDING 0,
              					; AND SET CIBPTR VALUE
              		ENDIF
              	;
D521: CD2CD6  		CALL	DEFDMA		;SET TBUFF TO DMA ADDRESS
D524: CD28D6  		CALL	GETDRV		;GET DEFAULT DRIVE NUMBER
D527: 3284D6  		LD	(TDRIVE),A	;SET IT
D52A: CD02D8  		CALL	SCANER		;PARSE COMMAND NAME FROM COMMAND LINE
D52D: C411D7  		CALL	NZ,ERROR	;ERROR IF COMMAND NAME CONTAINS A '?'
D530: 1146D5  		LD	DE,RSTCPR	;PUT RETURN ADDRESS OF COMMAND
D533: D5      		PUSH	DE		;ON THE STACK
D534: 3AF9D7  		LD	A,(TEMPDR)	;IS COMMAND OF FORM 'D:COMMAND'?
D537: B7      		OR	A		;NZ=YES
D538: C2F1DA  		JP	NZ,COM		; IMMEDIATELY
D53B: CD81D8  		CALL	CMDSER		;SCAN FOR CPR-RESIDENT COMMAND
D53E: C2F1DA  		JP	NZ,COM		;NOT CPR-RESIDENT
D541: 7E      		LD	A,(HL)		;FOUND IT:  GET LOW-ORDER PART
D542: 23      		INC	HL		;GET HIGH-ORDER PART
D543: 66      		LD	H,(HL)		;STORE HIGH
D544: 6F      		LD	L,A		;STORE LOW
D545: E9      		JP	(HL)		;EXECUTE CPR ROUTINE
              	;
              	; ENTRY POINT FOR RESTARTING CPR AND LOGGING IN DEFAULT DRIVE
              	;
D546:         	RSTCPR:
D546: CDEED7  		CALL	DLOGIN		;LOG IN DEFAULT DRIVE
              	;
              	; ENTRY POINT FOR RESTARTING CPR WITHOUT LOGGING IN DEFAULT DRIVE
              	;
D549:         	RCPRNL:
D549: CD02D8  		CALL	SCANER		;EXTRACT NEXT TOKEN FROM COMMAND LINE
D54C: 3A9CD4  		LD	A,(FCBFN)	;GET FIRST CHAR OF TOKEN
D54F: D620    		SUB	' '		;ANY CHAR?
D551: 21F9D7  		LD	HL,TEMPDR
D554: B6      		OR	(HL)
D555: C211D7  		JP	NZ,ERROR
D558: 189E    		JR	RESTRT
              	;
              	; No File Error Message
              	;
D55A:         	PRNNF:
D55A: CD10D6  		CALL	PRINTC		;NO FILE MESSAGE
D55D: 4E6F2046		DEFM	'No Fil'
D561: 696C    	
D563: E5      		DEFB	'e'+80H
D564: C9      		RET
              	;
              	; CPR BUILT-IN COMMAND TABLE
              	;
0004:         	NCHARS	EQU	4		;NUMBER OF CHARS/COMMAND
              	;
              	; CPR COMMAND NAME TABLE
              	;   EACH TABLE ENTRY IS COMPOSED OF THE 4-BYTE COMMAND AND 2-BYTE ADDRESS
              	;
D565:         	CMDTBL:
              	;
              		IF	INPASS AND SECURE
              		DEFM	'PASS'		;ENABLE WHEEL (SYSOP) MODE
              		DEFW	PASS
              		ENDIF			;INPASS AND SECURE
              	;
              		IF	DRUSER
D565: 55534552		DEFM	'USER'		;CHANGE USER AREAS
D569: D5DA    		DEFW	USER
              		ENDIF			;DRUSER
              	;
              		IF	CPRTYP
D56B: 54595045		DEFM	'TYPE'		;TYPE A FILE TO CON:
D56F: 7FD9    		DEFW	TYPE
              		ENDIF			;CPRTYP
              	;
              		IF	CPRDIR
D571: 44495220		DEFM	'DIR '		;PULL A DIRECTORY OF DISK FILES
D575: A3D8    		DEFW	DIR
              		ENDIF			;CPRDIR
              	
0003:         	NRCMDS	EQU	($-CMDTBL)/(NCHARS+2)
              					;PUT ANY COMMANDS THAT ARE OK TO
              					;RUN WHEN NOT UNDER WHEEL MODE
              					;IN FRONT OF THIS LABEL
              		IF	CPRLST AND CPRTYP
D577: 4C495354		DEFM	'LIST'		;LIST FILE TO PRINTER
D57B: 7BD9    		DEFW	LIST
              		ENDIF			;CPRLST AND CPRTYP
              	;
              		IF	INPASS AND SECURE
              		DEFM	'NORM'		;DISABLE WHEEL MODE
              		DEFW	NORM
              		ENDIF			;INPASS AND SECURE
              	;
              		IF	RAS		;FOR NON-RAS
              	        ELSE
D57D: 474F2020		DEFM	'GO  '		;JUMP TO 100H
D581: ECDA    		DEFW	GO
D583: 45524120		DEFM	'ERA '		;ERASE FILE
D587: 54D9    		DEFW	ERA
D589: 53415645		DEFM	'SAVE'		;SAVE MEMORY IMAGE TO DISK
D58D: 0CDA    		DEFW	SAVE
D58F: 52454E20		DEFM	'REN '		;RENAME FILE
D593: 91DA    		DEFW	REN
D595: 44465520		DEFM	'DFU '		;SET DEFAULT USER
D599: DFDA    		DEFW	DFU
D59B: 47455420		DEFM	'GET '		;LOAD FILE INTO MEMORY
D59F: 93DB    		DEFW	GET
D5A1: 4A554D50		DEFM	'JUMP'		;JUMP TO LOCATION IN MEMORY
D5A5: E7DA    		DEFW	JUMP
              		ENDIF			;RAS
              	;
000B:         	NCMNDS	EQU	($-CMDTBL)/(NCHARS+2)
              	;
              	;**** Section 3 ****
              	; I/O UTILITIES
              	;
              	; OUTPUT CHAR IN REG A TO CONSOLE AND DON'T CHANGE BC
              	;
              	;
              	; OUTPUT <CRLF>
              	;
D5A7:         	CRLF:
D5A7: 3E0D    		LD	A,CR
D5A9: CDAED5  		CALL	CONOUT
D5AC: 3E0A    		LD	A,LF		;FALL THRU TO CONOUT
              	;
D5AE:         	CONOUT:
D5AE: C5      		PUSH	BC
D5AF: 0E02    		LD	C,02H
D5B1:         	OUTPUT:
D5B1: E67F    		AND	7FH		;PREVENT INADVERTANT GRAPHIC OUTPUT
              					; TO EPSON-TYPE PRINTERS
D5B3: 5F      		LD	E,A
D5B4: E5      		PUSH	HL
D5B5: CD0500  		CALL	BDOS
D5B8: E1      		POP	HL
D5B9: C1      		POP	BC
D5BA: C9      		RET
              	;
D5BB:         	CONIN:
D5BB: 0E01    		LD	C,01H		;GET CHAR FROM CON: WITH ECHO
D5BD: CD09D6  		CALL	BDOSB
              	;
              	; CONVERT CHAR IN A TO UPPER CASE
              	;
D5C0:         	UCASE:
D5C0: FE61    		CP	61H		;LOWER-CASE A
D5C2: D8      		RET	C
D5C3: FE7B    		CP	7BH		;GREATER THAN LOWER-CASE Z?
D5C5: D0      		RET	NC
D5C6: E65F    		AND	5FH		;CAPITALIZE
D5C8: C9      		RET
              	;
D5C9:         	NOECHO:
D5C9: D5      		PUSH	DE		;SAVE D
D5CA: 0E06    		LD	C,6		;DIRECT CONSOLE I/O
D5CC: 1EFF    		LD	E,0FFH		;INPUT
D5CE: CD09D6  		CALL	BDOSB
D5D1: D1      		POP	DE
D5D2: B7      		OR	A		;DID WE GET A CHAR?
D5D3: 28F4    		JR	Z,NOECHO	;WAIT FOR IT IF NOT, IT'S EXPECTED
D5D5: C9      		RET
              	;
              		IF	CPRTYP
D5D6:         	LCOUT:
              		ENDIF			;CPRTYP
              	;
              		IF	CPRTYP AND CPRLST
D5D6: F5      		PUSH	AF		;OUTPUT CHAR TO CON: OR LST: DEP ON PRFLG
D5D8:         	PRFLG	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
D5D7: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS THE PRINT FLAG
D5D9: B7      		OR	A		;0=TYPE
D5DA: 2806    		JR	Z,LC1
D5DC: F1      		POP	AF		;GET CHAR
              	;
              	; OUTPUT CHAR IN REG A TO LIST DEVICE
              	;
D5DD:         	LSTOUT:
D5DD: C5      		PUSH	BC
D5DE: 0E05    		LD	C,05H
D5E0: 18CF    		JR	OUTPUT
D5E2:         	LC1:
D5E2: F1      		POP	AF		;GET CHAR
              		ENDIF			;CPRTYP AND CPRLST
              	;
              		IF	CPRTYP
D5E3: F5      		PUSH	AF
D5E4: CDAED5  		CALL	CONOUT		;OUTPUT TO CON:
D5E7: F1      		POP	AF
D5E8: FE0A    		CP	LF		;CHECK FOR PAGING
D5EA: C0      		RET	NZ		;DONE IF NOT EOL YET
              	;
              	;  COUNT DOWN LINES AND PAUSE FOR INPUT (DIRECT) IF COUNT EXPIRES
              	;
D5EB: E5      		PUSH	HL
D5EC: 21BCD4  		LD	HL,PAGCNT	;COUNT DOWN
D5EF: 35      		DEC	(HL)
D5F0: 2010    		JR	NZ,PGBAK	;JUMP IF NOT END OF PAGE
D5F2: 3616    		LD	(HL),NLINES-2	;REFILL COUNTER
              	;
D5F5:         	PGFLG	EQU	$+1		;POINTER TO IN-THE-CODE BUFFER PGFLG
D5F4: 3E00    		LD	A,0		;0 MAY BE CHANGED BY PGFLG EQUATE
D5F6: FE50    		CP	PGDFLG		;PAGE DEFAULT OVERRIDE OPTION WANTED?
              	;
              		IF	PGDFLT		;IF PAGING IS DEFAULT
              		JR	Z,PGBAK		;  PGDFLG MEANS NO PAGING, PLEASE
              		ELSE			;IF PAGING NOT DEFAULT
D5F8: 2008    		JR	NZ,PGBAK	;  PGDFLG MEANS PLEASE PAGINATE
              		ENDIF
              	;
D5FA: CDC9D5  		CALL	NOECHO		;GET CHAR BUT DON'T ECHO TO SCREEN
D5FD: FE03    		CP	'C'-'@' 	;^C
D5FF: CA46D5  		JP	Z,RSTCPR	;RESTART CPR
D602:         	PGBAK:
D602: E1      		POP	HL		;RESTORE HL
D603: C9      		RET
              		ENDIF			;CPRTYP
              	;
D604:         	READF:
D604: 119BD4  		LD	DE,FCBDN 	;FALL THRU TO READ
D607:         	READ:
D607: 0E14    		LD	C,14H		;FALL THRU TO BDOSB
              	;
              	; CALL BDOS AND SAVE BC
              	;
D609:         	BDOSB:
D609: C5      		PUSH	BC
D60A: CD0500  		CALL	BDOS
D60D: C1      		POP	BC
D60E: B7      		OR	A
D60F: C9      		RET
              	;
              	; PRINT STRING ENDING WITH ZERO BYTE OR CHAR WITH HIGH BIT SET
              	; PT'ED TO BY RET ADDR, START WITH <CR><LF>
              	;
D610:         	PRINTC:
D610: F5      		PUSH	AF		;SAVE FLAGS
D611: CDA7D5  		CALL	CRLF		;NEW LINE
D614: F1      		POP	AF
              	;
D615:         	PRINT:
D615: E3      		EX	(SP),HL		;GET PTR TO STRING
D616: F5      		PUSH	AF		;SAVE FLAGS
D617: CD1DD6  		CALL	PRIN1		;PRINT STRING
D61A: F1      		POP	AF		;GET FLAGS
D61B: E3      		EX	(SP),HL		;RESTORE HL AND RET ADR
D61C: C9      		RET
              	;
              	; PRINT STRING ENDING WITH ZERO BYTE OR CHAR WITH HIGH BIT SET
              	; PT'ED TO BY HL
              	;
D61D:         	PRIN1:
D61D: 7E      		LD	A,(HL)		;GET NEXT BYTE
D61E: CDAED5  		CALL	CONOUT		;PRINT CHAR
D621: 7E      		LD	A,(HL)		;GET NEXT BYTE AGAIN FOR TEST
D622: 23      		INC	HL		;PT TO NEXT BYTE
D623: B7      		OR	A		;SET FLAGS
D624: C8      		RET	Z		;DONE IF ZERO
D625: F8      		RET	M		;DONE IF MSB SET
D626: 18F5    		JR	PRIN1
              	;
              	; BDOS FUNCTION ROUTINES
              	;
              	;
              	; RETURN NUMBER OF CURRENT DISK IN A
              	;
D628:         	GETDRV:
D628: 0E19    		LD	C,19H
D62A: 1809    		JR	BDOSJP
              	;
              	; SET 80H AS DMA ADDRESS
              	;
D62C:         	DEFDMA:
D62C: 118000  		LD	DE,TBUFF 	;80H=TBUFF
D62F:         	DMASET:
D62F: 0E1A    		LD	C,1AH
D631: 1802    		JR	BDOSJP
              	;
D633:         	RESET:
D633: 0E0D    		LD	C,0DH
D635:         	BDOSJP:
D635: C30500  		JP	BDOS
              	;
D638:         	LOGIN:
D638: 5F      		LD	E,A		;MOVE DESIRED # TO BDOS REG
              	;
              		IF	MAXDRIV
              		LD	A,(MAXDRIV)	;CHECK FOR LEGAL DRIVE #
              		CP	E
              		JP	C,ERROR		;DON'T DO IT IF TOO HIGH
              		ENDIF			;MAXDRIV
              	;
D639: 0E0E    		LD	C,0EH
D63B: 18F8    		JR	BDOSJP		;SAVE SOME CODE SPACE
              	;
D63D:         	OPENF:
D63D: AF      		XOR	A
D63E: 32BBD4  		LD	(FCBCR),A
D641: 119BD4  		LD	DE,FCBDN 	;FALL THRU TO OPEN
              	;
D644:         	OPEN:
D644: 0E0F    		LD	C,0FH		;FALL THRU TO GRBDOS
              	;
D646:         	GRBDOS:
D646: CD0500  		CALL	BDOS
D649: 3C      		INC	A		;SET ZERO FLAG FOR ERROR RETURN
D64A: C9      		RET
              	;
D64B:         	CLOSE:
D64B: 0E10    		LD	C,10H
D64D: 18F7    		JR	GRBDOS
              	;
D64F:         	SEARF:
D64F: 119BD4  		LD	DE,FCBDN 	;SPECIFY FCB
D652:         	SEAR1:
D652: 0E11    		LD	C,11H
D654: 18F0    		JR	GRBDOS
              	;
D656:         	SEARN:
D656: 0E12    		LD	C,12H
D658: 18EC    		JR	GRBDOS
              	;
              	; CHECK FOR SUBMIT FILE IN EXECUTION AND ABORT IT IF SO
              	;
D65A:         	SUBKIL:
D65A: 21E8D4  		LD	HL,RNGSUB	;CHECK FOR SUBMIT FILE IN EXECUTION
D65D: 7E      		LD	A,(HL)
D65E: B7      		OR	A		;0=NO
D65F: C8      		RET	Z
D660: 3600    		LD	(HL),0		;ABORT SUBMIT FILE
D662: 117AD4  		LD	DE,SUBFCB	;DELETE $$$.SUB
              	;
D665:         	DELETE:
D665: 0E13    		LD	C,13H
D667: 18CC    		JR	BDOSJP		;SAVE MORE SPACE
              	;
              	; RESET USER NUMBER IF CHANGED
              	;
D669:         	RESETUSR:
D66A:         	TMPUSR	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
D669: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS TMPUSR
D66B: 5F      		LD	E,A		;PLACE IN E
D66C: 1802    		JR	SETUSR		;THEN GO SET USER
D66E:         	GETUSR:
D66E: 1EFF    		LD	E,0FFH		;GET CURRENT USER NUMBER
D670:         	SETUSR:
D670: 0E20    		LD	C,20H		;SET USER NUMBER TO VALUE IN E (GET IF E=FFH)
D672: 18C1    		JR	BDOSJP		;MORE SPACE SAVING
              	;
              	; END OF BDOS FUNCTIONS
              	;
              	;
              	;**** Section 4 ****
              	; CPR UTILITIES
              	;
              	; SET USER/DISK FLAG TO CURRENT USER AND DEFAULT DISK
              	;
D674:         	SETUD:
D674: CD6ED6  		CALL	GETUSR		;GET NUMBER OF CURRENT USER
D677: 87      		ADD	A,A		;PLACE IT IN HIGH NYBBLE
D678: 87      		ADD	A,A
D679: 87      		ADD	A,A
D67A: 87      		ADD	A,A
D67B: 2184D6  		LD	HL,TDRIVE	;MASK IN DEFAULT DRIVE NUMBER (LOW NYBBLE)
D67E: B6      		OR	(HL)		;MASK IN
D67F: 320400  		LD	(UDFLAG),A	;SET USER/DISK NUMBER
D682: C9      		RET
              	;
              	; SET USER/DISK FLAG TO USER 0 AND DEFAULT DISK
              	;
D683:         	SETU0D:
D684:         	TDRIVE	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
D683: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS TDRIVE
D685: 320400  		LD	(UDFLAG),A	;SET USER/DISK NUMBER
D688: C9      		RET
              	;
              	; INPUT NEXT COMMAND TO CPR
              	;	This routine determines if a SUBMIT file is being processed
              	; and extracts the command line from it if so or from the user's console
              	;
D689:         	REDBUF:
D689: 3AE8D4  		LD	A,(RNGSUB)	;SUBMIT FILE CURRENTLY IN EXECUTION?
D68C: B7      		OR	A		;0=NO
D68D: 2845    		JR	Z,RB1		;GET LINE FROM CONSOLE IF NOT
D68F: 117AD4  		LD	DE,SUBFCB	;OPEN $$$.SUB
D692: D5      		PUSH	DE		;SAVE DE
D693: CD44D6  		CALL	OPEN
D696: D1      		POP	DE		;RESTORE DE
D697: 283B    		JR	Z,RB1		;ERASE $$$.SUB IF END OF FILE AND GET CMND
D699: 3A89D4  		LD	A,(SUBFRC)	;GET VALUE OF LAST RECORD IN FILE
D69C: 3D      		DEC	A		;PT TO NEXT TO LAST RECORD
D69D: 329AD4  		LD	(SUBFCR),A	;SAVE NEW VALUE OF LAST RECORD IN $$$.SUB
D6A0: CD07D6  		CALL	READ		;DE=SUBFCB
D6A3: 202F    		JR	NZ,RB1		;ABORT $$$.SUB IF ERROR IN READING LAST REC
D6A5: 1107D4  		LD	DE,CBUFF 	;COPY LAST RECORD (NEXT SUBMIT CMND) TO CBUFF
D6A8: 218000  		LD	HL,TBUFF 	;  FROM TBUFF
D6AB: 015000  		LD	BC,BUFLEN	;NUMBER OF BYTES
D6AE: EDB0    		LDIR
D6B0: 2188D4  		LD	HL,SUBFS2	;PT TO S2 OF $$$.SUB FCB
D6B3: 3600    		LD	(HL),0		;SET S2 TO ZERO
D6B5: 23      		INC	HL		;PT TO RECORD COUNT
D6B6: 35      		DEC	(HL)		;DECREMENT RECORD COUNT OF $$$.SUB
D6B7: 117AD4  		LD	DE,SUBFCB	;CLOSE $$$.SUB
D6BA: CD4BD6  		CALL	CLOSE
D6BD: 2815    		JR	Z,RB1		;ABORT $$$.SUB IF ERROR
D6BF: 3E24    		LD	A,SPRMPT	;PRINT SUBMIT PROMPT
D6C1: CDAED5  		CALL	CONOUT
D6C4: 2108D4  		LD	HL,CIBUFF	;PRINT COMMAND LINE FROM $$$.SUB
D6C7: CD1DD6  		CALL	PRIN1
D6CA: CD00D7  		CALL	BREAK		;CHECK FOR ABORT (ANY CHAR)
              	;
              		IF	CLEVEL3		;IF THIRD COMMAND LEVEL IS PERMITTED
D6CD: C8      		RET	Z		;IF <NULL> (NO ABORT), RETURN TO CALLER AND RUN
              		ENDIF
              	;
              		IF	CLEVEL3	;IF THIRD COMMAND LEVEL IS NOT PERMITTED
              	        ELSE
              		JR	Z,CNVBUF	;IF <NULL> (NO ABORT), CAPITALIZE COMMAND
              		ENDIF
              	;
D6CE: CD5AD6  		CALL	SUBKIL		;KILL $$$.SUB IF ABORT
D6D1: C3F8D4  		JP	RESTRT		;RESTART CPR
              	;
              	; INPUT COMMAND LINE FROM USER CONSOLE
              	;
D6D4:         	RB1:
D6D4: CD5AD6  		CALL	SUBKIL		;ERASE $$$.SUB IF PRESENT
D6D7: CD74D6  		CALL	SETUD		;SET USER AND DISK
D6DA: 3E3E    		LD	A,CPRMPT	;PRINT PROMPT
D6DC: CDAED5  		CALL	CONOUT
D6DF: 0E0A    		LD	C,0AH		;READ COMMAND LINE FROM USER
D6E1: 1106D4  		LD	DE,MBUFF
D6E4: CD0500  		CALL	BDOS
              	;
              		IF	CLEVEL3		;IF THIRD COMMAND LEVEL IS PERMITTED
D6E7: C383D6  		JP	SETU0D		;SET CURRENT DISK NUMBER IN LOWER PARAMS
              		ENDIF
              	;
              		IF	CLEVEL3	;IF THIRD COMMAND LEVEL IS NOT PERMITTED
              	        ELSE
              		CALL	SETU0D		;SET CURRENT DISK NUMBER IF LOWER PARAMS
              					; AND FALL THRU TO CNVBUF
              		ENDIF
              	;
              	; CAPITALIZE STRING (ENDING IN 0) IN CBUFF AND SET PTR FOR PARSING
              	;
D6EA:         	CNVBUF:
D6EA: 2107D4  		LD	HL,CBUFF 	;PT TO USER'S COMMAND
D6ED: 46      		LD	B,(HL)		;CHAR COUNT IN B
D6EE: 04      		INC	B		;ADD 1 IN CASE OF ZERO
D6EF:         	CB1:
D6EF: 23      		INC	HL		;PT TO 1ST VALID CHAR
D6F0: 7E      		LD	A,(HL)		;CAPITALIZE COMMAND CHAR
D6F1: CDC0D5  		CALL	UCASE
D6F4: 77      		LD	(HL),A
D6F5: 10F8    		DJNZ	CB1		;CONTINUE TO END OF COMMAND LINE
D6F7:         	CB2:
D6F7: 3600    		LD	(HL),0		;STORE ENDING <NULL>
D6F9: 2108D4  		LD	HL,CIBUFF	;SET COMMAND LINE PTR TO 1ST CHAR
D6FC: 2259D4  		LD	(CIBPTR),HL
D6FF: C9      		RET
              	;
              	; CHECK FOR ANY CHAR FROM USER CONSOLE;RET W/ZERO SET IF NONE
              	;
D700:         	BREAK:
D700: D5      		PUSH	DE		;SAVE DE
D701: 0E0B    		LD	C,11		;CSTS CHECK
D703: CD09D6  		CALL	BDOSB
D706: C4BBD5  		CALL	NZ,CONIN	;GET INPUT CHAR
D709:         	BRKBK:
D709: D1      		POP	DE
D70A: C9      		RET
              	;
              	; GET THE REQUESTED USER NUMBER FROM THE COMMAND LINE AND VALIDATE IT.
              	;
D70B:         	USRNUM:		
D70B: CD5DD7  		CALL	NUMBER
              	;
              		IF	USRMAX
              		LD	HL,USRMAX 	;PT TO MAXUSR + 1
              		CP	(HL)		;NEW VALUE ALLOWED?
              		ELSE
D70E: FE10    		CP	MAXUSR+1 	;NEW VALUE ALLOWED?
              		ENDIF			;USRMAX
              	;
D710: D8      		RET	C		;RETURN TO CALLER IF SO,
              					; ELSE FLAG AS ERROR
              	;
              	; INVALID COMMAND -- PRINT IT
              	;
D711:         	ERROR:
D711: CDA7D5  		CALL	CRLF		;NEW LINE
D714: 2A5BD4  		LD	HL,(CIPTR)	;PT TO BEGINNING OF COMMAND LINE
D717:         	ERR2:
D717: 7E      		LD	A,(HL)		;GET CHAR
D718: FE21    		CP	' '+1		;SIMPLE '?' IF <SP> OR LESS
D71A: 3808    		JR	C,ERR1
D71C: E5      		PUSH	HL		;SAVE PTR TO ERROR COMMAND CHAR
D71D: CDAED5  		CALL	CONOUT		;PRINT COMMAND CHAR
D720: E1      		POP	HL		;GET PTR
D721: 23      		INC	HL		;PT TO NEXT
D722: 18F3    		JR	ERR2		;CONTINUE
D724:         	ERR1:
D724: CD15D6  		CALL	PRINT		;PRINT '?'
D727: BF      		DEFB	'?'+80H
D728: CD5AD6  		CALL	SUBKIL		;TERMINATE ACTIVE $$$.SUB IF ANY
D72B: C3F8D4  		JP	RESTRT		;RESTART CPR
              	;
              	; CHECK TO SEE IF DE PTS TO DELIMITER; IF SO, RET W/ZERO FLAG SET
              	;
D72E:         	SDELM:
D72E: 1A      		LD	A,(DE)
D72F: B7      		OR	A		;0=DELIMITER
D730: C8      		RET	Z
D731: FE20    		CP	' '		;ERROR IF < <SP>
D733: 38DC    		JR	C,ERROR
D735: C8      		RET	Z			;<SP>=DELIMITER
D736: FE3D    		CP	'='		;'='=DELIMITER
D738: C8      		RET	Z
D739: FE5F    		CP	5FH		;UNDERSCORE=DELIMITER
D73B: C8      		RET	Z
D73C: FE2E    		CP	'.'		;'.'=DELIMITER
D73E: C8      		RET	Z
D73F: FE3A    		CP	':'		;':'=DELIMITER
D741: C8      		RET	Z
D742: FE3B    		CP	';'		;';'=DELIMITER
D744: C8      		RET	Z
D745: FE3C    		CP	'<'		;'<'=DELIMITER
D747: C8      		RET	Z
D748: FE3E    		CP	'>'		;'>'=DELIMITER
D74A: C9      		RET
              	;
              	; ADVANCE INPUT PTR TO FIRST NON-BLANK AND FALL THROUGH TO SBLANK
              	;
D74B:         	ADVAN:
D74B: ED5B59D4		LD	DE,(CIBPTR)
              	;
              	; SKIP STRING PTED TO BY DE (STRING ENDS IN 0) UNTIL END OF STRING
              	;   OR NON-BLANK ENCOUNTERED (BEGINNING OF TOKEN)
              	;
D74F:         	SBLANK:
D74F: 1A      		LD	A,(DE)
D750: B7      		OR	A
D751: C8      		RET	Z
D752: FE20    		CP	' '
D754: C0      		RET	NZ
D755: 13      		INC	DE
D756: 18F7    		JR	SBLANK
              	;
              	; ADD A TO HL (HL=HL+A)
              	;
D758:         	ADDAH:
D758: 85      		ADD	A,L
D759: 6F      		LD	L,A
D75A: D0      		RET	NC
D75B: 24      		INC	H
D75C: C9      		RET
              	;
              	; EXTRACT DECIMAL NUMBER FROM COMMAND LINE
              	;   RETURN WITH VALUE IN REG A;ALL REGISTERS MAY BE AFFECTED
              	;
D75D:         	NUMBER:
D75D: CD02D8  		CALL	SCANER		;PARSE NUMBER AND PLACE IN FCBFN
D760: 21A6D4  		LD	HL,FCBFN+10 	;PT TO END OF TOKEN FOR CONVERSION
D763: 060B    		LD	B,11		;11 CHARS MAX
              	;
              	; CHECK FOR SUFFIX FOR HEXADECIMAL NUMBER
              	;
D765:         	NUMS:
D765: 7E      		LD	A,(HL)		;GET CHARS FROM END, SEARCHING FOR SUFFIX
D766: 2B      		DEC	HL		;BACK UP
D767: FE20    		CP	' '		;SPACE?
D769: 2004    		JR	NZ,NUMS1	;CHECK FOR SUFFIX
D76B: 10F8    		DJNZ	NUMS		;COUNT DOWN
D76D: 1804    		JR	NUM0		;BY DEFAULT, PROCESS
D76F:         	NUMS1:
D76F: FE48    		CP	NUMBASE		;CHECK AGAINST BASE SWITCH FLAG
D771: 282B    		JR	Z,HNUM0
              	;
              	; PROCESS DECIMAL NUMBER
              	;
D773:         	NUM0:
D773: 219CD4  		LD	HL,FCBFN	;PT TO BEGINNING OF TOKEN
D776: 010011  		LD	BC,1100H	;C=ACCUMULATED VALUE, B=CHAR COUNT
              					; (C=0, B=11)
D779:         	NUM1:
D779: 7E      		LD	A,(HL)		;GET CHAR
D77A: FE20    		CP	' '		;DONE IF <SP>
D77C: 2818    		JR	Z,NUM2
D77E: 23      		INC	HL		;PT TO NEXT CHAR
D77F: D630    		SUB	'0'		;CONVERT TO BINARY (ASCII 0-9 TO BINARY)
D781: FE0A    		CP	10		;ERROR IF >= 10
D783: 3013    		JR	NC,NUMERR
D785: 57      		LD	D,A		;DIGIT IN D
D786: 79      		LD	A,C		;NEW VALUE = OLD VALUE * 10
D787: 07      		RLCA
D788: 07      		RLCA
D789: 07      		RLCA
D78A: 81      		ADD	A,C		;CHECK FOR RANGE ERROR
D78B: 380B    		JR	C,NUMERR
D78D: 81      		ADD	A,C		;CHECK FOR RANGE ERROR
D78E: 3808    		JR	C,NUMERR
D790: 82      		ADD	A,D		;NEW VALUE = OLD VALUE * 10 + DIGIT
D791: 3805    		JR	C,NUMERR	;CHECK FOR RANGE ERROR
D793: 4F      		LD	C,A		;SET NEW VALUE
D794: 10E3    		DJNZ	NUM1		;COUNT DOWN
              	;
              	; RETURN FROM NUMBER
              	;
D796:         	NUM2:
D796: 79      		LD	A,C		;GET ACCUMULATED VALUE
D797: C9      		RET
              	;
              	; NUMBER ERROR ROUTINE FOR SPACE CONSERVATION
              	;
D798:         	NUMERR:
D798: C311D7  		JP	ERROR		;USE ERROR ROUTINE - THIS IS RELATIVE PT
              	;
              	; EXTRACT HEXADECIMAL NUMBER FROM COMMAND LINE
              	;   RETURN WITH VALUE IN REG A; ALL REGISTERS MAY BE AFFECTED
              	;
D79B:         	HEXNUM:
D79B: CD02D8  		CALL	SCANER		;PARSE NUMBER AND PLACE IN FCBFN
D79E:         	HNUM0:
D79E: 219CD4  		LD	HL,FCBFN	;PT TO TOKEN FOR CONVERSION
D7A1: 110000  		LD	DE,0		;DE=ACCUMULATED VALUE
D7A4: 060B    		LD	B,11		;B=CHAR COUNT
D7A6:         	HNUM1:
D7A6: 7E      		LD	A,(HL)		;GET CHAR
D7A7: FE20    		CP	' '		;DONE?
D7A9: 282D    		JR	Z,HNUM3		;RETURN IF SO
D7AB: FE48    		CP	NUMBASE		;DONE IF NUMBASE SUFFIX
D7AD: 2829    		JR	Z,HNUM3
D7AF: D630    		SUB	'0'		;CONVERT TO BINARY
D7B1: 38E5    		JR	C,NUMERR	;RETURN AND DONE IF ERROR
D7B3: FE0A    		CP	10		;0-9?
D7B5: 3806    		JR	C,HNUM2
D7B7: D607    		SUB	7		;A-F?
D7B9: FE10    		CP	10H		;ERROR?
D7BB: 30DB    		JR	NC,NUMERR
D7BD:         	HNUM2:
D7BD: 23      		INC	HL		;PT TO NEXT CHAR
D7BE: 4F      		LD	C,A		;DIGIT IN C
D7BF: 7A      		LD	A,D		;GET ACCUMULATED VALUE
D7C0: 07      		RLCA			;EXCHANGE NYBBLES
D7C1: 07      		RLCA
D7C2: 07      		RLCA
D7C3: 07      		RLCA
D7C4: E6F0    		AND	0F0H		;MASK OUT LOW NYBBLE
D7C6: 57      		LD	D,A
D7C7: 7B      		LD	A,E		;SWITCH LOW-ORDER NYBBLES
D7C8: 07      		RLCA
D7C9: 07      		RLCA
D7CA: 07      		RLCA
D7CB: 07      		RLCA
D7CC: 5F      		LD	E,A		;HIGH NYBBLE OF E=NEW HIGH OF E,
              					;  LOW NYBBLE OF E=NEW LOW OF D
D7CD: E60F    		AND	0FH		;GET NEW LOW OF D
D7CF: B2      		OR	D		;MASK IN HIGH OF D
D7D0: 57      		LD	D,A		;NEW HIGH BYTE IN D
D7D1: 7B      		LD	A,E
D7D2: E6F0    		AND	0F0H		;MASK OUT LOW OF E
D7D4: B1      		OR	C		;MASK IN NEW LOW
D7D5: 5F      		LD	E,A		;NEW LOW BYTE IN E
D7D6: 10CE    		DJNZ	HNUM1		;COUNT DOWN
              	;
              	; RETURN FROM HEXNUM
              	;
D7D8:         	HNUM3:
D7D8: EB      		EX	DE,HL		;RETURNED VALUE IN HL
D7D9: 7D      		LD	A,L		;LOW-ORDER BYTE IN A
D7DA: C9      		RET
              	;
              	; PT TO DIRECTORY ENTRY IN TBUFF WHOSE OFFSET IS SPECIFIED BY A AND C
              	;
D7DB:         	DIRPTR:
D7DB: 218000  		LD	HL,TBUFF 	;PT TO TEMP BUFFER
D7DE: 81      		ADD	A,C		;PT TO 1ST BYTE OF DIR ENTRY
D7DF: CD58D7  		CALL	ADDAH		;PT TO DESIRED BYTE IN DIR ENTRY
D7E2: 7E      		LD	A,(HL)		;GET DESIRED BYTE
D7E3: C9      		RET
              	;
              	; CHECK FOR SPECIFIED DRIVE AND LOG IT IN IF NOT DEFAULT
              	;
D7E4:         	SLOGIN:
D7E4: AF      		XOR	A		;SET FCBDN FOR DEFAULT DRIVE
D7E5: 329BD4  		LD	(FCBDN),A
D7E8: CDF8D7  		CALL	COMLOG		;CHECK DRIVE
D7EB: C8      		RET	Z
D7EC: 1807    		JR	DLOG5		;DO LOGIN OTHERWISE
              	;
              	; CHECK FOR SPECIFIED DRIVE AND LOG IN DEFAULT DRIVE IF SPECIFIED<>DEFAULT
              	;
D7EE:         	DLOGIN:
D7EE: CDF8D7  		CALL	COMLOG		;CHECK DRIVE
D7F1: C8      		RET	Z		;ABORT IF SAME
D7F2: 3A84D6  		LD	A,(TDRIVE)	;LOG IN DEFAULT DRIVE
              	;
D7F5: C338D6  	DLOG5:	JP	LOGIN
              	;
              	; ROUTINE COMMON TO BOTH LOGIN ROUTINES; ON EXIT, Z SET MEANS ABORT
              	;
D7F8:         	COMLOG:
D7F9:         	TEMPDR	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
D7F8: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS TEMPDR
D7FA: B7      		OR	A		;0=NO
D7FB: C8      		RET	Z
D7FC: 3D      		DEC	A		;COMPARE IT AGAINST DEFAULT
D7FD: 2184D6  		LD	HL,TDRIVE
D800: BE      		CP	(HL)
D801: C9      		RET			;ABORT IF SAME
              	;
              	; EXTRACT TOKEN FROM COMMAND LINE AND PLACE IT INTO FCBDN;
              	;   FORMAT FCBDN FCB IF TOKEN RESEMBLES FILE NAME AND TYPE (FILENAME.TYP);
              	;   ON INPUT, CIBPTR PTS TO CHAR AT WHICH TO START SCAN;
              	;   ON OUTPUT, CIBPTR PTS TO CHAR AT WHICH TO CONTINUE AND ZERO FLAG IS RESET
              	;     IF '?' IS IN TOKEN
              	;
              	; ENTRY POINTS:
              	;	SCANER - LOAD TOKEN INTO FIRST FCB
              	;	SCANX - LOAD TOKEN INTO FCB PTED TO BY HL
              	;
D802:         	SCANER:
D802: 219BD4  		LD	HL,FCBDN 	;POINT TO FCBDN
D805:         	SCANX:
D805: AF      		XOR	A		;SET TEMPORRY DRIVE NUMBER TO DEFAULT
D806: 32F9D7  		LD	(TEMPDR),A
D809: CD4BD7  		CALL	ADVAN		;SKIP TO NON-BLANK OR END OF LINE
D80C: ED535BD4		LD	(CIPTR),DE	;SET PTR TO NON-BLANK OR END OF LINE
D810: 1A      		LD	A,(DE)		;END OF LINE?
D811: B7      		OR	A		;0=YES
D812: 280A    		JR	Z,SCAN2
D814: DE40    		SBC	A,'A'-1		;CONVERT POSSIBLE DRIVE SPEC TO NUMBER
D816: 47      		LD	B,A		;STORE NUMBER (A:=0, B:=1, ETC) IN B
D817: 13      		INC	DE		;PT TO NEXT CHAR
D818: 1A      		LD	A,(DE)		;SEE IF IT IS A COLON (:)
D819: FE3A    		CP	':'
D81B: 2807    		JR	Z,SCAN3		;YES, WE HAVE A DRIVE SPEC
D81D: 1B      		DEC	DE		;NO, BACK UP PTR TO FIRST NON-BLANK CHAR
D81E:         	SCAN2:
D81E: 3A84D6  		LD	A,(TDRIVE)	;SET 1ST BYTE OF FCBDN AS DEFAULT DRIVE
D821: 77      		LD	(HL),A
D822: 1806    		JR	SCAN4
D824:         	SCAN3:
D824: 78      		LD	A,B		;WE HAVE A DRIVE SPEC
D825: 32F9D7  		LD	(TEMPDR),A	;SET TEMPORRY DRIVE
D828: 70      		LD	(HL),B		;SET 1ST BYTE OF FCBDN AS SPECIFIED DRIVE
D829: 13      		INC	DE		;PT TO BYTE AFTER ':'
              	;
              	; EXTRACT FILENAME FROM POSSIBLE FILENAME.TYP
              	;
D82A:         	SCAN4:
D82A: AF      		XOR	A		;A=0
D82B: 32BED4  		LD	(QMCNT),A	;INIT COUNT OF NUMBER OF QUESTION MARKS IN FCB
D82E: 0608    		LD	B,8		;MAX OF 8 CHARS IN FILE NAME
D830: CD52D8  		CALL	SCANF		;FILL FCB FILE NAME
              	;
              	; EXTRACT FILE TYPE FROM POSSIBLE FILENAME.TYP
              	;
D833: 0603    		LD	B,3		;PREPARE TO EXTRACT TYPE
D835: FE2E    		CP	'.'		;IF (DE) DELIMITER IS A '.', WE HAVE A TYPE
D837: 2006    		JR	NZ,SCAN15	;FILL FILE TYPE BYTES WITH <SP>
D839: 13      		INC	DE		;PT TO CHAR IN COMMAND LINE AFTER '.'
D83A: CD52D8  		CALL	SCANF		;FILL FCB FILE TYPE
D83D: 1803    		JR	SCAN16		;SKIP TO NEXT PROCESSING
D83F:         	SCAN15:
D83F: CD73D8  		CALL	SCANF4		;SPACE FILL
              	;
              	; FILL IN EX, S1, S2, AND RC WITH ZEROES
              	;
D842:         	SCAN16:
D842: 0604    		LD	B,4		;4 BYTES
D844:         	SCAN17:
D844: 23      		INC	HL		;PT TO NEXT BYTE IN FCBDN
D845: 3600    		LD	(HL),0
D847: 10FB    		DJNZ	SCAN17
              	;
              	; SCAN COMPLETE -- DE PTS TO DELIMITER BYTE AFTER TOKEN
              	;
D849: ED5359D4		LD	(CIBPTR),DE
              	;
              	; SET ZERO FLAG TO INDICATE PRESENCE OF '?' IN FILENAME.TYP
              	;
D84D: 3ABED4  		LD	A,(QMCNT)	;GET NUMBER OF QUESTION MARKS
D850: B7      		OR	A		;SET ZERO FLAG TO INDICATE ANY '?'
D851: C9      		RET
              	;
              	;  SCANF -- SCAN TOKEN PTED TO BY DE FOR A MAX OF B BYTES; PLACE IT INTO
              	;    FILE NAME FIELD PTED TO BY HL; EXPAND AND INTERPRET WILD CARDS OF
              	;    '*' AND '?'; ON EXIT, DE PTS TO TERMINATING DELIMITER
              	;
D852:         	SCANF:
D852: CD2ED7  		CALL	SDELM		;DONE IF DELIMITER ENCOUNTERED - <SP> FILL
D855: 281C    		JR	Z,SCANF4
D857: 23      		INC	HL		;PT TO NEXT BYTE IN FCBDN
D858: FE2A    		CP	'*'		;IS (DE) A WILD CARD?
D85A: 2007    		JR	NZ,SCANF1	;CONTINUE IF NOT
D85C: 363F    		LD	(HL),'?'	;PLACE '?' IN FCBDN AND DON'T ADVANCE DE IF SO
D85E: CD79D8  		CALL	SCQ		;SCANNER COUNT QUESTION MARKS
D861: 1807    		JR	SCANF2
D863:         	SCANF1:
D863: 77      		LD	(HL),A		;STORE FILENAME CHAR IN FCBDN
D864: 13      		INC	DE		;PT TO NEXT CHAR IN COMMAND LINE
D865: FE3F    		CP	'?'		;CHECK FOR QUESTION MARK (WILD)
D867: CC79D8  		CALL	Z,SCQ		;SCANNER COUNT QUESTION MARKS
D86A:         	SCANF2:
D86A: 10E6    		DJNZ	SCANF		;DECREMENT CHAR COUNT UNTIL 8 ELAPSED
D86C:         	SCANF3:
D86C: CD2ED7  		CALL	SDELM		;8 CHARS OR MORE - SKIP UNTIL DELIMITER
D86F: C8      		RET	Z		;ZERO FLAG SET IF DELIMITER FOUND
D870: 13      		INC	DE		;PT TO NEXT CHAR IN COMMAND LINE
D871: 18F9    		JR	SCANF3
              	;
              	;  FILL MEMORY POINTED TO BY HL WITH SPACES FOR B BYTES
              	;
D873:         	SCANF4:
D873: 23      		INC	HL		;PT TO NEXT BYTE IN FCBDN
D874: 3620    		LD	(HL),' '	;FILL FILENAME PART WITH <SP>
D876: 10FB    		DJNZ	SCANF4
D878: C9      		RET
              	;
              	;  INCREMENT QUESTION MARK COUNT FOR SCANNER
              	;    THIS ROUTINE INCREMENTS THE COUNT OF THE NUMBER OF QUESTION MARKS IN
              	;    THE CURRENT FCB ENTRY
              	;
D879:         	SCQ:
D879: 3ABED4  		LD	A,(QMCNT)	;GET COUNT
D87C: 3C      		INC	A		;INCREMENT
D87D: 32BED4  		LD	(QMCNT),A	;PUT COUNT
D880: C9      		RET
              	;
              	; CMDTBL (COMMAND TABLE) SCANNER
              	;   ON RETURN, HL PTS TO ADDRESS OF COMMAND IF CPR-RESIDENT
              	;   ON RETURN, ZERO FLAG SET MEANS CPR-RESIDENT COMMAND
              	;
D881:         	CMDSER:
D881: 2165D5  		LD	HL,CMDTBL	;PT TO COMMAND TABLE
              	;
              		IF	SECURE
              		LD	C,NRCMDS
              		LD	A,(WHEEL)	;SEE IF NON-RESTRCTED
              		CP	RESTRCT
              		JR	Z,CMS1		;PASS IF RESTRCTED
              		ENDIF			;SECURE
              	;
D884: 0E0B    		LD	C,NCMNDS	;SET COMMAND COUNTER
D886:         	CMS1:
D886: 119CD4  		LD	DE,FCBFN 	;PT TO STORED COMMAND NAME
D889: 0604    		LD	B,NCHARS	;NUMBER OF CHARS/COMMAND (8 MAX)
D88B:         	CMS2:
D88B: 1A      		LD	A,(DE)		;COMPARE AGAINST TABLE ENTRY
D88C: BE      		CP	(HL)
D88D: 200A    		JR	NZ,CMS3		;NO MATCH
D88F: 13      		INC	DE		;PT TO NEXT CHAR
D890: 23      		INC	HL
D891: 10F8    		DJNZ	CMS2		;COUNT DOWN
D893: 1A      		LD	A,(DE)		;NEXT CHAR IN INPUT COMMAND MUST BE <SP>
D894: FE20    		CP	' '
D896: 2004    		JR	NZ,CMS4
D898: C9      		RET			;COMMAND IS CPR-RESIDENT (ZERO FLAG SET)
D899:         	CMS3:
D899: 23      		INC	HL		;SKIP TO NEXT COMMAND TABLE ENTRY
D89A: 10FD    		DJNZ	CMS3
D89C:         	CMS4:
D89C: 23      		INC	HL		;SKIP ADDRESS
D89D: 23      		INC	HL
D89E: 0D      		DEC	C		;DECREMENT TABLE ENTRY NUMBER
D89F: 20E5    		JR	NZ,CMS1
D8A1: 0C      		INC	C		;CLEAR ZERO FLAG
D8A2: C9      		RET			;COMMAND IS DISK-RESIDENT (ZERO FLAG CLEAR)
              	;
              	;**** Section 5 ****
              	; CPR-Resident Commands
              	;
              	;
              	;Section 5A
              	;Command: DIR
              	;Function:  To display a directory of the files on disk
              	;Forms:
              	;	DIR <afn>	Displays the DIR files
              	;	DIR <afn> S	Displays the SYS files
              	;	DIR <afn> A	Display both DIR and SYS files
              	;
              		IF	CPRDIR
              	;
D8A3:         	DIR:
D8A3: 3E80    		LD	A,80H		;SET SYSTEM BIT EXAMINATION
D8A5: F5      		PUSH	AF
D8A6: CD02D8  		CALL	SCANER		;EXTRACT POSSIBLE D:FILENAME.TYP TOKEN
D8A9: CDE4D7  		CALL	SLOGIN		;LOG IN DRIVE IF NECESSARY
D8AC: 219CD4  		LD	HL,FCBFN 	;MAKE FCB WILD (ALL '?') IF NO FILENAME.TYP
D8AF: 7E      		LD	A,(HL)		;GET FIRST CHAR OF FILENAME.TYP
D8B0: FE20    		CP	' '		;IF <SP>, ALL WILD
D8B2: CC4CD9  		CALL	Z,FILLQ
D8B5: CD4BD7  		CALL	ADVAN		;LOOK AT NEXT INPUT CHAR
D8B8: 0600    		LD	B,0		;SYS TOKEN DEFAULT
D8BA: 2816    		JR	Z,DIR2		;JUMP; THERE ISN'T ONE
D8BC: FE41    		CP	SYSFLG		;SYSTEM FLAG SPECIFIER?
D8BE: 2806    		JR	Z,GOTSYS	;GOT SYSTEM SPECIFIER
D8C0: FE53    		CP	SOFLG		;SYS ONLY?
D8C2: 200E    		JR	NZ,DIR2
D8C4: 0680    		LD	B,80H		;FLAG SYS ONLY
D8C6:         	GOTSYS:
D8C6: 13      		INC	DE
D8C7: ED5359D4		LD	(CIBPTR),DE
D8CB: FE53    		CP	SOFLG		;SYS ONLY SPEC?
D8CD: 2803    		JR	Z,DIR2		;THEN LEAVE BIT SPEC UNCHAGNED
D8CF: F1      		POP	AF		;GET FLAG
D8D0: AF      		XOR	A		;SET NO SYSTEM BIT EXAMINATION
D8D1: F5      		PUSH	AF 
D8D2:         	DIR2:
D8D2: F1      		POP	AF		;GET FLAG
D8D3:         	DIR2A:
              					;DROP INTO DIRPR TO PRINT DIRECTORY
              					; THEN RESTART CPR
              		ENDIF			;CPRDIR
              	;
              	; DIRECTORY PRINT ROUTINE; ON ENTRY, MSB OF A IS 1 (80H) IF SYSTEM FILES
              	; EXCLUDED. THIS ROUTINE IS ALSO USED BY ERA.
              	;
D8D3:         	DIRPR:
D8D3: 57      		LD	D,A		;STORE SYSTEM FLAG IN D
D8D4: 1E00    		LD	E,0		;SET COLUMN COUNTER TO ZERO
D8D6: D5      		PUSH	DE		;SAVE COLUMN COUNTER (E) AND SYSTEM FLAG (D)
D8D7: 78      		LD	A,B		;SYS ONLY SPECIFIER
D8D8: 32F3D8  		LD	(SYSTST),A
D8DB: CD4FD6  		CALL	SEARF		;SEARCH FOR SPECIFIED FILE (FIRST OCCURRANCE)
D8DE: CC5AD5  		CALL	Z,PRNNF		;PRINT NO FILE MSG;REG A NOT CHANGED
              	;
              	; ENTRY SELECTION LOOP; ON ENTRY, A=OFFSET FROM SEARF OR SEARN
              	;
D8E1:         	DIR3:
D8E1: 2867    		JR	Z,DIR11		;DONE IF ZERO FLAG SET
D8E3: 3D      		DEC	A		;ADJUST TO RETURNED VALUE
D8E4: 0F      		RRCA			;CONVERT NUMBER TO OFFSET INTO TBUFF
D8E5: 0F      		RRCA
D8E6: 0F      		RRCA
D8E7: E660    		AND	60H
D8E9: 4F      		LD	C,A		;OFFSET INTO TBUFF IN C (C=OFFSET TO ENTRY)
D8EA: 3E0A    		LD	A,10		;ADD 10 TO PT TO SYSTEM FILE ATTRIBUTE BIT
D8EC: CDDBD7  		CALL	DIRPTR
D8EF: D1      		POP	DE		;GET SYSTEM BIT MASK FROM D
D8F0: D5      		PUSH	DE
D8F1: A2      		AND	D		;MASK FOR SYSTEM BIT
D8F3:         	SYSTST	EQU	$+1		;POINTER TO IN-THE-CODE BUFFER SYSTST
D8F2: FE00    		CP	0
D8F4: 204A    		JR	NZ,DIR10
D8F6: D1      		POP	DE		;GET ENTRY COUNT (=<CR> COUNTER)
D8F7: 7B      		LD	A,E		;ADD 1 TO IT
D8F8: 1C      		INC	E
D8F9: D5      		PUSH	DE		;SAVE IT
              	;
              		IF	TWOCOL
              		AND	01H		;OUTPUT <CRLF> IF 2 ENTRIES PRINTED IN LINE
              		ENDIF			;TWOCOL
              	;
              		IF	TWOCOL
              	        ELSE
D8FB:         	TWOPOK	EQU	$+1		;FOR APPLE PATCHING
D8FA: E603    		AND	03H		;OUTPUT <CRLF> IF 4 ENTRIES PRINTED IN LINE
              		ENDIF			;NOT TWOCOL
              	;
D8FC: F5      		PUSH	AF
D8FD: 2005    		JR	NZ,DIR4
D8FF: CDA7D5  		CALL	CRLF		;NEW LINE
D902: 1808    		JR	DIR5
D904:         	DIR4:
D904: CD15D6  		CALL	PRINT
              	;
              		IF	WIDE
D907: 2020    		DEFM	'  '		;2 SPACES
D909: 7C      		DEFB	FENCE		;THEN FENCE CHAR
D90A: 20A0    		DEFB	' ',' '+80H	;THEN 2 MORE SPACES
              	;	ENDIF
              	;
              	        ELSE
              		DEFB	' '		;SPACE
              		DEFB	FENCE		;THEN FENCE CHAR
              		DEFB	' '+80H		;THEN SPACE
              		ENDIF
              	;
D90C:         	DIR5:
D90C: 0601    		LD	B,01H		;PT TO 1ST BYTE OF FILE NAME
D90E:         	DIR6:
D90E: 78      		LD	A,B		;A=OFFSET
D90F: CDDBD7  		CALL	DIRPTR		;HL NOW PTS TO 1ST BYTE OF FILE NAME
D912: E67F    		AND	7FH		;MASK OUT MSB
D914: FE20    		CP	' '		;NO FILE NAME?
D916: 2013    		JR	NZ,DIR8		;PRINT FILE NAME IF PRESENT
D918: F1      		POP	AF
D919: F5      		PUSH	AF
D91A: FE03    		CP	03H
D91C: 200B    		JR	NZ,DIR7
D91E: 3E09    		LD	A,09H		;PT TO 1ST BYTE OF FILE TYPE
D920: CDDBD7  		CALL	DIRPTR		;HL NOW PTS TO 1ST BYTE OF FILE TYPE
D923: E67F    		AND	7FH		;MASK OUT MSB
D925: FE20    		CP	' '		;NO FILE TYPE?
D927: 2816    		JR	Z,DIR9		;CONTINUE IF SO
D929:         	DIR7:
D929: 3E20    		LD	A,' '		;OUTPUT <SP>
D92B:         	DIR8:
D92B: CDAED5  		CALL	CONOUT		;PRINT CHAR
D92E: 04      		INC	B		;INCR CHAR COUNT
D92F: 78      		LD	A,B
D930: FE0C    		CP	12		;END OF FILENAME.TYP?
D932: 300B    		JR	NC,DIR9		;CONTINUE IF SO
D934: FE09    		CP	09H		;END IF FILENAME ONLY?
D936: 20D6    		JR	NZ,DIR6		;PRINT TYP IF SO
D938: 3E2E    		LD	A,'.'		;PRINT DOT BETWEEN FILE NAME AND TYPE
D93A: CDAED5  		CALL	CONOUT
D93D: 18CF    		JR	DIR6
D93F:         	DIR9:
D93F: F1      		POP	AF
D940:         	DIR10:
D940: CD00D7  		CALL	BREAK		;CHECK FOR ABORT
D943: 2005    		JR	NZ,DIR11
D945: CD56D6  		CALL	SEARN		;SEARCH FOR NEXT FILE
D948: 1897    		JR	DIR3		;CONTINUE
D94A:         	DIR11:
D94A: D1      		POP	DE		;RESTORE STACK
D94B: C9      		RET
              	;
              	; FILL FCB @HL WITH '?'
              	;
D94C:         	FILLQ:
D94C: 060B    		LD	B,11		;NUMBER OF CHARS IN FN & FT
D94E:         	FQLP:
D94E: 363F    		LD	(HL),'?'	;STORE '?'
D950: 23      		INC	HL
D951: 10FB    		DJNZ	FQLP
D953: C9      		RET
              	;
              	;Section 5B
              	;Command: ERA
              	;Function:  Erase files
              	;Forms:
              	;	ERA <afn>	Erase Specified files and print their names
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
D954:         	ERA:
D954: CD02D8  		CALL	SCANER		;PARSE FILE SPECIFICATION
D957: FE0B    		CP	11		;ALL WILD (ALL FILES = 11 '?')?
D959: 2012    		JR	NZ,ERA1		;IF NOT, THEN DO ERASES
D95B: CD10D6  		CALL	PRINTC
D95E: 416C6C  		DEFM	'All'
D961: BF      		DEFB	'?'+80H
D962: CDBBD5  		CALL	CONIN		;GET REPLY
D965: FE59    		CP	'Y'		;YES?
D967:         	ERARJ:
D967: C2F8D4  		JP	NZ,RESTRT	;RESTART CPR IF NOT
D96A: CDA7D5  		CALL	CRLF		;NEW LINE
D96D:         	ERA1:
D96D: CDE4D7  		CALL	SLOGIN		;LOG IN SELECTED DISK IF ANY
D970: AF      		XOR	A		;PRINT ALL FILES (EXAMINE SYSTEM BIT)
D971: 47      		LD	B,A		;NO SYS-ONLY OPT TO DIRPR
D972: CDD3D8  		CALL	DIRPR		;PRINT DIRECTORY OF ERASED FILES
              	;
              		IF	EPRMPT
              	;
              	;  QUERY USER AFTER FILES ARE SEEN, AND GIVE ONE LAST CHANCE TO BACK OUT
              	;
              		LD	A,E		;HOW MANY FILES DISPLAYED?
              		OR	A
              		JP	Z,RESTRT	;IF NONE, DON'T ASK OR DELETE
              		CALL	PRINTC		;PROMPT
              		DEFM	'Ok'
              		DEFB	'?'+80H
              		CALL	CONIN		;GET REPLY FOLDED
              		CP	'Y'		;YES?
              		JR	NZ,ERARJ	;GET OUT IF NOT
              		ENDIF			;EPRMPT
              	;
D975: 119BD4  		LD	DE,FCBDN 	;DELETE FILE(S) SPECIFIED
D978: C365D6  		JP	DELETE		;RESTART CPR AFTER DELETE
              	;
              		ENDIF			;RAS
              	;
              	;Section 5C
              	;Command: LIST
              	;Function:  Print out specified file on the LST: Device
              	;Forms:
              	;	LIST <ufn>	Print file (NO Paging)
              	;
              		IF	CPRLST
D97B:         	LIST:
D97B: 3EFF    		LD	A,0FFH		;TURN ON PRINTER FLAG
D97D: 1801    		JR	TYPE0
              		ENDIF			;CPRLST
              	;
              	;Section 5D
              	;Command: TYPE
              	;Function:  Print out specified file on the CON: Device
              	;Forms:
              	;	TYPE <ufn>	Print file
              	;	TYPE <ufn> P	Print file with paging flag	
              	;
              		IF	CPRTYP
D97F:         	TYPE:
              		ENDIF			;CPRTYP
              	;
              		IF	CPRTYP AND CPRLST
D97F: AF      		XOR	A		;TURN OFF PRINTER FLAG
              	;
              	; ENTRY POINT FOR CPR LIST FUNCTION (LIST)
              	;
D980:         	TYPE0:
D980: 32D8D5  		LD	(PRFLG),A	;SET FLAG
              		ENDIF			;CPRTYP AND CPRLST
              	;
              		IF	CPRTYP
D983: CD02D8  		CALL	SCANER		;EXTRACT FILENAME.TYP TOKEN
D986: C211D7  		JP	NZ,ERROR	;ERROR IF ANY QUESTION MARKS
D989: CD4BD7  		CALL	ADVAN		;GET PGDFLG IF IT'S THERE
D98C: 32F5D5  		LD	(PGFLG),A	;SAVE IT AS A FLAG
D98F: 2805    		JR	Z,NOSLAS	;JUMP IF INPUT ENDED
D991: 13      		INC	DE		;PUT NEW BUF POINTER
D992: EB      		EX	DE,HL
D993: 2259D4  		LD	(CIBPTR),HL
D996:         	NOSLAS:
D996: CDE4D7  		CALL	SLOGIN		;LOG IN SELECTED DISK IF ANY
D999: CD3DD6  		CALL	OPENF		;OPEN SELECTED FILE
D99C: CA09DA  		JP	Z,TYPE4		;ABORT IF ERROR
D99F: CDA7D5  		CALL	CRLF		;NEW LINE
D9A2: 3E17    		LD	A,NLINES-1	;SET LINE COUNT
D9A4: 32BCD4  		LD	(PAGCNT),A
D9A7: 21BDD4  		LD	HL,CHRCNT	;SET CHAR POSITION/COUNT
D9AA: 36FF    		LD	(HL),0FFH	;EMPTY LINE
D9AC: 0600    		LD	B,0		;SET TAB CHAR COUNTER
D9AE:         	TYPE1:
D9AE: 21BDD4  		LD	HL,CHRCNT	;PT TO CHAR POSITION/COUNT
D9B1: 7E      		LD	A,(HL)		;END OF BUFFER?
D9B2: FE80    		CP	80H
D9B4: 3809    		JR	C,TYPE2
D9B6: E5      		PUSH	HL		;READ NEXT BLOCK
D9B7: CD04D6  		CALL	READF
D9BA: E1      		POP	HL
D9BB: 204A    		JR	NZ,TYPE3	;ERROR?
D9BD: AF      		XOR	A		;RESET COUNT
D9BE: 77      		LD	(HL),A
D9BF:         	TYPE2:
D9BF: 34      		INC	(HL)		;INCREMENT CHAR COUNT
D9C0: 218000  		LD	HL,TBUFF 	;PT TO BUFFER
D9C3: CD58D7  		CALL	ADDAH		;COMPUTE ADDRESS OF NEXT CHAR FROM OFFSET
D9C6: 7E      		LD	A,(HL)		;GET NEXT CHAR
D9C7: E67F    		AND	7FH		;MASK OUT MSB
D9C9: FE1A    		CP	1AH		;END OF FILE (^Z)?
D9CB: C8      		RET	Z		;RESTART CPR IF SO
              	;
              	; OUTPUT CHAR TO CON: OR LST: DEVICE WITH TABULATION
              	;
              		IF	WSTYPE		;WORDSTAR HYPHEN CHECK
D9CC: FE1F    		CP	1FH		;IS CHAR WORDSTAR EOL HYPHEN?
D9CE: 2002    		JR	NZ,NOHYPH	;PASS IF NOT
D9D0: 3E2D    		LD	A,'-'		;YES, MAKE IT A REAL HYPHEN
D9D2:         	NOHYPH:
              		ENDIF			;WSTYPE
              	;
D9D2: FE20    		CP	' '		;IS CHAR CONTROL CODE?
D9D4: 3023    		JR	NC,PRT		;GO BOP CHAR COUNT AND PRINT IF NOT
D9D6: FE0D    		CP	CR		;IS CHAR A CR?
D9D8: 281D    		JR	Z,YESCR		;IF SO, GO ZERO B THEN PRINT
D9DA: FE0C    		CP	FFEED		;FORM FEED?
D9DC: 2819    		JR	Z,YESCR		;MANY PRINTERS RETURN CARRIAGE ON THIS
D9DE: FE0A    		CP	LF		;LINE FEED?
D9E0: 2818    		JR	Z,NOBOP		;PRINT, BUT DON'T BOP B
D9E2: FE07    		CP	BEL		;BELL?
D9E4: 2814    		JR	Z,NOBOP		;GO RING BUT DON'T BOP B
D9E6: FE09    		CP	TAB		;TAB?
D9E8: 2013    		JR	NZ,TYPE2L	;IF NOT, NO OTHER CHOICES, TOSS CONTROL
D9EA:         	LTAB:
D9EA: 3E20    		LD	A,' '		;<SP>
D9EC: CDD6D5  		CALL	LCOUT
D9EF: 04      		INC	B		;INCR POS COUNT
D9F0: 78      		LD	A,B
D9F1: E607    		AND	7
D9F3: 20F5    		JR	NZ,LTAB
D9F5: 1806    		JR	TYPE2L
              	;
D9F7: 06FF    	YESCR:	LD	B,0FFH		;COMBINE WITH INC BELOW TO GET ZERO
              	;
D9F9: 04      	PRT:	INC	B		;INCREMENT CHAR COUNT
D9FA: CDD6D5  	NOBOP:	CALL	LCOUT		;PRINT IT
              	;
              	; CONTINUE PROCESSING
              	;
              	;
D9FD:         	TYPE2L:
D9FD: CD00D7  		CALL	BREAK		;CHECK FOR ABORT
DA00: 28AC    		JR	Z,TYPE1		;CONTINUE IF NO CHAR
DA02: FE03    		CP	'C'-'@' 	;^C?
DA04: C8      		RET	Z		;RESTART IF SO
DA05: 18A7    		JR	TYPE1
DA07:         	TYPE3:
DA07: 3D      		DEC	A		;NO ERROR?
DA08: C8      		RET	Z		;RESTART CPR
DA09:         	TYPE4:
DA09: C3F6DB  		JP	ERRLOG
              		ENDIF			;CPRTYP
              	;
              	;Section 5E
              	;Command: SAVE
              	;Function:  To save the contents of the TPA onto disk as a file
              	;Forms:
              	;	SAVE <Number of Pages> <ufn>
              	;				Save specified number of pages (start at 100H)
              	;				from TPA into specified file; <Number of
              	;				Pages> is in DEC
              	;	SAVE <Number of Sectors> <ufn> S
              	;				Like SAVE above, but numeric argument specifies
              	;				number of sectors rather than pages
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DA0C:         	SAVE:
DA0C: CD5DD7  		CALL	NUMBER		;EXTRACT NUMBER FROM COMMAND LINE
DA0F: 6F      		LD	L,A		;HL=PAGE COUNT
DA10: 2600    		LD	H,0
DA12: E5      		PUSH	HL		;SAVE PAGE COUNT
DA13: CD62DA  		CALL	EXTEST		;TEST FOR EXISTENCE OF FILE AND ABORT IF SO
DA16: 0E16    		LD	C,16H		;BDOS MAKE FILE
DA18: CD46D6  		CALL	GRBDOS
DA1B: E1      		POP	HL		;GET PAGE COUNT
DA1C: 2841    		JR	Z,SAVE3		;ERROR?
DA1E: AF      		XOR	A		;SET RECORD COUNT FIELD OF NEW FILE'S FCB
DA1F: 32BBD4  		LD	(FCBCR),A
DA22: CD4BD7  		CALL	ADVAN		;LOOK FOR 'S' FOR SECTOR OPTION
DA25: 13      		INC	DE		;PT TO AFTER 'S' TOKEN
DA26: FE53    		CP	SECTFLG
DA28: 2802    		JR	Z,SAVE0
DA2A: 1B      		DEC	DE		;NO 'S' TOKEN, SO BACK UP
DA2B: 29      		ADD	HL,HL		;DOUBLE IT FOR HL=SECTOR (128 BYTES) COUNT
DA2C:         	SAVE0:
DA2C: ED5359D4		LD	(CIBPTR),DE	;SET PTR TO BAD TOKEN OR AFTER GOOD TOKEN
DA30: 110001  		LD	DE,TPA		;PT TO START OF SAVE AREA (TPA)
DA33:         	SAVE1:
DA33: 7C      		LD	A,H		;DONE WITH SAVE?
DA34: B5      		OR	L		;HL=0 IF SO
DA35: 2818    		JR	Z,SAVE2
DA37: 2B      		DEC	HL		;COUNT DOWN ON SECTORS
DA38: E5      		PUSH	HL		;SAVE PTR TO BLOCK TO SAVE
DA39: 218000  		LD	HL,128		;128 BYTES PER SECTOR
DA3C: 19      		ADD	HL,DE		;PT TO NEXT SECTOR
DA3D: E5      		PUSH	HL		;SAVE ON STACK
DA3E: CD2FD6  		CALL	DMASET		;SET DMA ADDRESS FOR WRITE (ADDRESS IN DE)
DA41: 119BD4  		LD	DE,FCBDN 	;WRITE SECTOR
DA44: 0E15    		LD	C,15H		;BDOS WRITE SECTOR
DA46: CD09D6  		CALL	BDOSB		;SAVE BC
DA49: D1      		POP	DE		;GET PTR TO NEXT SECTOR IN DE
DA4A: E1      		POP	HL		;GET SECTOR COUNT
DA4B: 28E6    		JR	Z,SAVE1		;CONTINUE IF NO WRITE ERROR
DA4D: 1809    		JR	PRNLE		;GO PRINT ERROR AND RESET DMA
DA4F:         	SAVE2:
DA4F: 119BD4  		LD	DE,FCBDN 	;CLOSE SAVED FILE
DA52: CD4BD6  		CALL	CLOSE
DA55: 3C      		INC	A		;ERROR?
DA56: 2007    		JR	NZ,SAVE3	;PASS IF OK
              	;
              	;  PRNLE IS ALSO USED BY MEMLOAD FOR TPA FULL ERROR
              	;
DA58: CD10D6  	PRNLE:	CALL	PRINTC		;DISK OR MEM FULL
DA5B: 46756C  		DEFM	'Ful'
DA5E: EC      		DEFB	'l'+80H
              	;
DA5F: C32CD6  	SAVE3:	JP	DEFDMA		;SET DMA TO 0080 AND RESTART CPR
              					; OR RETURN TO MLERR
              	;
              	; Test File in FCB for existence, ask user to delete if so, and abort if he
              	;  choses not to
              	;
DA62:         	EXTEST:
DA62: CD02D8  		CALL	SCANER		;EXTRACT FILE NAME
DA65: C211D7  		JP	NZ,ERROR	;'?' IS NOT PERMITTED
DA68: CDE4D7  		CALL	SLOGIN		;LOG IN SELECTED DISK
DA6B: CD4FD6  		CALL	SEARF		;LOOK FOR SPECIFIED FILE
DA6E: 119BD4  		LD	DE,FCBDN	;PT TO FILE FCB
DA71: C8      		RET	Z		;OK IF NOT FOUND
DA72: D5      		PUSH	DE		;SAVE PTR TO FCB
DA73: CD10D6  		CALL	PRINTC
DA76: 44656C65		DEFM	'Delete File'
DA7A: 74652046	
DA7E: 696C65  	
DA81: BF      		DEFB	'?'+80H
DA82: CDBBD5  		CALL	CONIN		;GET RESPONSE
DA85: D1      		POP	DE		;GET PTR TO FCB
DA86: FE59    		CP	'Y'		;KEY ON YES
DA88: C246D5  		JP	NZ,RSTCPR	;RESTART IF NO, SP RESET EVENTUALLY
DA8B: D5      		PUSH	DE		;SAVE PTR TO FCB
DA8C: CD65D6  		CALL	DELETE		;DELETE FILE
DA8F: D1      		POP	DE		;GET PTR TO FCB
DA90: C9      		RET
              	;
              		ENDIF			;RAS
              	;
              	;Section 5F
              	;Command: REN
              	;Function:  To change the name of an existing file
              	;Forms:
              	;	REN <New ufn>=<Old ufn>	Perform function
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DA91:         	REN:
DA91: CD62DA  		CALL	EXTEST		;TEST FOR FILE EXISTENCE AND RETURN
              					; IF FILE DOESN'T EXIST; ABORT IF IT DOES
DA94: 3AF9D7  		LD	A,(TEMPDR)	;SAVE CURRENT DEFAULT DISK
DA97: F5      		PUSH	AF		;SAVE ON STACK
DA98:         	REN0:
DA98: 219BD4  		LD	HL,FCBDN 	;SAVE NEW FILE NAME
DA9B: 11ABD4  		LD	DE,FCBDM
DA9E: 011000  		LD	BC,16		;16 BYTES
DAA1: EDB0    		LDIR
DAA3: CD4BD7  		CALL	ADVAN		;ADVANCE CIBPTR
DAA6: FE3D    		CP	'='		;'=' OK
DAA8: 2028    		JR	NZ,REN4
DAAA:         	REN1:
DAAA: EB      		EX	DE,HL		;PT TO CHAR AFTER '=' IN HL
DAAB: 23      		INC	HL
DAAC: 2259D4  		LD	(CIBPTR),HL	;SAVE PTR TO OLD FILE NAME
DAAF: CD02D8  		CALL	SCANER		;EXTRACT FILENAME.TYP TOKEN
DAB2: 201E    		JR	NZ,REN4		;ERROR IF ANY '?'
DAB4: F1      		POP	AF		;GET OLD DEFAULT DRIVE
DAB5: 47      		LD	B,A		;SAVE IT
DAB6: 21F9D7  		LD	HL,TEMPDR	;COMPARE IT AGAINST CURRENT DEFAULT DRIVE
DAB9: 7E      		LD	A,(HL)		;MATCH?
DABA: B7      		OR	A
DABB: 2804    		JR	Z,REN2
DABD: B8      		CP	B		;CHECK FOR DRIVE ERROR
DABE: 70      		LD	(HL),B
DABF: 2011    		JR	NZ,REN4
DAC1:         	REN2:
DAC1: 70      		LD	(HL),B
DAC2: AF      		XOR	A
DAC3: 329BD4  		LD	(FCBDN),A	;SET DEFAULT DRIVE
DAC6: 119BD4  		LD	DE,FCBDN 	;RENAME FILE
DAC9: 0E17    		LD	C,17H		;BDOS RENAME FCT
DACB: CD46D6  		CALL	GRBDOS
DACE: C0      		RET	NZ
DACF:         	REN3:
DACF: CD5AD5  		CALL	PRNNF		;PRINT NO FILE MSG
DAD2:         	REN4:
DAD2: C3F6DB  		JP	ERRLOG
              	;
              		ENDIF			;RAS
              	;
              	;Section 5G
              	;Command: USER
              	;Function:  Change current USER number
              	;Forms:
              	;	USER <unum>	Select specified user number;<unum> is in DEC
              	;
              		IF	DRUSER		;IF DRIVE/USER CODE OK...
DAD5:         	USER:
DAD5: CD0BD7  		CALL	USRNUM		;EXTRACT USER NUMBER FROM COMMAND LINE
DAD8: 5F      		LD	E,A		;PLACE USER NUMBER IN E
DAD9: CD70D6  	SUSER:	CALL	SETUSR		;SET SPECIFIED USER
              		ENDIF			;DRUSER
DADC:         	RSTJP:
DADC: C349D5  		JP	RCPRNL		;RESTART CPR
              	;
              	;Section 5H
              	;Command: DFU
              	;Function:  Set the Default User Number for the command/file scanner
              	;	     (MEMLOAD)
              	;	    Note: When under SECURE mode, this will select the second
              	;	          user area to check for programs (normally user 15).
              	;
              	;Forms:
              	;	DFU <unum>	Select Default User Number;<unum> is in DEC
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
DADF:         	DFU:
DADF: CD0BD7  		CALL	USRNUM		;GET USER NUMBER
DAE2: 32B3DB  		LD	(DFUSR),A	;PUT IT AWAY
DAE5: 18F5    		JR	RSTJP		;RESTART CPR (NO DEFAULT LOGIN)
              		ENDIF			;NOT RAS
              	;
              	;Section 5I
              	;Command: JUMP
              	;Function:  To Call the program (subroutine) at the specified address
              	;	     without loading from disk
              	;Forms:
              	;	JUMP <adr>		Call at <adr>;<adr> is in HEX
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DAE7:         	JUMP:
DAE7: CD9BD7  		CALL	HEXNUM		;GET LOAD ADDRESS IN HL
DAEA: 1846    		JR	CALLPROG	;PERFORM CALL
              	;
              		ENDIF			;RAS
              	;
              	;Section 5J
              	;Command: GO
              	;Function:  To Call the program in the TPA without loading
              	;	     loading from disk. Same as JUMP 100H, but much
              	;	     more convenient, especially when used with
              	;	     parameters for programs like STAT. Also can be
              	;	     allowed on remote-access systems with no problems.
              	;
              	;Form:
              	;	GO <parameters like for COMMAND>
              	;
              		IF	RAS		;ONLY IF RAS
              	        ELSE
              	;
DAEC: 210001  	GO:	LD	HL,TPA		;Always to TPA
DAEF: 1841    		JR	CALLPROG	;Perform call
              	;
              		ENDIF			;END OF GO FOR RAS
              	;
              	;Section 5K
              	;Command: COM file processing
              	;Function:  To load the specified COM file from disk and execute it
              	;Forms:
              	;	<command>
              	;
DAF1:         	COM:
DAF1: 3A9CD4  		LD	A,(FCBFN)	;ANY COMMAND?
DAF4: FE20    		CP	' '		;' ' MEANS COMMAND WAS 'D:' TO SWITCH
DAF6: 201F    		JR	NZ,COM1		;NOT <SP>, SO MUST BE TRANSIENT OR ERROR
DAF8: 3AF9D7  		LD	A,(TEMPDR)	;LOOK FOR DRIVE SPEC
DAFB: B7      		OR	A		;IF ZERO, JUST BLANK
DAFC: CA49D5  		JP	Z,RCPRNL
DAFF: 3D      		DEC	A		;ADJUST FOR LOG IN
DB00: 3284D6  		LD	(TDRIVE),A	;SET DEFAULT DRIVE
DB03: CD83D6  		CALL	SETU0D		;SET DRIVE WITH USER 0
DB06: CD38D6  		CALL	LOGIN		;LOG IN DRIVE
              	;
              		IF	DRUSER		;DRIVE/USER HACKERY OK?
DB09: CD0BD7  		CALL	USRNUM		;GET USER #, IF ANY
DB0C: 5F      		LD	E,A		;GET IT READY FOR BDOS
DB0D: 3A9CD4  		LD	A,(FCBFN)	;SEE IF # SPECIFIED
DB10: FE20    		CP	' '
DB12: 20C5    		JR	NZ,SUSER	;SELECT IF WANTED
              		ENDIF			;DRUSER
              	;
DB14: C349D5  		JP	RCPRNL		;RESTART CPR
DB17:         	COM1:
DB17: 3AA4D4  		LD	A,(FCBFT)	;FILE TYPE MUST BE BLANK
DB1A: FE20    		CP	' '
DB1C: C211D7  		JP	NZ,ERROR
DB1F: 2177D4  		LD	HL,COMMSG	;PLACE DEFAULT FILE TYPE (COM) INTO FCB
DB22: 11A4D4  		LD	DE,FCBFT	;COPY INTO FILE TYPE
DB25: 010300  		LD	BC,3		;3 BYTES
DB28: EDB0    		LDIR
DB2A: 210001  		LD	HL,TPA		;SET EXECUTION/LOAD ADDRESS
DB2D: E5      		PUSH	HL		;SAVE FOR EXECUTION
DB2E: CD9EDB  		CALL	MEMLOAD		;LOAD MEMORY WITH FILE SPECIFIED IN CMD LINE
              					; (NO RETURN IF ERROR OR TOO BIG)
DB31: E1      		POP	HL		;GET EXECUTION ADDRESS
              	;
              	; CALLPROG IS THE ENTRY POINT FOR THE EXECUTION OF THE LOADED
              	;   PROGRAM. ON ENTRY TO THIS ROUTINE, HL MUST CONTAIN THE EXECUTION
              	;   ADDRESS OF THE PROGRAM (SUBROUTINE) TO EXECUTE
              	;
DB32:         	CALLPROG:
DB32: 2285DB  		LD	(EXECADR),HL	;PERFORM IN-LINE CODE MODIFICATION
DB35: CDEED7  		CALL	DLOGIN		;LOG IN DEFAULT DRIVE
DB38: CD02D8  		CALL	SCANER		;SEARCH COMMAND LINE FOR NEXT TOKEN
DB3B: 21F9D7  		LD	HL,TEMPDR	;SAVE PTR TO DRIVE SPEC
DB3E: E5      		PUSH	HL
DB3F: 7E      		LD	A,(HL)		;SET DRIVE SPEC
DB40: 329BD4  		LD	(FCBDN),A
DB43: 21ABD4  		LD	HL,FCBDN+10H	;PT TO 2ND FILE NAME
DB46: CD05D8  		CALL	SCANX		;SCAN FOR IT AND LOAD IT INTO FCBDN+16
DB49: E1      		POP	HL		;SET UP DRIVE SPECS
DB4A: 7E      		LD	A,(HL)
DB4B: 32ABD4  		LD	(FCBDM),A
DB4E: AF      		XOR	A
DB4F: 32BBD4  		LD	(FCBCR),A
DB52: 115C00  		LD	DE,TFCB		;COPY TO DEFAULT FCB
DB55: 219BD4  		LD	HL,FCBDN 	;FROM FCBDN
DB58: 012100  		LD	BC,33		;SET UP DEFAULT FCB
DB5B: EDB0    		LDIR
DB5D: 2107D4  		LD	HL,CIBUFF-1
DB60:         	COM4:
DB60: 23      		INC	HL
DB61: 7E      		LD	A,(HL)		;SKIP TO END OF 2ND FILE NAME
DB62: B7      		OR	A		;END OF LINE?
DB63: 2804    		JR	Z,COM5
DB65: FE20    		CP	' '		;END OF TOKEN?
DB67: 20F7    		JR	NZ,COM4
              	;
              	; LOAD COMMAND LINE INTO TBUFF
              	;
DB69:         	COM5:
DB69: 06FF    		LD	B,-1		;SET CHAR COUNT
DB6B: 118000  		LD	DE,TBUFF	;PT TO CHAR POS
DB6E: 2B      		DEC	HL
DB6F:         	COM6:
DB6F: 04      		INC	B		;INCR CHAR COUNT
DB70: 23      		INC	HL		;PT TO NEXT
DB71: 13      		INC	DE
DB72: 7E      		LD	A,(HL)		;COPY COMMAND LINE TO TBUFF
DB73: 12      		LD	(DE),A
DB74: B7      		OR	A		;DONE IF ZERO
DB75: 20F8    		JR	NZ,COM6
              	;
              	; RUN LOADED TRANSIENT PROGRAM
              	;
DB77:         	COM7:
DB77: 78      		LD	A,B		;SAVE CHAR COUNT
DB78: 328000  		LD	(TBUFF),A
DB7B: CDA7D5  		CALL	CRLF		;NEW LINE
DB7E: CD2CD6  		CALL	DEFDMA		;SET DMA TO 0080
DB81: CD74D6  		CALL	SETUD		;SET USER/DISK
              	;
              	; EXECUTION (CALL) OF PROGRAM (SUBROUTINE) OCCURS HERE
              	;
DB85:         	EXECADR	EQU	$+1		;CHANGE ADDRESS FOR IN-LINE CODE MODIFICATION
DB84: CD0001  		CALL	TPA		;CALL TRANSIENT
DB87: CD2CD6  		CALL	DEFDMA		;SET DMA TO 0080, IN CASE
              					;PROG CHANGED IT ON US
DB8A: CD83D6  		CALL	SETU0D		;SET USER 0/DISK
DB8D: CD38D6  		CALL	LOGIN		;LOGIN DISK
DB90: C3F8D4  		JP	RESTRT		;RESTART CPR
              	;
              	;Section 5L
              	;Command: GET
              	;Function:  To load the specified file from disk to the specified address
              	;Forms:
              	;	GET <adr> <ufn>	Load the specified file at the specified page;
              	;			<adr> is in HEX
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DB93:         	GET:
DB93: CD9BD7  		CALL	HEXNUM		;GET LOAD ADDRESS IN HL
DB96: E5      		PUSH	HL		;SAVE ADDRESS
DB97: CD02D8  		CALL	SCANER		;GET FILE NAME
DB9A: E1      		POP	HL		;RESTORE ADDRESS
DB9B: C211D7  		JP	NZ,ERROR	;MUST BE UNAMBIGUOUS
              	;
              	; FALL THRU TO MEMLOAD
              	;
              		ENDIF			;RAS
              	;
              	; LOAD MEMORY WITH THE FILE WHOSE NAME IS SPECIFIED IN THE COMMAND LINE
              	;   ON INPUT, HL CONTAINS STARTING ADDRESS TO LOAD
              	;
              	;  EXIT BACK TO CALLER IF NO ERROR.  IF COM FILE TOO BIG OR
              	; OTHER ERROR, EXIT DIRECTLY TO MLERR.
              	;
DB9E:         	MEMLOAD:
DB9E: 22D1DB  		LD	(LOADADR),HL	;SET LOAD ADDRESS
DBA1: CD6ED6  		CALL	GETUSR		;GET CURRENT USER NUMBER
DBA4: 326AD6  		LD	(TMPUSR),A	;SAVE IT FOR LATER
DBA7: 32B5DB  		LD	(TSELUSR),A	;TEMP USER TO SELECT
              	;
              	;   MLA is a reentry point for a non-standard CP/M Modification
              	; This is the return point for when the .COM (or GET) file is not found the
              	; first time, Drive A: is selected for a second attempt
              	;
DBAA:         	MLA:
DBAA: CDE4D7  		CALL	SLOGIN		;LOG IN SPECIFIED DRIVE IF ANY
DBAD: CD3DD6  		CALL	OPENF		;OPEN COMMAND.COM FILE
DBB0: 201E    		JR	NZ,MLA1		;FILE FOUND - LOAD IT
              	;
              		IF	SECURE
              	;
              	;  IF SECURE ENABLED, SEARCH CURRENT DRIVE, CURRENT USER, THEN
              	; IF IN WHEEL MODE, SEARCH UNDER LAST USER SET BY DFU (ORIG
              	; "RESUSR" AFTER WARM BOOT) ON CURRENT DRIVE. IF NOT FOUND, OR
              	; NOT IN WHEEL MODE, THEN SEARCH ON CURRENT DRIVE, UNDER USER
              	; "DEFUSR". IF STILL NOT FOUND, LOOK AT SAME SERIES OF USERS
              	; ON DRIVE A.
              	;
              	DFLAG	EQU	$+1		;MARK IN-THE-CODE VARIABLE
              		LD	A,0		;HAVE WE CHECKED THIS DRIVE ALREADY?
              		OR	A
              		JR	NZ,MLA0		;PASS IF SO TO GO TO DRIVE A:
              		LD	A,(WHEEL)	;RESTRICTED PROGS ALLOWED?
              		CP	RESTRCT
              		JR	Z,MLA00		;PASS IF NOT
              		PUSH	BC		;PUSH BC
              		LD	A,(DFUSR)	;LOAD DEFAULT USER
              		LD	B,A		;PUT IT IN B
              		LD	A,(TSELUSR)	;CHECK CURR USER
              	DFUSR	EQU	$+1		;DEFAULT USER LOCATION
              		CP	RESUSR		;RESTRICTED USER?
              		LD	A,B		;ASSUME NOT
              		POP	BC		;RESTORE BC
              		JR	NZ,SETTSE	;GO TRY IF NOT
              	MLA00:				;SS IF NOT
              	TSELUSR	EQU	$+1		;MARK IN-THE-CODE VARIABLE
              		LD	A,0		;GET CURR USER
              		SUB	DEFUSR		;IS IT UNRESTRICTED COM AREA?
              		JR	Z,MLA0		;NO MORE CHOICES IF SO
              		LD	(DFLAG),A	;MAKE DFLAG NON-ZERO IF NOT
              		LD	A,DEFUSR	; AND TRY UNRESTRICTED COM AREA
              		ENDIF			;SECURE
              	;
              		IF	SECURE
              	        ELSE
DBB3:         	DFUSR	EQU	$+1		;MARK IN-THE-CODE VARIABLE
DBB2: 3E00    		LD	A,DEFUSR	;GET DEFAULT USER
DBB5:         	TSELUSR	EQU	$+1		;MARK IN-THE-CODE VARIABLE
DBB4: FE00    		CP	DEFUSR		;CHECK FOR THE USER AREA..
DBB6: 2809    		JR	Z,MLA0		;..EQUAL DEFAULT, AND JUMP IF SO
              		ENDIF			;NOT SECURE
              	;
DBB8:         	SETTSE:
DBB8: 32B5DB  		LD	(TSELUSR),A	;PUT DOWN NEW ONE
DBBB: 5F      		LD	E,A
DBBC: CD70D6  		CALL	SETUSR		;GO SET NEW USER NUMBER
DBBF: 18E9    		JR	MLA		;AND TRY AGAIN
              	;
              	; ERROR ROUTINE TO SELECT DRIVE A: IF DEFAULT WAS ORIGINALLY SELECTED
              	;
DBC1:         	MLA0:
DBC1: 21F9D7  		LD	HL,TEMPDR	;GET DRIVE FROM CURRENT COMMAND
DBC4: AF      		XOR	A		;A=0
              	;
              		IF	SECURE
              		LD	(DFLAG),A	;ALLOW A: SEARCH
              		ENDIF			;SECURE
              	;
DBC5: B6      		OR	(HL)
DBC6: C2F3DB  		JP	NZ,MLERR	;ERROR IF ALREADY DISK A:
DBC9: 3601    		LD	(HL),1		;SELECT DRIVE A:
DBCB: 3A6AD6  		LD	A,(TMPUSR)	;GO TO 'CURRENT' USER CODE
DBCE: 18E8    		JR	SETTSE
              	;
              	; FILE FOUND -- PROCEED WITH LOAD
              	;
DBD0:         	MLA1:
DBD1:         	LOADADR	EQU	$+1
DBD0: 210001  		LD	HL,TPA
DBD3:         	ML2:
DBD3: 3ED3    		LD	A,ENTRY/256-1	;GET HIGH-ORDER ADR OF JUST BELOW CPR
DBD5: BC      		CP	H		;ARE WE GOING TO OVERWRITE THE CPR?
DBD6: 3818    		JR	C,ML4		;ERROR IF SO
DBD8: E5      		PUSH	HL		;SAVE ADDRESS OF NEXT SECTOR
DBD9: EB      		EX	DE,HL		;... IN DE
DBDA: CD2FD6  		CALL	DMASET		;SET DMA ADDRESS FOR LOAD
DBDD: 119BD4  		LD	DE,FCBDN 	;READ NEXT SECTOR
DBE0: CD07D6  		CALL	READ
DBE3: E1      		POP	HL		;GET ADDRESS OF NEXT SECTOR
DBE4: 2006    		JR	NZ,ML3		;READ ERROR OR EOF?
DBE6: 118000  		LD	DE,128		;MOVE 128 BYTES PER SECTOR
DBE9: 19      		ADD	HL,DE		;PT TO NEXT SECTOR IN HL
DBEA: 18E7    		JR	ML2
              	;
DBEC:         	ML3:
DBEC: 3D      		DEC	A		;LOAD COMPLETE
DBED: CA69D6  		JP	Z,RESETUSR	;IF ZERO, OK, GO RESET CORRECT USER #
              					; ON WAY OUT, ELSE FALL THRU TO PRNLE
              	;
              	;  TPA FULL
              	;
DBF0: CD58DA  	ML4:	CALL	PRNLE		;PRINT MSG AND RESET DEF DMA
              	;
              	; TRANSIENT LOAD ERROR
              	;
DBF3:         	MLERR:
              					;NOTE THAT THERE IS AN EXTRA RETURN ADDRESS ON
              					; THE STACK. IT WILL BE TOSSED WHEN ERROR EXITS
              					; TO RESTRT, WHICH RELOADS SP.
DBF3: CD69D6  		CALL	RESETUSR	;RESET CURRENT USER NUMBER
              					;  RESET MUST BE DONE BEFORE LOGIN
DBF6:         	ERRLOG:
DBF6: CDEED7  		CALL	DLOGIN		;LOG IN DEFAULT DISK
DBF9: C311D7  		JP	ERROR		;FLAG ERROR
              	;
              	;
              	;Section: 5M
              	;PASS:  Enable wheel mode.
              	;NORM:	Disable wheel mode.
              	;
              	;  Type PASS <password> <cr> to CP/M prompt to enter wheel mode.
              	; This code can be replaced with PST's PASS.ASM which gives many
              	; nice little options like no keyboard echo, etc.
              	;
              		IF	INPASS		;WE WANT TO USE THIS CODE, NOT PASS.COM
              	PASS:
              		LD	HL,PASSWD	;SET UP POINTERS
              		LD	DE,CIBUFF+NCHARS+1
              		LD	B,PRGEND-PASSWD	;B= LENGTH
              	CKPASS:	LD	A,(DE)		;TRIAL PW TO A
              		CP	(HL)		;CHECK FOR MATCH
              		JP	NZ,COM		;NOPE.. LOOK FOR PASS.COM
              		INC	HL		;INCREMENT COUNTER
              		INC	DE
              		DJNZ	CKPASS		;CONTINUE IF MORE
              		LD	A,NOT RESTRCT	;WHEEL = NOT RESTRCT
              	
              	PWOUT:	LD	(WHEEL),A
              		JP	RESTRT
              	;
              	NORM:
              		LD	A,RESTRCT
              		JR	PWOUT
              	;
              	PASSWD:
              		DEFM	'YOURPW'	;YOUR PASSWORD
              	PRGEND	EQU	$		;END OF PASSWORD
              	;
              		ENDIF			;INPASS
              	
DBFC: 00000000	        DEFS    4
              	
              	#include "../bdos.asm"
              	;**************************************************************
              	;*
              	;*             C P / M   version   2 . 2
              	;*
              	;*   Reconstructed from memory image on February 27, 1981
              	;*
              	;*                by Clark A. Calkins
              	;*
              	;*      Modified to build as single image from source
              	;*
              	;*
              	;*
              	;**************************************************************
              	
              	
              	
              	;
              	;   note that the following six bytes must match those at
              	; (pattrn1) or cp/m will halt. why?
              	;
DC00: 00160000	pattrn2:defb	0,22,0,0,0,0	;(* serial number bytes *).
DC04: 0000    	
              	;
              	;**************************************************************
              	;*
              	;*                    B D O S   E N T R Y
              	;*
              	;**************************************************************
              	;
DC06: C311DC  	fbase:	jp	fbase1
              	;
              	;   bdos error table.
              	;
DC09: 99DC    	badsctr:defw	error1		;bad sector on read or write.
DC0B: A5DC    	badslct:defw	error2		;bad disk select.
DC0D: ABDC    	rodisk:	defw	error3		;disk is read only.
DC0F: B1DC    	rofile:	defw	error4		;file is read only.
              	;
              	;   entry into bdos. (de) or (e) are the parameters passed. the
              	; function number desired is in register (c).
              	;
DC11: EB      	fbase1:	ex	de,hl		;save the (de) parameters.
DC12: 2243DF  		ld	(params),hl
DC15: EB      		ex	de,hl
DC16: 7B      		ld	a,e		;and save register (e) in particular.
DC17: 32D6E9  		ld	(eparam),a
DC1A: 210000  		ld	hl,0
DC1D: 2245DF  		ld	(status),hl	;clear return status.
DC20: 39      		add	hl,sp
DC21: 220FDF  		ld	(usrstack),hl	;save users stack pointer.
DC24: 3141DF  		ld	sp,stkarea	;and set our own.
DC27: AF      		xor	a		;clear auto select storage space.
DC28: 32E0E9  		ld	(autoflag),a
DC2B: 2174E9  		ld	hl,goback	;set return address.
DC2E: E5      		push	hl
DC2F: CD18EB  		call	bshook		; see if anyone wants to intercept the call
DC32: 79      		ld	a,c		;get function number.
DC33: FE29    		cp	nfuncts		;valid function number?
DC35: D0      		ret	nc
DC36: 4B      		ld	c,e		;keep single register function here.
DC37: 2147DC  		ld	hl,functns	;now look thru the function table.
DC3A: 5F      		ld	e,a
DC3B: 1600    		ld	d,0		;(de)=function number.
DC3D: 19      		add	hl,de
DC3E: 19      		add	hl,de		;(hl)=(start of table)+2*(function number).
DC3F: 5E      		ld	e,(hl)
DC40: 23      		inc	hl
DC41: 56      		ld	d,(hl)		;now (de)=address for this function.
DC42: 2A43DF  		ld	hl,(params)	;retrieve parameters.
DC45: EB      		ex	de,hl		;now (de) has the original parameters.
DC46: E9      		jp	(hl)		;execute desired function.
              	;
              	;   bdos function jump table.
              	;
0029:         	nfuncts equ	41		;number of functions in followin table.
              	;
DC47: 46EAC8DE	functns:defw	wboot,getcon,outcon,getrdr,punch,list,dircio,getiob
DC4B: 90DDCEDE	
DC4F: C7EAC3EA	
DC53: D4DEEDDE	
DC57: F3DEF8DE		defw	setiob,prtstr,rdbuff,getcsts,getver,rstdsk,setdsk,openfil
DC5B: E1DDFEDE	
DC5F: 7EE883E8	
DC63: 45E89CE8	
DC67: A5E8ABE8		defw	closefil,getfst,getnxt,delfile,readseq,wrtseq,fcreate
DC6B: C8E8D7E8	
DC6F: E0E8E6E8	
DC73: ECE8    	
DC75: F5E8FEE8		defw	renfile,getlog,getcrnt,putdma,getaloc,wrtprtd,getrov,setattr
DC79: 04E90AE9	
DC7D: 11E92CE1	
DC81: 17E91DE9	
DC85: 26E92DE9		defw	getparm,getuser,rdrandom,wtrandom,filesize,setran,logoff,rtn
DC89: 41E947E9	
DC8D: 4DE90EE8	
DC91: 53E904DF	
DC95: 04DF9BE9		defw	rtn,wtspecl
              	;
              	;   bdos error message section.
              	;
DC99: 21CADC  	error1:	ld	hl,badsec	;bad sector message.
DC9C: CDE5DC  		call	prterr		;print it and get a 1 char responce.
DC9F: FE03    		cp	cntrlc		;re-boot request (control-c)?
DCA1: CA0000  		jp	z,0		;yes.
DCA4: C9      		ret			;no, return to retry i/o function.
              	;
DCA5: 21D5DC  	error2:	ld	hl,badsel	;bad drive selected.
DCA8: C3B4DC  		jp	error5
              	;
DCAB: 21E1DC  	error3:	ld	hl,diskro	;disk is read only.
DCAE: C3B4DC  		jp	error5
              	;
DCB1: 21DCDC  	error4:	ld	hl,filero	;file is read only.
              	;
DCB4: CDE5DC  	error5:	call	prterr
DCB7: C341EA  		jp	eboot		;always reboot on these errors.
              	;
DCBA: 42646F73	bdoserr:defb	'Bdos Err on '
DCBE: 20457272	
DCC2: 206F6E20	
DCC6: 203A2024	bdosdrv:defb	' : $'
DCCA: 42616420	badsec:	defb	'Bad Sector$'
DCCE: 53656374	
DCD2: 6F7224  	
DCD5: 53656C65	badsel:	defb	'Select$'
DCD9: 637424  	
DCDC: 46696C65	filero:	defb	'File '
DCE0: 20      	
DCE1: 522F4F24	diskro:	defb	'R/O$'
              	;
              	;   print bdos error message.
              	;
DCE5: E5      	prterr:	push	hl		;save second message pointer.
DCE6: CDC9DD  		call	outcrlf		;send (cr)(lf).
DCE9: 3A42DF  		ld	a,(active)	;get active drive.
DCEC: C641    		add	a,'A'		;make ascii.
DCEE: 32C6DC  		ld	(bdosdrv),a	;and put in message.
DCF1: 01BADC  		ld	bc,bdoserr	;and print it.
DCF4: CDD3DD  		call	prtmesg
DCF7: C1      		pop	bc		;print second message line now.
DCF8: CDD3DD  		call	prtmesg
              	;
              	;   get an input character. we will check our 1 character
              	; buffer first. this may be set by the console status routine.
              	;
DCFB: 210EDF  	getchar:ld	hl,charbuf	;check character buffer.
DCFE: 7E      		ld	a,(hl)		;anything present already?
DCFF: 3600    		ld	(hl),0		;...either case clear it.
DD01: B7      		or	a
DD02: C0      		ret	nz		;yes, use it.
DD03: C3ABEA  		jp	conin		;nope, go get a character responce.
              	;
              	;   input and echo a character.
              	;
DD06: CDFBDC  	getecho:call	getchar		;input a character.
DD09: CD14DD  		call	chkchar		;carriage control?
DD0C: D8      		ret	c		;no, a regular control char so don't echo.
DD0D: F5      		push	af		;ok, save character now.
DD0E: 4F      		ld	c,a
DD0F: CD90DD  		call	outcon		;and echo it.
DD12: F1      		pop	af		;get character and return.
DD13: C9      		ret	
              	;
              	;   check character in (a). set the zero flag on a carriage
              	; control character and the carry flag on any other control
              	; character.
              	;
DD14: FE0D    	chkchar:cp	cr		;check for carriage return, line feed, backspace,
DD16: C8      		ret	z		;or a tab.
DD17: FE0A    		cp	lf
DD19: C8      		ret	z
DD1A: FE09    		cp	tab
DD1C: C8      		ret	z
DD1D: FE08    		cp	bs
DD1F: C8      		ret	z
DD20: FE20    		cp	' '		;other control char? set carry flag.
DD22: C9      		ret	
              	;
              	;   check the console during output. halt on a control-s, then
              	; reboot on a control-c. if anything else is ready, clear the
              	; zero flag and return (the calling routine may want to do
              	; something).
              	;
DD23: 3A0EDF  	ckconsol: ld	a,(charbuf)	;check buffer.
DD26: B7      		or	a		;if anything, just return without checking.
DD27: C245DD  		jp	nz,ckcon2
DD2A: CDA0EA  		call	const		;nothing in buffer. check console.
DD2D: E601    		and	01h		;look at bit 0.
DD2F: C8      		ret	z		;return if nothing.
DD30: CDABEA  		call	conin		;ok, get it.
DD33: FE13    		cp	cntrls		;if not control-s, return with zero cleared.
DD35: C242DD  		jp	nz,ckcon1
DD38: CDABEA  		call	conin		;halt processing until another char
DD3B: FE03    		cp	cntrlc		;is typed. control-c?
DD3D: CA0000  		jp	z,0		;yes, reboot now.
DD40: AF      		xor	a		;no, just pretend nothing was ever ready.
DD41: C9      		ret	
DD42: 320EDF  	ckcon1:	ld	(charbuf),a	;save character in buffer for later processing.
DD45: 3E01    	ckcon2:	ld	a,1		;set (a) to non zero to mean something is ready.
DD47: C9      		ret	
              	;
              	;   output (c) to the screen. if the printer flip-flop flag
              	; is set, we will send character to printer also. the console
              	; will be checked in the process.
              	;
DD48: 3A0ADF  	outchar:ld	a,(outflag)	;check output flag.
DD4B: B7      		or	a		;anything and we won't generate output.
DD4C: C262DD  		jp	nz,outchr1
DD4F: C5      		push	bc
DD50: CD23DD  		call	ckconsol	;check console (we don't care whats there).
DD53: C1      		pop	bc
DD54: C5      		push	bc
DD55: CDB7EA  		call	conout		;output (c) to the screen.
DD58: C1      		pop	bc
DD59: C5      		push	bc
DD5A: 3A0DDF  		ld	a,(prtflag)	;check printer flip-flop flag.
DD5D: B7      		or	a
DD5E: C4C3EA  		call	nz,list		;print it also if non-zero.
DD61: C1      		pop	bc
DD62: 79      	outchr1:ld	a,c		;update cursors position.
DD63: 210CDF  		ld	hl,curpos
DD66: FE7F    		cp	del		;rubouts don't do anything here.
DD68: C8      		ret	z
DD69: 34      		inc	(hl)		;bump line pointer.
DD6A: FE20    		cp	' '		;and return if a normal character.
DD6C: D0      		ret	nc
DD6D: 35      		dec	(hl)		;restore and check for the start of the line.
DD6E: 7E      		ld	a,(hl)
DD6F: B7      		or	a
DD70: C8      		ret	z		;ingnore control characters at the start of the line.
DD71: 79      		ld	a,c
DD72: FE08    		cp	bs		;is it a backspace?
DD74: C279DD  		jp	nz,outchr2
DD77: 35      		dec	(hl)		;yes, backup pointer.
DD78: C9      		ret	
DD79: FE0A    	outchr2:cp	lf		;is it a line feed?
DD7B: C0      		ret	nz		;ignore anything else.
DD7C: 3600    		ld	(hl),0		;reset pointer to start of line.
DD7E: C9      		ret	
              	;
              	;   output (a) to the screen. if it is a control character
              	; (other than carriage control), use ^x format.
              	;
DD7F: 79      	showit:	ld	a,c
DD80: CD14DD  		call	chkchar		;check character.
DD83: D290DD  		jp	nc,outcon	;not a control, use normal output.
DD86: F5      		push	af
DD87: 0E5E    		ld	c,'^'		;for a control character, preceed it with '^'.
DD89: CD48DD  		call	outchar
DD8C: F1      		pop	af
DD8D: F640    		or	'@'		;and then use the letter equivelant.
DD8F: 4F      		ld	c,a
              	;
              	;   function to output (c) to the console device and expand tabs
              	; if necessary.
              	;
DD90: 79      	outcon:	ld	a,c
DD91: FE09    		cp	tab		;is it a tab?
DD93: C248DD  		jp	nz,outchar	;use regular output.
DD96: 0E20    	outcon1:ld	c,' '		;yes it is, use spaces instead.
DD98: CD48DD  		call	outchar
DD9B: 3A0CDF  		ld	a,(curpos)	;go until the cursor is at a multiple of 8
              	
DD9E: E607    		and	07h		;position.
DDA0: C296DD  		jp	nz,outcon1
DDA3: C9      		ret	
              	;
              	;   echo a backspace character. erase the prevoius character
              	; on the screen.
              	;
DDA4: CDACDD  	backup:	call	backup1		;backup the screen 1 place.
DDA7: 0E20    		ld	c,' '		;then blank that character.
DDA9: CDB7EA  		call	conout
DDAC: 0E08    	backup1:ld	c,bs		;then back space once more.
DDAE: C3B7EA  		jp	conout
              	;
              	;   signal a deleted line. print a '#' at the end and start
              	; over.
              	;
DDB1: 0E23    	newline:ld	c,'#'
DDB3: CD48DD  		call	outchar		;print this.
DDB6: CDC9DD  		call	outcrlf		;start new line.
DDB9: 3A0CDF  	newln1:	ld	a,(curpos)	;move the cursor to the starting position.
DDBC: 210BDF  		ld	hl,starting
DDBF: BE      		cp	(hl)
DDC0: D0      		ret	nc		;there yet?
DDC1: 0E20    		ld	c,' '
DDC3: CD48DD  		call	outchar		;nope, keep going.
DDC6: C3B9DD  		jp	newln1
              	;
              	;   output a (cr) (lf) to the console device (screen).
              	;
DDC9: 0E0D    	outcrlf:ld	c,cr
DDCB: CD48DD  		call	outchar
DDCE: 0E0A    		ld	c,lf
DDD0: C348DD  		jp	outchar
              	;
              	;   print message pointed to by (bc). it will end with a '$'.
              	;
DDD3: 0A      	prtmesg:ld	a,(bc)		;check for terminating character.
DDD4: FE24    		cp	'$'
DDD6: C8      		ret	z
DDD7: 03      		inc	bc
DDD8: C5      		push	bc		;otherwise, bump pointer and print it.
DDD9: 4F      		ld	c,a
DDDA: CD90DD  		call	outcon
DDDD: C1      		pop	bc
DDDE: C3D3DD  		jp	prtmesg
              	;
              	;   function to execute a buffered read.
              	;
DDE1: 3A0CDF  	rdbuff:	ld	a,(curpos)	;use present location as starting one.
DDE4: 320BDF  		ld	(starting),a
DDE7: 2A43DF  		ld	hl,(params)	;get the maximum buffer space.
DDEA: 4E      		ld	c,(hl)
DDEB: 23      		inc	hl		;point to first available space.
DDEC: E5      		push	hl		;and save.
DDED: 0600    		ld	b,0		;keep a character count.
DDEF: C5      	rdbuf1:	push	bc
DDF0: E5      		push	hl
DDF1: CDFBDC  	rdbuf2:	call	getchar		;get the next input character.
DDF4: E67F    		and	7fh		;strip bit 7.
DDF6: E1      		pop	hl		;reset registers.
DDF7: C1      		pop	bc
DDF8: FE0D    		cp	cr		;en of the line?
DDFA: CAC1DE  		jp	z,rdbuf17
DDFD: FE0A    		cp	lf
DDFF: CAC1DE  		jp	z,rdbuf17
DE02: FE08    		cp	bs		;how about a backspace?
DE04: C216DE  		jp	nz,rdbuf3
DE07: 78      		ld	a,b		;yes, but ignore at the beginning of the line.
DE08: B7      		or	a
DE09: CAEFDD  		jp	z,rdbuf1
DE0C: 05      		dec	b		;ok, update counter.
DE0D: 3A0CDF  		ld	a,(curpos)	;if we backspace to the start of the line,
DE10: 320ADF  		ld	(outflag),a	;treat as a cancel (control-x).
DE13: C370DE  		jp	rdbuf10
DE16: FE7F    	rdbuf3:	cp	del		;user typed a rubout?
DE18: C226DE  		jp	nz,rdbuf4
DE1B: 78      		ld	a,b		;ignore at the start of the line.
DE1C: B7      		or	a
DE1D: CAEFDD  		jp	z,rdbuf1
DE20: 7E      		ld	a,(hl)		;ok, echo the prevoius character.
DE21: 05      		dec	b		;and reset pointers (counters).
DE22: 2B      		dec	hl
DE23: C3A9DE  		jp	rdbuf15
DE26: FE05    	rdbuf4:	cp	cntrle		;physical end of line?
DE28: C237DE  		jp	nz,rdbuf5
DE2B: C5      		push	bc		;yes, do it.
DE2C: E5      		push	hl
DE2D: CDC9DD  		call	outcrlf
DE30: AF      		xor	a		;and update starting position.
DE31: 320BDF  		ld	(starting),a
DE34: C3F1DD  		jp	rdbuf2
DE37: FE10    	rdbuf5:	cp	cntrlp		;control-p?
DE39: C248DE  		jp	nz,rdbuf6
DE3C: E5      		push	hl		;yes, flip the print flag filp-flop byte.
DE3D: 210DDF  		ld	hl,prtflag
DE40: 3E01    		ld	a,1		;prtflag=1-prtflag
DE42: 96      		sub	(hl)
DE43: 77      		ld	(hl),a
DE44: E1      		pop	hl
DE45: C3EFDD  		jp	rdbuf1
DE48: FE18    	rdbuf6:	cp	cntrlx		;control-x (cancel)?
DE4A: C25FDE  		jp	nz,rdbuf8
DE4D: E1      		pop	hl
DE4E: 3A0BDF  	rdbuf7:	ld	a,(starting)	;yes, backup the cursor to here.
DE51: 210CDF  		ld	hl,curpos
DE54: BE      		cp	(hl)
DE55: D2E1DD  		jp	nc,rdbuff	;done yet?
DE58: 35      		dec	(hl)		;no, decrement pointer and output back up one space.
DE59: CDA4DD  		call	backup
DE5C: C34EDE  		jp	rdbuf7
DE5F: FE15    	rdbuf8:	cp	cntrlu		;cntrol-u (cancel line)?
DE61: C26BDE  		jp	nz,rdbuf9
DE64: CDB1DD  		call	newline		;start a new line.
DE67: E1      		pop	hl
DE68: C3E1DD  		jp	rdbuff
DE6B: FE12    	rdbuf9:	cp	cntrlr		;control-r?
DE6D: C2A6DE  		jp	nz,rdbuf14
DE70: C5      	rdbuf10:push	bc		;yes, start a new line and retype the old one.
DE71: CDB1DD  		call	newline
DE74: C1      		pop	bc
DE75: E1      		pop	hl
DE76: E5      		push	hl
DE77: C5      		push	bc
DE78: 78      	rdbuf11:ld	a,b		;done whole line yet?
DE79: B7      		or	a
DE7A: CA8ADE  		jp	z,rdbuf12
DE7D: 23      		inc	hl		;nope, get next character.
DE7E: 4E      		ld	c,(hl)
DE7F: 05      		dec	b		;count it.
DE80: C5      		push	bc
DE81: E5      		push	hl
DE82: CD7FDD  		call	showit		;and display it.
DE85: E1      		pop	hl
DE86: C1      		pop	bc
DE87: C378DE  		jp	rdbuf11
DE8A: E5      	rdbuf12:push	hl		;done with line. if we were displaying
DE8B: 3A0ADF  		ld	a,(outflag)	;then update cursor position.
DE8E: B7      		or	a
DE8F: CAF1DD  		jp	z,rdbuf2
DE92: 210CDF  		ld	hl,curpos	;because this line is shorter, we must
DE95: 96      		sub	(hl)		;back up the cursor (not the screen however)
DE96: 320ADF  		ld	(outflag),a	;some number of positions.
DE99: CDA4DD  	rdbuf13:call	backup		;note that as long as (outflag) is non
DE9C: 210ADF  		ld	hl,outflag	;zero, the screen will not be changed.
DE9F: 35      		dec	(hl)
DEA0: C299DE  		jp	nz,rdbuf13
DEA3: C3F1DD  		jp	rdbuf2		;now just get the next character.
              	;
              	;   just a normal character, put this in our buffer and echo.
              	;
DEA6: 23      	rdbuf14:inc	hl
DEA7: 77      		ld	(hl),a		;store character.
DEA8: 04      		inc	b		;and count it.
DEA9: C5      	rdbuf15:push	bc
DEAA: E5      		push	hl
DEAB: 4F      		ld	c,a		;echo it now.
DEAC: CD7FDD  		call	showit
DEAF: E1      		pop	hl
DEB0: C1      		pop	bc
DEB1: 7E      		ld	a,(hl)		;was it an abort request?
DEB2: FE03    		cp	cntrlc		;control-c abort?
DEB4: 78      		ld	a,b
DEB5: C2BDDE  		jp	nz,rdbuf16
DEB8: FE01    		cp	1		;only if at start of line.
DEBA: CA0000  		jp	z,0
DEBD: B9      	rdbuf16:cp	c		;nope, have we filled the buffer?
DEBE: DAEFDD  		jp	c,rdbuf1
DEC1: E1      	rdbuf17:pop	hl		;yes end the line and return.
DEC2: 70      		ld	(hl),b
DEC3: 0E0D    		ld	c,cr
DEC5: C348DD  		jp	outchar		;output (cr) and return.
              	;
              	;   function to get a character from the console device.
              	;
DEC8: CD06DD  	getcon:	call	getecho		;get and echo.
DECB: C301DF  		jp	setstat		;save status and return.
              	;
              	;   function to get a character from the tape reader device.
              	;
DECE: CDCBEA  	getrdr:	call	reader		;get a character from reader, set status and return.
DED1: C301DF  		jp	setstat
              	;
              	;  function to perform direct console i/o. if (c) contains (ff)
              	; then this is an input request. if (c) contains (fe) then
              	; this is a status request. otherwise we are to output (c).
              	;
DED4: 79      	dircio:	ld	a,c		;test for (ff).
DED5: 3C      		inc	a
DED6: CAE0DE  		jp	z,dirc1
DED9: 3C      		inc	a		;test for (fe).
DEDA: CAA0EA  		jp	z,const
DEDD: C3B7EA  		jp	conout		;just output (c).
DEE0: CDA0EA  	dirc1:	call	const		;this is an input request.
DEE3: B7      		or	a
DEE4: CA91E9  		jp	z,goback1	;not ready? just return (directly).
DEE7: CDABEA  		call	conin		;yes, get character.
DEEA: C301DF  		jp	setstat		;set status and return.
              	;
              	;   function to return the i/o byte.
              	;
DEED: 3A0300  	getiob:	ld	a,(iobyte)
DEF0: C301DF  		jp	setstat
              	;
              	;   function to set the i/o byte.
              	;
DEF3: 210300  	setiob:	ld	hl,iobyte
DEF6: 71      		ld	(hl),c
DEF7: C9      		ret	
              	;
              	;   function to print the character string pointed to by (de)
              	; on the console device. the string ends with a '$'.
              	;
DEF8: EB      	prtstr:	ex	de,hl
DEF9: 4D      		ld	c,l
DEFA: 44      		ld	b,h		;now (bc) points to it.
DEFB: C3D3DD  		jp	prtmesg
              	;
              	;   function to interigate the console device.
              	;
DEFE: CD23DD  	getcsts:call	ckconsol
              	;
              	;   get here to set the status and return to the cleanup
              	; section. then back to the user.
              	;
DF01: 3245DF  	setstat:ld	(status),a
DF04: C9      	rtn:	ret	
              	;
              	;   set the status to 1 (read or write error code).
              	;
DF05: 3E01    	ioerr1:	ld	a,1
DF07: C301DF  		jp	setstat
              	;
DF0A: 00      	outflag:defb	0		;output flag (non zero means no output).
DF0B: 02      	starting: defb	2		;starting position for cursor.
DF0C: 00      	curpos:	defb	0		;cursor position (0=start of line).
DF0D: 00      	prtflag:defb	0		;printer flag (control-p toggle). list if non zero.
DF0E: 00      	charbuf:defb	0		;single input character buffer.
              	;
              	;   stack area for bdos calls.
              	;
DF0F: 0000    	usrstack: defw	0		;save users stack pointer here.
              	;
DF11: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DF15: 00...   	
DF29: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DF2D: 00...   	
DF41:         	stkarea equ	$		;end of stack area.
              	;
DF41: 00      	userno:	defb	0		;current user number.
DF42: 00      	active:	defb	0		;currently active drive.
DF43: 0000    	params:	defw	0		;save (de) parameters here on entry.
DF45: 0000    	status:	defw	0		;status returned from bdos function.
              	;
              	;   select error occured, jump to error routine.
              	;
DF47: 210BDC  	slcterr:ld	hl,badslct
              	;
              	;   jump to (hl) indirectly.
              	;
DF4A: 5E      	jumphl:	ld	e,(hl)
DF4B: 23      		inc	hl
DF4C: 56      		ld	d,(hl)		;now (de) contain the desired address.
DF4D: EB      		ex	de,hl
DF4E: E9      		jp	(hl)
              	;
              	;   block move. (de) to (hl), (c) bytes total.
              	;
DF4F: 0C      	de2hl:	inc	c		;is count down to zero?
DF50: 0D      	de2hl1:	dec	c
DF51: C8      		ret	z		;yes, we are done.
DF52: 1A      		ld	a,(de)		;no, move one more byte.
DF53: 77      		ld	(hl),a
DF54: 13      		inc	de
DF55: 23      		inc	hl
DF56: C350DF  		jp	de2hl1		;and repeat.
              	;
              	;   select the desired drive.
              	;
DF59: 3A42DF  	select:	ld	a,(active)	;get active disk.
DF5C: 4F      		ld	c,a
DF5D: CDDEEA  		call	seldsk		;select it.
DF60: 7C      		ld	a,h		;valid drive?
DF61: B5      		or	l		;valid drive?
DF62: C8      		ret	z		;return if not.
              	;
              	;   here, the bios returned the address of the parameter block
              	; in (hl). we will extract the necessary pointers and save them.
              	;
DF63: 5E      		ld	e,(hl)		;yes, get address of translation table into (de).
DF64: 23      		inc	hl
DF65: 56      		ld	d,(hl)
DF66: 23      		inc	hl
DF67: 22B3E9  		ld	(scratch1),hl	;save pointers to scratch areas.
DF6A: 23      		inc	hl
DF6B: 23      		inc	hl
DF6C: 22B5E9  		ld	(scratch2),hl	;ditto.
DF6F: 23      		inc	hl
DF70: 23      		inc	hl
DF71: 22B7E9  		ld	(scratch3),hl	;ditto.
DF74: 23      		inc	hl
DF75: 23      		inc	hl
DF76: EB      		ex	de,hl		;now save the translation table address.
DF77: 22D0E9  		ld	(xlate),hl
DF7A: 21B9E9  		ld	hl,dirbuf	;put the next 8 bytes here.
DF7D: 0E08    		ld	c,8		;they consist of the directory buffer
DF7F: CD4FDF  		call	de2hl		;pointer, parameter block pointer,
DF82: 2ABBE9  		ld	hl,(diskpb)	;check and allocation vectors.
DF85: EB      		ex	de,hl
DF86: 21C1E9  		ld	hl,sectors	;move parameter block into our ram.
DF89: 0E0F    		ld	c,15		;it is 15 bytes long.
DF8B: CD4FDF  		call	de2hl
DF8E: 2AC6E9  		ld	hl,(dsksize)	;check disk size.
DF91: 7C      		ld	a,h		;more than 256 blocks on this?
DF92: 21DDE9  		ld	hl,bigdisk
DF95: 36FF    		ld	(hl),0ffh	;set to samll.
DF97: B7      		or	a
DF98: CA9DDF  		jp	z,select1
DF9B: 3600    		ld	(hl),0		;wrong, set to large.
DF9D: 3EFF    	select1:ld	a,0ffh		;clear the zero flag.
DF9F: B7      		or	a
DFA0: C9      		ret	
              	;
              	;   routine to home the disk track head and clear pointers.
              	;
DFA1: CDD9EA  	homedrv:call	home		;home the head.
DFA4: AF      		xor	a
DFA5: 2AB5E9  		ld	hl,(scratch2)	;set our track pointer also.
DFA8: 77      		ld	(hl),a
DFA9: 23      		inc	hl
DFAA: 77      		ld	(hl),a
DFAB: 2AB7E9  		ld	hl,(scratch3)	;and our sector pointer.
DFAE: 77      		ld	(hl),a
DFAF: 23      		inc	hl
DFB0: 77      		ld	(hl),a
DFB1: C9      		ret	
              	;
              	;   do the actual disk read and check the error return status.
              	;
DFB2: CD0AEB  	doread:	call	read
DFB5: C3BBDF  		jp	ioret
              	;
              	;   do the actual disk write and handle any bios error.
              	;
DFB8: CD0EEB  	dowrite:call	write
DFBB: B7      	ioret:	or	a
DFBC: C8      		ret	z		;return unless an error occured.
DFBD: 2109DC  		ld	hl,badsctr	;bad read/write on this sector.
DFC0: C34ADF  		jp	jumphl
              	;
              	;   routine to select the track and sector that the desired
              	; block number falls in.
              	;
DFC3: 2AEAE9  	trksec:	ld	hl,(filepos)	;get position of last accessed file
DFC6: 0E02    		ld	c,2		;in directory and compute sector #.
DFC8: CDEAE0  		call	shiftr		;sector #=file-position/4.
DFCB: 22E5E9  		ld	(blknmbr),hl	;save this as the block number of interest.
DFCE: 22ECE9  		ld	(cksumtbl),hl	;what's it doing here too?
              	;
              	;   if the sector number has already been set (blknmbr), enter
              	; at this point.
              	;
DFD1: 21E5E9  	trksec1:ld	hl,blknmbr
DFD4: 4E      		ld	c,(hl)		;move sector number into (bc).
DFD5: 23      		inc	hl
DFD6: 46      		ld	b,(hl)
DFD7: 2AB7E9  		ld	hl,(scratch3)	;get current sector number and
DFDA: 5E      		ld	e,(hl)		;move this into (de).
DFDB: 23      		inc	hl
DFDC: 56      		ld	d,(hl)
DFDD: 2AB5E9  		ld	hl,(scratch2)	;get current track number.
DFE0: 7E      		ld	a,(hl)		;and this into (hl).
DFE1: 23      		inc	hl
DFE2: 66      		ld	h,(hl)
DFE3: 6F      		ld	l,a
DFE4: 79      	trksec2:ld	a,c		;is desired sector before current one?
DFE5: 93      		sub	e
DFE6: 78      		ld	a,b
DFE7: 9A      		sbc	a,d
DFE8: D2FADF  		jp	nc,trksec3
DFEB: E5      		push	hl		;yes, decrement sectors by one track.
DFEC: 2AC1E9  		ld	hl,(sectors)	;get sectors per track.
DFEF: 7B      		ld	a,e
DFF0: 95      		sub	l
DFF1: 5F      		ld	e,a
DFF2: 7A      		ld	a,d
DFF3: 9C      		sbc	a,h
DFF4: 57      		ld	d,a		;now we have backed up one full track.
DFF5: E1      		pop	hl
DFF6: 2B      		dec	hl		;adjust track counter.
DFF7: C3E4DF  		jp	trksec2
DFFA: E5      	trksec3:push	hl		;desired sector is after current one.
DFFB: 2AC1E9  		ld	hl,(sectors)	;get sectors per track.
DFFE: 19      		add	hl,de		;bump sector pointer to next track.
DFFF: DA0FE0  		jp	c,trksec4
E002: 79      		ld	a,c		;is desired sector now before current one?
E003: 95      		sub	l
E004: 78      		ld	a,b
E005: 9C      		sbc	a,h
E006: DA0FE0  		jp	c,trksec4
E009: EB      		ex	de,hl		;not yes, increment track counter
E00A: E1      		pop	hl		;and continue until it is.
E00B: 23      		inc	hl
E00C: C3FADF  		jp	trksec3
              	;
              	;   here we have determined the track number that contains the
              	; desired sector.
              	;
E00F: E1      	trksec4:pop	hl		;get track number (hl).
E010: C5      		push	bc
E011: D5      		push	de
E012: E5      		push	hl
E013: EB      		ex	de,hl
E014: 2ACEE9  		ld	hl,(offset)	;adjust for first track offset.
E017: 19      		add	hl,de
E018: 44      		ld	b,h
E019: 4D      		ld	c,l
E01A: CDFCEA  		call	settrk		;select this track.
E01D: D1      		pop	de		;reset current track pointer.
E01E: 2AB5E9  		ld	hl,(scratch2)
E021: 73      		ld	(hl),e
E022: 23      		inc	hl
E023: 72      		ld	(hl),d
E024: D1      		pop	de
E025: 2AB7E9  		ld	hl,(scratch3)	;reset the first sector on this track.
E028: 73      		ld	(hl),e
E029: 23      		inc	hl
E02A: 72      		ld	(hl),d
E02B: C1      		pop	bc
E02C: 79      		ld	a,c		;now subtract the desired one.
E02D: 93      		sub	e		;to make it relative (1-# sectors/track).
E02E: 4F      		ld	c,a
E02F: 78      		ld	a,b
E030: 9A      		sbc	a,d
E031: 47      		ld	b,a
E032: 2AD0E9  		ld	hl,(xlate)	;translate this sector according to this table.
E035: EB      		ex	de,hl
E036: CD15EB  		call	sectrn		;let the bios translate it.
E039: 4D      		ld	c,l
E03A: 44      		ld	b,h
E03B: C300EB  		jp	setsec		;and select it.
              	;
              	;   compute block number from record number (savnrec) and
              	; extent number (savext).
              	;
E03E: 21C3E9  	getblock: ld	hl,blkshft	;get logical to physical conversion.
E041: 4E      		ld	c,(hl)		;note that this is base 2 log of ratio.
E042: 3AE3E9  		ld	a,(savnrec)	;get record number.
E045: B7      	getblk1:or	a		;compute (a)=(a)/2^blkshft.
E046: 1F      		rra	
E047: 0D      		dec	c
E048: C245E0  		jp	nz,getblk1
E04B: 47      		ld	b,a		;save result in (b).
E04C: 3E08    		ld	a,8
E04E: 96      		sub	(hl)
E04F: 4F      		ld	c,a		;compute (c)=8-blkshft.
E050: 3AE2E9  		ld	a,(savext)
E053: 0D      	getblk2:dec	c		;compute (a)=savext*2^(8-blkshft).
E054: CA5CE0  		jp	z,getblk3
E057: B7      		or	a
E058: 17      		rla	
E059: C353E0  		jp	getblk2
E05C: 80      	getblk3:add	a,b
E05D: C9      		ret	
              	;
              	;   routine to extract the (bc) block byte from the fcb pointed
              	; to by (params). if this is a big-disk, then these are 16 bit
              	; block numbers, else they are 8 bit numbers.
              	; number is returned in (hl).
              	;
E05E: 2A43DF  	extblk:	ld	hl,(params)	;get fcb address.
E061: 111000  		ld	de,16		;block numbers start 16 bytes into fcb.
E064: 19      		add	hl,de
E065: 09      		add	hl,bc
E066: 3ADDE9  		ld	a,(bigdisk)	;are we using a big-disk?
E069: B7      		or	a
E06A: CA71E0  		jp	z,extblk1
E06D: 6E      		ld	l,(hl)		;no, extract an 8 bit number from the fcb.
E06E: 2600    		ld	h,0
E070: C9      		ret	
E071: 09      	extblk1:add	hl,bc		;yes, extract a 16 bit number.
E072: 5E      		ld	e,(hl)
E073: 23      		inc	hl
E074: 56      		ld	d,(hl)
E075: EB      		ex	de,hl		;return in (hl).
E076: C9      		ret	
              	;
              	;   compute block number.
              	;
E077: CD3EE0  	comblk:	call	getblock
E07A: 4F      		ld	c,a
E07B: 0600    		ld	b,0
E07D: CD5EE0  		call	extblk
E080: 22E5E9  		ld	(blknmbr),hl
E083: C9      		ret	
              	;
              	;   check for a zero block number (unused).
              	;
E084: 2AE5E9  	chkblk:	ld	hl,(blknmbr)
E087: 7D      		ld	a,l		;is it zero?
E088: B4      		or	h
E089: C9      		ret	
              	;
              	;   adjust physical block (blknmbr) and convert to logical
              	; sector (logsect). this is the starting sector of this block.
              	; the actual sector of interest is then added to this and the
              	; resulting sector number is stored back in (blknmbr). this
              	; will still have to be adjusted for the track number.
              	;
E08A: 3AC3E9  	logical:ld	a,(blkshft)	;get log2(physical/logical sectors).
E08D: 2AE5E9  		ld	hl,(blknmbr)	;get physical sector desired.
E090: 29      	logicl1:add	hl,hl		;compute logical sector number.
E091: 3D      		dec	a		;note logical sectors are 128 bytes long.
E092: C290E0  		jp	nz,logicl1
E095: 22E7E9  		ld	(logsect),hl	;save logical sector.
E098: 3AC4E9  		ld	a,(blkmask)	;get block mask.
E09B: 4F      		ld	c,a
E09C: 3AE3E9  		ld	a,(savnrec)	;get next sector to access.
E09F: A1      		and	c		;extract the relative position within physical block.
E0A0: B5      		or	l		;and add it too logical sector.
E0A1: 6F      		ld	l,a
E0A2: 22E5E9  		ld	(blknmbr),hl	;and store.
E0A5: C9      		ret	
              	;
              	;   set (hl) to point to extent byte in fcb.
              	;
E0A6: 2A43DF  	setext:	ld	hl,(params)
E0A9: 110C00  		ld	de,12		;it is the twelth byte.
E0AC: 19      		add	hl,de
E0AD: C9      		ret	
              	;
              	;   set (hl) to point to record count byte in fcb and (de) to
              	; next record number byte.
              	;
E0AE: 2A43DF  	sethlde:ld	hl,(params)
E0B1: 110F00  		ld	de,15		;record count byte (#15).
E0B4: 19      		add	hl,de
E0B5: EB      		ex	de,hl
E0B6: 211100  		ld	hl,17		;next record number (#32).
E0B9: 19      		add	hl,de
E0BA: C9      		ret	
              	;
              	;   save current file data from fcb.
              	;
E0BB: CDAEE0  	strdata:call	sethlde
E0BE: 7E      		ld	a,(hl)		;get and store record count byte.
E0BF: 32E3E9  		ld	(savnrec),a
E0C2: EB      		ex	de,hl
E0C3: 7E      		ld	a,(hl)		;get and store next record number byte.
E0C4: 32E1E9  		ld	(savnxt),a
E0C7: CDA6E0  		call	setext		;point to extent byte.
E0CA: 3AC5E9  		ld	a,(extmask)	;get extent mask.
E0CD: A6      		and	(hl)
E0CE: 32E2E9  		ld	(savext),a	;and save extent here.
E0D1: C9      		ret	
              	;
              	;   set the next record to access. if (mode) is set to 2, then
              	; the last record byte (savnrec) has the correct number to access.
              	; for sequential access, (mode) will be equal to 1.
              	;
E0D2: CDAEE0  	setnrec:call	sethlde
E0D5: 3AD5E9  		ld	a,(mode)	;get sequential flag (=1).
E0D8: FE02    		cp	2		;a 2 indicates that no adder is needed.
E0DA: C2DEE0  		jp	nz,stnrec1
E0DD: AF      		xor	a		;clear adder (random access?).
E0DE: 4F      	stnrec1:ld	c,a
E0DF: 3AE3E9  		ld	a,(savnrec)	;get last record number.
E0E2: 81      		add	a,c		;increment record count.
E0E3: 77      		ld	(hl),a		;and set fcb's next record byte.
E0E4: EB      		ex	de,hl
E0E5: 3AE1E9  		ld	a,(savnxt)	;get next record byte from storage.
E0E8: 77      		ld	(hl),a		;and put this into fcb as number of records used.
E0E9: C9      		ret	
              	;
              	;   shift (hl) right (c) bits.
              	;
E0EA: 0C      	shiftr:	inc	c
E0EB: 0D      	shiftr1:dec	c
E0EC: C8      		ret	z
E0ED: 7C      		ld	a,h
E0EE: B7      		or	a
E0EF: 1F      		rra	
E0F0: 67      		ld	h,a
E0F1: 7D      		ld	a,l
E0F2: 1F      		rra	
E0F3: 6F      		ld	l,a
E0F4: C3EBE0  		jp	shiftr1
              	;
              	;   compute the check-sum for the directory buffer. return
              	; integer sum in (a).
              	;
E0F7: 0E80    	checksum: ld	c,128		;length of buffer.
E0F9: 2AB9E9  		ld	hl,(dirbuf)	;get its location.
E0FC: AF      		xor	a		;clear summation byte.
E0FD: 86      	chksum1:add	a,(hl)		;and compute sum ignoring carries.
E0FE: 23      		inc	hl
E0FF: 0D      		dec	c
E100: C2FDE0  		jp	nz,chksum1
E103: C9      		ret	
              	;
              	;   shift (hl) left (c) bits.
              	;
E104: 0C      	shiftl:	inc	c
E105: 0D      	shiftl1:dec	c
E106: C8      		ret	z
E107: 29      		add	hl,hl		;shift left 1 bit.
E108: C305E1  		jp	shiftl1
              	;
              	;   routine to set a bit in a 16 bit value contained in (bc).
              	; the bit set depends on the current drive selection.
              	;
E10B: C5      	setbit:	push	bc		;save 16 bit word.
E10C: 3A42DF  		ld	a,(active)	;get active drive.
E10F: 4F      		ld	c,a
E110: 210100  		ld	hl,1
E113: CD04E1  		call	shiftl		;shift bit 0 into place.
E116: C1      		pop	bc		;now 'or' this with the original word.
E117: 79      		ld	a,c
E118: B5      		or	l
E119: 6F      		ld	l,a		;low byte done, do high byte.
E11A: 78      		ld	a,b
E11B: B4      		or	h
E11C: 67      		ld	h,a
E11D: C9      		ret	
              	;
              	;   extract the write protect status bit for the current drive.
              	; the result is returned in (a), bit 0.
              	;
E11E: 2AADE9  	getwprt:ld	hl,(wrtprt)	;get status bytes.
E121: 3A42DF  		ld	a,(active)	;which drive is current?
E124: 4F      		ld	c,a
E125: CDEAE0  		call	shiftr		;shift status such that bit 0 is the
E128: 7D      		ld	a,l		;one of interest for this drive.
E129: E601    		and	01h		;and isolate it.
E12B: C9      		ret	
              	;
              	;   function to write protect the current disk.
              	;
E12C: 21ADE9  	wrtprtd:ld	hl,wrtprt	;point to status word.
E12F: 4E      		ld	c,(hl)		;set (bc) equal to the status.
E130: 23      		inc	hl
E131: 46      		ld	b,(hl)
E132: CD0BE1  		call	setbit		;and set this bit according to current drive.
E135: 22ADE9  		ld	(wrtprt),hl	;then save.
E138: 2AC8E9  		ld	hl,(dirsize)	;now save directory size limit.
E13B: 23      		inc	hl		;remember the last one.
E13C: EB      		ex	de,hl
E13D: 2AB3E9  		ld	hl,(scratch1)	;and store it here.
E140: 73      		ld	(hl),e		;put low byte.
E141: 23      		inc	hl
E142: 72      		ld	(hl),d		;then high byte.
E143: C9      		ret	
              	;
              	;   check for a read only file.
              	;
E144: CD5EE1  	chkrofl:call	fcb2hl		;set (hl) to file entry in directory buffer.
E147: 110900  	ckrof1:	ld	de,9		;look at bit 7 of the ninth byte.
E14A: 19      		add	hl,de
E14B: 7E      		ld	a,(hl)
E14C: 17      		rla	
E14D: D0      		ret	nc		;return if ok.
E14E: 210FDC  		ld	hl,rofile	;else, print error message and terminate.
E151: C34ADF  		jp	jumphl
              	;
              	;   check the write protect status of the active disk.
              	;
E154: CD1EE1  	chkwprt:call	getwprt
E157: C8      		ret	z		;return if ok.
E158: 210DDC  		ld	hl,rodisk	;else print message and terminate.
E15B: C34ADF  		jp	jumphl
              	;
              	;   routine to set (hl) pointing to the proper entry in the
              	; directory buffer.
              	;
E15E: 2AB9E9  	fcb2hl:	ld	hl,(dirbuf)	;get address of buffer.
E161: 3AE9E9  		ld	a,(fcbpos)	;relative position of file.
              	;
              	;   routine to add (a) to (hl).
              	;
E164: 85      	adda2hl:add	a,l
E165: 6F      		ld	l,a
E166: D0      		ret	nc
E167: 24      		inc	h		;take care of any carry.
E168: C9      		ret	
              	;
              	;   routine to get the 's2' byte from the fcb supplied in
              	; the initial parameter specification.
              	;
E169: 2A43DF  	gets2:	ld	hl,(params)	;get address of fcb.
E16C: 110E00  		ld	de,14		;relative position of 's2'.
E16F: 19      		add	hl,de
E170: 7E      		ld	a,(hl)		;extract this byte.
E171: C9      		ret	
              	;
              	;   clear the 's2' byte in the fcb.
              	;
E172: CD69E1  	clears2:call	gets2		;this sets (hl) pointing to it.
E175: 3600    		ld	(hl),0		;now clear it.
E177: C9      		ret	
              	;
              	;   set bit 7 in the 's2' byte of the fcb.
              	;
E178: CD69E1  	sets2b7:call	gets2		;get the byte.
E17B: F680    		or	80h		;and set bit 7.
E17D: 77      		ld	(hl),a		;then store.
E17E: C9      		ret	
              	;
              	;   compare (filepos) with (scratch1) and set flags based on
              	; the difference. this checks to see if there are more file
              	; names in the directory. we are at (filepos) and there are
              	; (scratch1) of them to check.
              	;
E17F: 2AEAE9  	morefls:ld	hl,(filepos)	;we are here.
E182: EB      		ex	de,hl
E183: 2AB3E9  		ld	hl,(scratch1)	;and don't go past here.
E186: 7B      		ld	a,e		;compute difference but don't keep.
E187: 96      		sub	(hl)
E188: 23      		inc	hl
E189: 7A      		ld	a,d
E18A: 9E      		sbc	a,(hl)		;set carry if no more names.
E18B: C9      		ret	
              	;
              	;   call this routine to prevent (scratch1) from being greater
              	; than (filepos).
              	;
E18C: CD7FE1  	chknmbr:call	morefls		;scratch1 too big?
E18F: D8      		ret	c
E190: 13      		inc	de		;yes, reset it to (filepos).
E191: 72      		ld	(hl),d
E192: 2B      		dec	hl
E193: 73      		ld	(hl),e
E194: C9      		ret	
              	;
              	;   compute (hl)=(de)-(hl)
              	;
E195: 7B      	subhl:	ld	a,e		;compute difference.
E196: 95      		sub	l
E197: 6F      		ld	l,a		;store low byte.
E198: 7A      		ld	a,d
E199: 9C      		sbc	a,h
E19A: 67      		ld	h,a		;and then high byte.
E19B: C9      		ret	
              	;
              	;   set the directory checksum byte.
              	;
E19C: 0EFF    	setdir:	ld	c,0ffh
              	;
              	;   routine to set or compare the directory checksum byte. if
              	; (c)=0ffh, then this will set the checksum byte. else the byte
              	; will be checked. if the check fails (the disk has been changed),
              	; then this disk will be write protected.
              	;
E19E: 2AECE9  	checkdir: ld	hl,(cksumtbl)
E1A1: EB      		ex	de,hl
E1A2: 2ACCE9  		ld	hl,(alloc1)
E1A5: CD95E1  		call	subhl
E1A8: D0      		ret	nc		;ok if (cksumtbl) > (alloc1), so return.
E1A9: C5      		push	bc
E1AA: CDF7E0  		call	checksum	;else compute checksum.
E1AD: 2ABDE9  		ld	hl,(chkvect)	;get address of checksum table.
E1B0: EB      		ex	de,hl
E1B1: 2AECE9  		ld	hl,(cksumtbl)
E1B4: 19      		add	hl,de		;set (hl) to point to byte for this drive.
E1B5: C1      		pop	bc
E1B6: 0C      		inc	c		;set or check ?
E1B7: CAC4E1  		jp	z,chkdir1
E1BA: BE      		cp	(hl)		;check them.
E1BB: C8      		ret	z		;return if they are the same.
E1BC: CD7FE1  		call	morefls		;not the same, do we care?
E1BF: D0      		ret	nc
E1C0: CD2CE1  		call	wrtprtd		;yes, mark this as write protected.
E1C3: C9      		ret	
E1C4: 77      	chkdir1:ld	(hl),a		;just set the byte.
E1C5: C9      		ret	
              	;
              	;   do a write to the directory of the current disk.
              	;
E1C6: CD9CE1  	dirwrite: call	setdir		;set checksum byte.
E1C9: CDE0E1  		call	dirdma		;set directory dma address.
E1CC: 0E01    		ld	c,1		;tell the bios to actually write.
E1CE: CDB8DF  		call	dowrite		;then do the write.
E1D1: C3DAE1  		jp	defdma
              	;
              	;   read from the directory.
              	;
E1D4: CDE0E1  	dirread:call	dirdma		;set the directory dma address.
E1D7: CDB2DF  		call	doread		;and read it.
              	;
              	;   routine to set the dma address to the users choice.
              	;
E1DA: 21B1E9  	defdma:	ld	hl,userdma	;reset the default dma address and return.
E1DD: C3E3E1  		jp	dirdma1
              	;
              	;   routine to set the dma address for directory work.
              	;
E1E0: 21B9E9  	dirdma:	ld	hl,dirbuf
              	;
              	;   set the dma address. on entry, (hl) points to
              	; word containing the desired dma address.
              	;
E1E3: 4E      	dirdma1:ld	c,(hl)
E1E4: 23      		inc	hl
E1E5: 46      		ld	b,(hl)		;setup (bc) and go to the bios to set it.
E1E6: C304EB  		jp	setdma
              	;
              	;   move the directory buffer into user's dma space.
              	;
E1E9: 2AB9E9  	movedir:ld	hl,(dirbuf)	;buffer is located here, and
E1EC: EB      		ex	de,hl
E1ED: 2AB1E9  		ld	hl,(userdma)	; put it here.
E1F0: 0E80    		ld	c,128		;this is its length.
E1F2: C34FDF  		jp	de2hl		;move it now and return.
              	;
              	;   check (filepos) and set the zero flag if it equals 0ffffh.
              	;
E1F5: 21EAE9  	ckfilpos: ld	hl,filepos
E1F8: 7E      		ld	a,(hl)
E1F9: 23      		inc	hl
E1FA: BE      		cp	(hl)		;are both bytes the same?
E1FB: C0      		ret	nz
E1FC: 3C      		inc	a		;yes, but are they each 0ffh?
E1FD: C9      		ret	
              	;
              	;   set location (filepos) to 0ffffh.
              	;
E1FE: 21FFFF  	stfilpos: ld	hl,0ffffh
E201: 22EAE9  		ld	(filepos),hl
E204: C9      		ret	
              	;
              	;   move on to the next file position within the current
              	; directory buffer. if no more exist, set pointer to 0ffffh
              	; and the calling routine will check for this. enter with (c)
              	; equal to 0ffh to cause the checksum byte to be set, else we
              	; will check this disk and set write protect if checksums are
              	; not the same (applies only if another directory sector must
              	; be read).
              	;
E205: 2AC8E9  	nxentry:ld	hl,(dirsize)	;get directory entry size limit.
E208: EB      		ex	de,hl
E209: 2AEAE9  		ld	hl,(filepos)	;get current count.
E20C: 23      		inc	hl		;go on to the next one.
E20D: 22EAE9  		ld	(filepos),hl
E210: CD95E1  		call	subhl		;(hl)=(dirsize)-(filepos)
E213: D219E2  		jp	nc,nxent1	;is there more room left?
E216: C3FEE1  		jp	stfilpos	;no. set this flag and return.
E219: 3AEAE9  	nxent1:	ld	a,(filepos)	;get file position within directory.
E21C: E603    		and	03h		;only look within this sector (only 4 entries fit).
E21E: 0605    		ld	b,5		;convert to relative position (32 bytes each).
E220: 87      	nxent2:	add	a,a		;note that this is not efficient code.
E221: 05      		dec	b		;5 'add a's would be better.
E222: C220E2  		jp	nz,nxent2
E225: 32E9E9  		ld	(fcbpos),a	;save it as position of fcb.
E228: B7      		or	a
E229: C0      		ret	nz		;return if we are within buffer.
E22A: C5      		push	bc
E22B: CDC3DF  		call	trksec		;we need the next directory sector.
E22E: CDD4E1  		call	dirread
E231: C1      		pop	bc
E232: C39EE1  		jp	checkdir
              	;
              	;   routine to to get a bit from the disk space allocation
              	; map. it is returned in (a), bit position 0. on entry to here,
              	; set (bc) to the block number on the disk to check.
              	; on return, (d) will contain the original bit position for
              	; this block number and (hl) will point to the address for it.
              	;
E235: 79      	ckbitmap: ld	a,c		;determine bit number of interest.
E236: E607    		and	07h		;compute (d)=(e)=(c and 7)+1.
E238: 3C      		inc	a
E239: 5F      		ld	e,a		;save particular bit number.
E23A: 57      		ld	d,a
              	;
              	;   compute (bc)=(bc)/8.
              	;
E23B: 79      		ld	a,c
E23C: 0F      		rrca			;now shift right 3 bits.
E23D: 0F      		rrca	
E23E: 0F      		rrca	
E23F: E61F    		and	1fh		;and clear bits 7,6,5.
E241: 4F      		ld	c,a
E242: 78      		ld	a,b
E243: 87      		add	a,a		;now shift (b) into bits 7,6,5.
E244: 87      		add	a,a
E245: 87      		add	a,a
E246: 87      		add	a,a
E247: 87      		add	a,a
E248: B1      		or	c		;and add in (c).
E249: 4F      		ld	c,a		;ok, (c) ha been completed.
E24A: 78      		ld	a,b		;is there a better way of doing this?
E24B: 0F      		rrca	
E24C: 0F      		rrca	
E24D: 0F      		rrca	
E24E: E61F    		and	1fh
E250: 47      		ld	b,a		;and now (b) is completed.
              	;
              	;   use this as an offset into the disk space allocation
              	; table.
              	;
E251: 2ABFE9  		ld	hl,(alocvect)
E254: 09      		add	hl,bc
E255: 7E      		ld	a,(hl)		;now get correct byte.
E256: 07      	ckbmap1:rlca			;get correct bit into position 0.
E257: 1D      		dec	e
E258: C256E2  		jp	nz,ckbmap1
E25B: C9      		ret	
              	;
              	;   set or clear the bit map such that block number (bc) will be marked
              	; as used. on entry, if (e)=0 then this bit will be cleared, if it equals
              	; 1 then it will be set (don't use anyother values).
              	;
E25C: D5      	stbitmap: push	de
E25D: CD35E2  		call	ckbitmap	;get the byte of interest.
E260: E6FE    		and	0feh		;clear the affected bit.
E262: C1      		pop	bc
E263: B1      		or	c		;and now set it acording to (c).
              	;
              	;  entry to restore the original bit position and then store
              	; in table. (a) contains the value, (d) contains the bit
              	; position (1-8), and (hl) points to the address within the
              	; space allocation table for this byte.
              	;
E264: 0F      	stbmap1:rrca			;restore original bit position.
E265: 15      		dec	d
E266: C264E2  		jp	nz,stbmap1
E269: 77      		ld	(hl),a		;and stor byte in table.
E26A: C9      		ret	
              	;
              	;   set/clear space used bits in allocation map for this file.
              	; on entry, (c)=1 to set the map and (c)=0 to clear it.
              	;
E26B: CD5EE1  	setfile:call	fcb2hl		;get address of fcb
E26E: 111000  		ld	de,16
E271: 19      		add	hl,de		;get to block number bytes.
E272: C5      		push	bc
E273: 0E11    		ld	c,17		;check all 17 bytes (max) of table.
E275: D1      	setfl1:	pop	de
E276: 0D      		dec	c		;done all bytes yet?
E277: C8      		ret	z
E278: D5      		push	de
E279: 3ADDE9  		ld	a,(bigdisk)	;check disk size for 16 bit block numbers.
E27C: B7      		or	a
E27D: CA88E2  		jp	z,setfl2
E280: C5      		push	bc		;only 8 bit numbers. set (bc) to this one.
E281: E5      		push	hl
E282: 4E      		ld	c,(hl)		;get low byte from table, always
E283: 0600    		ld	b,0		;set high byte to zero.
E285: C38EE2  		jp	setfl3
E288: 0D      	setfl2:	dec	c		;for 16 bit block numbers, adjust counter.
E289: C5      		push	bc
E28A: 4E      		ld	c,(hl)		;now get both the low and high bytes.
E28B: 23      		inc	hl
E28C: 46      		ld	b,(hl)
E28D: E5      		push	hl
E28E: 79      	setfl3:	ld	a,c		;block used?
E28F: B0      		or	b
E290: CA9DE2  		jp	z,setfl4
E293: 2AC6E9  		ld	hl,(dsksize)	;is this block number within the
E296: 7D      		ld	a,l		;space on the disk?
E297: 91      		sub	c
E298: 7C      		ld	a,h
E299: 98      		sbc	a,b
E29A: D45CE2  		call	nc,stbitmap	;yes, set the proper bit.
E29D: E1      	setfl4:	pop	hl		;point to next block number in fcb.
E29E: 23      		inc	hl
E29F: C1      		pop	bc
E2A0: C375E2  		jp	setfl1
              	;
              	;   construct the space used allocation bit map for the active
              	; drive. if a file name starts with '$' and it is under the
              	; current user number, then (status) is set to minus 1. otherwise
              	; it is not set at all.
              	;
E2A3: 2AC6E9  	bitmap:	ld	hl,(dsksize)	;compute size of allocation table.
E2A6: 0E03    		ld	c,3
E2A8: CDEAE0  		call	shiftr		;(hl)=(hl)/8.
E2AB: 23      		inc	hl		;at lease 1 byte.
E2AC: 44      		ld	b,h
E2AD: 4D      		ld	c,l		;set (bc) to the allocation table length.
              	;
              	;   initialize the bitmap for this drive. right now, the first
              	; two bytes are specified by the disk parameter block. however
              	; a patch could be entered here if it were necessary to setup
              	; this table in a special mannor. for example, the bios could
              	; determine locations of 'bad blocks' and set them as already
              	; 'used' in the map.
              	;
E2AE: 2ABFE9  		ld	hl,(alocvect)	;now zero out the table now.
E2B1: 3600    	bitmap1:ld	(hl),0
E2B3: 23      		inc	hl
E2B4: 0B      		dec	bc
E2B5: 78      		ld	a,b
E2B6: B1      		or	c
E2B7: C2B1E2  		jp	nz,bitmap1
E2BA: 2ACAE9  		ld	hl,(alloc0)	;get initial space used by directory.
E2BD: EB      		ex	de,hl
E2BE: 2ABFE9  		ld	hl,(alocvect)	;and put this into map.
E2C1: 73      		ld	(hl),e
E2C2: 23      		inc	hl
E2C3: 72      		ld	(hl),d
              	;
              	;   end of initialization portion.
              	;
E2C4: CDA1DF  		call	homedrv		;now home the drive.
E2C7: 2AB3E9  		ld	hl,(scratch1)
E2CA: 3603    		ld	(hl),3		;force next directory request to read
E2CC: 23      		inc	hl		;in a sector.
E2CD: 3600    		ld	(hl),0
E2CF: CDFEE1  		call	stfilpos	;clear initial file position also.
E2D2: 0EFF    	bitmap2:ld	c,0ffh		;read next file name in directory
E2D4: CD05E2  		call	nxentry		;and set checksum byte.
E2D7: CDF5E1  		call	ckfilpos	;is there another file?
E2DA: C8      		ret	z
E2DB: CD5EE1  		call	fcb2hl		;yes, get its address.
E2DE: 3EE5    		ld	a,0e5h
E2E0: BE      		cp	(hl)		;empty file entry?
E2E1: CAD2E2  		jp	z,bitmap2
E2E4: 3A41DF  		ld	a,(userno)	;no, correct user number?
E2E7: BE      		cp	(hl)
E2E8: C2F6E2  		jp	nz,bitmap3
E2EB: 23      		inc	hl
E2EC: 7E      		ld	a,(hl)		;yes, does name start with a '$'?
E2ED: D624    		sub	'$'
E2EF: C2F6E2  		jp	nz,bitmap3
E2F2: 3D      		dec	a		;yes, set atatus to minus one.
E2F3: 3245DF  		ld	(status),a
E2F6: 0E01    	bitmap3:ld	c,1		;now set this file's space as used in bit map.
E2F8: CD6BE2  		call	setfile
E2FB: CD8CE1  		call	chknmbr		;keep (scratch1) in bounds.
E2FE: C3D2E2  		jp	bitmap2
              	;
              	;   set the status (status) and return.
              	;
E301: 3AD4E9  	ststatus: ld	a,(fndstat)
E304: C301DF  		jp	setstat
              	;
              	;   check extents in (a) and (c). set the zero flag if they
              	; are the same. the number of 16k chunks of disk space that
              	; the directory extent covers is expressad is (extmask+1).
              	; no registers are modified.
              	;
E307: C5      	samext:	push	bc
E308: F5      		push	af
E309: 3AC5E9  		ld	a,(extmask)	;get extent mask and use it to
E30C: 2F      		cpl			;to compare both extent numbers.
E30D: 47      		ld	b,a		;save resulting mask here.
E30E: 79      		ld	a,c		;mask first extent and save in (c).
E30F: A0      		and	b
E310: 4F      		ld	c,a
E311: F1      		pop	af		;now mask second extent and compare
E312: A0      		and	b		;with the first one.
E313: 91      		sub	c
E314: E61F    		and	1fh		;(* only check buts 0-4 *)
E316: C1      		pop	bc		;the zero flag is set if they are the same.
E317: C9      		ret			;restore (bc) and return.
              	;
              	;   search for the first occurence of a file name. on entry,
              	; register (c) should contain the number of bytes of the fcb
              	; that must match.
              	;
E318: 3EFF    	findfst:ld	a,0ffh
E31A: 32D4E9  		ld	(fndstat),a
E31D: 21D8E9  		ld	hl,counter	;save character count.
E320: 71      		ld	(hl),c
E321: 2A43DF  		ld	hl,(params)	;get filename to match.
E324: 22D9E9  		ld	(savefcb),hl	;and save.
E327: CDFEE1  		call	stfilpos	;clear initial file position (set to 0ffffh).
E32A: CDA1DF  		call	homedrv		;home the drive.
              	;
              	;   entry to locate the next occurence of a filename within the
              	; directory. the disk is not expected to have been changed. if
              	; it was, then it will be write protected.
              	;
E32D: 0E00    	findnxt:ld	c,0		;write protect the disk if changed.
E32F: CD05E2  		call	nxentry		;get next filename entry in directory.
E332: CDF5E1  		call	ckfilpos	;is file position = 0ffffh?
E335: CA94E3  		jp	z,fndnxt6	;yes, exit now then.
E338: 2AD9E9  		ld	hl,(savefcb)	;set (de) pointing to filename to match.
E33B: EB      		ex	de,hl
E33C: 1A      		ld	a,(de)
E33D: FEE5    		cp	0e5h		;empty directory entry?
E33F: CA4AE3  		jp	z,fndnxt1	;(* are we trying to reserect erased entries? *)
E342: D5      		push	de
E343: CD7FE1  		call	morefls		;more files in directory?
E346: D1      		pop	de
E347: D294E3  		jp	nc,fndnxt6	;no more. exit now.
E34A: CD5EE1  	fndnxt1:call	fcb2hl		;get address of this fcb in directory.
E34D: 3AD8E9  		ld	a,(counter)	;get number of bytes (characters) to check.
E350: 4F      		ld	c,a
E351: 0600    		ld	b,0		;initialize byte position counter.
E353: 79      	fndnxt2:ld	a,c		;are we done with the compare?
E354: B7      		or	a
E355: CA83E3  		jp	z,fndnxt5
E358: 1A      		ld	a,(de)		;no, check next byte.
E359: FE3F    		cp	'?'		;don't care about this character?
E35B: CA7CE3  		jp	z,fndnxt4
E35E: 78      		ld	a,b		;get bytes position in fcb.
E35F: FE0D    		cp	13		;don't care about the thirteenth byte either.
E361: CA7CE3  		jp	z,fndnxt4
E364: FE0C    		cp	12		;extent byte?
E366: 1A      		ld	a,(de)
E367: CA73E3  		jp	z,fndnxt3
E36A: 96      		sub	(hl)		;otherwise compare characters.
E36B: E67F    		and	7fh
E36D: C22DE3  		jp	nz,findnxt	;not the same, check next entry.
E370: C37CE3  		jp	fndnxt4		;so far so good, keep checking.
E373: C5      	fndnxt3:push	bc		;check the extent byte here.
E374: 4E      		ld	c,(hl)
E375: CD07E3  		call	samext
E378: C1      		pop	bc
E379: C22DE3  		jp	nz,findnxt	;not the same, look some more.
              	;
              	;   so far the names compare. bump pointers to the next byte
              	; and continue until all (c) characters have been checked.
              	;
E37C: 13      	fndnxt4:inc	de		;bump pointers.
E37D: 23      		inc	hl
E37E: 04      		inc	b
E37F: 0D      		dec	c		;adjust character counter.
E380: C353E3  		jp	fndnxt2
E383: 3AEAE9  	fndnxt5:ld	a,(filepos)	;return the position of this entry.
E386: E603    		and	03h
E388: 3245DF  		ld	(status),a
E38B: 21D4E9  		ld	hl,fndstat
E38E: 7E      		ld	a,(hl)
E38F: 17      		rla	
E390: D0      		ret	nc
E391: AF      		xor	a
E392: 77      		ld	(hl),a
E393: C9      		ret	
              	;
              	;   filename was not found. set appropriate status.
              	;
E394: CDFEE1  	fndnxt6:call	stfilpos	;set (filepos) to 0ffffh.
E397: 3EFF    		ld	a,0ffh		;say not located.
E399: C301DF  		jp	setstat
              	;
              	;   erase files from the directory. only the first byte of the
              	; fcb will be affected. it is set to (e5).
              	;
E39C: CD54E1  	erafile:call	chkwprt		;is disk write protected?
E39F: 0E0C    		ld	c,12		;only compare file names.
E3A1: CD18E3  		call	findfst		;get first file name.
E3A4: CDF5E1  	erafil1:call	ckfilpos	;any found?
E3A7: C8      		ret	z		;nope, we must be done.
E3A8: CD44E1  		call	chkrofl		;is file read only?
E3AB: CD5EE1  		call	fcb2hl		;nope, get address of fcb and
E3AE: 36E5    		ld	(hl),0e5h	;set first byte to 'empty'.
E3B0: 0E00    		ld	c,0		;clear the space from the bit map.
E3B2: CD6BE2  		call	setfile
E3B5: CDC6E1  		call	dirwrite	;now write the directory sector back out.
E3B8: CD2DE3  		call	findnxt		;find the next file name.
E3BB: C3A4E3  		jp	erafil1		;and repeat process.
              	;
              	;   look through the space allocation map (bit map) for the
              	; next available block. start searching at block number (bc-1).
              	; the search procedure is to look for an empty block that is
              	; before the starting block. if not empty, look at a later
              	; block number. in this way, we return the closest empty block
              	; on either side of the 'target' block number. this will speed
              	; access on random devices. for serial devices, this should be
              	; changed to look in the forward direction first and then start
              	; at the front and search some more.
              	;
              	;   on return, (de)= block number that is empty and (hl) =0
              	; if no empry block was found.
              	;
E3BE: 50      	fndspace: ld	d,b		;set (de) as the block that is checked.
E3BF: 59      		ld	e,c
              	;
              	;   look before target block. registers (bc) are used as the lower
              	; pointer and (de) as the upper pointer.
              	;
E3C0: 79      	fndspa1:ld	a,c		;is block 0 specified?
E3C1: B0      		or	b
E3C2: CAD1E3  		jp	z,fndspa2
E3C5: 0B      		dec	bc		;nope, check previous block.
E3C6: D5      		push	de
E3C7: C5      		push	bc
E3C8: CD35E2  		call	ckbitmap
E3CB: 1F      		rra			;is this block empty?
E3CC: D2ECE3  		jp	nc,fndspa3	;yes. use this.
              	;
              	;   note that the above logic gets the first block that it finds
              	; that is empty. thus a file could be written 'backward' making
              	; it very slow to access. this could be changed to look for the
              	; first empty block and then continue until the start of this
              	; empty space is located and then used that starting block.
              	; this should help speed up access to some files especially on
              	; a well used disk with lots of fairly small 'holes'.
              	;
E3CF: C1      		pop	bc		;nope, check some more.
E3D0: D1      		pop	de
              	;
              	;   now look after target block.
              	;
E3D1: 2AC6E9  	fndspa2:ld	hl,(dsksize)	;is block (de) within disk limits?
E3D4: 7B      		ld	a,e
E3D5: 95      		sub	l
E3D6: 7A      		ld	a,d
E3D7: 9C      		sbc	a,h
E3D8: D2F4E3  		jp	nc,fndspa4
E3DB: 13      		inc	de		;yes, move on to next one.
E3DC: C5      		push	bc
E3DD: D5      		push	de
E3DE: 42      		ld	b,d
E3DF: 4B      		ld	c,e
E3E0: CD35E2  		call	ckbitmap	;check it.
E3E3: 1F      		rra			;empty?
E3E4: D2ECE3  		jp	nc,fndspa3
E3E7: D1      		pop	de		;nope, continue searching.
E3E8: C1      		pop	bc
E3E9: C3C0E3  		jp	fndspa1
              	;
              	;   empty block found. set it as used and return with (hl)
              	; pointing to it (true?).
              	;
E3EC: 17      	fndspa3:rla			;reset byte.
E3ED: 3C      		inc	a		;and set bit 0.
E3EE: CD64E2  		call	stbmap1		;update bit map.
E3F1: E1      		pop	hl		;set return registers.
E3F2: D1      		pop	de
E3F3: C9      		ret	
              	;
              	;   free block was not found. if (bc) is not zero, then we have
              	; not checked all of the disk space.
              	;
E3F4: 79      	fndspa4:ld	a,c
E3F5: B0      		or	b
E3F6: C2C0E3  		jp	nz,fndspa1
E3F9: 210000  		ld	hl,0		;set 'not found' status.
E3FC: C9      		ret	
              	;
              	;   move a complete fcb entry into the directory and write it.
              	;
E3FD: 0E00    	fcbset:	ld	c,0
E3FF: 1E20    		ld	e,32		;length of each entry.
              	;
              	;   move (e) bytes from the fcb pointed to by (params) into
              	; fcb in directory starting at relative byte (c). this updated
              	; directory buffer is then written to the disk.
              	;
E401: D5      	update:	push	de
E402: 0600    		ld	b,0		;set (bc) to relative byte position.
E404: 2A43DF  		ld	hl,(params)	;get address of fcb.
E407: 09      		add	hl,bc		;compute starting byte.
E408: EB      		ex	de,hl
E409: CD5EE1  		call	fcb2hl		;get address of fcb to update in directory.
E40C: C1      		pop	bc		;set (c) to number of bytes to change.
E40D: CD4FDF  		call	de2hl
E410: CDC3DF  	update1:call	trksec		;determine the track and sector affected.
E413: C3C6E1  		jp	dirwrite	;then write this sector out.
              	;
              	;   routine to change the name of all files on the disk with a
              	; specified name. the fcb contains the current name as the
              	; first 12 characters and the new name 16 bytes into the fcb.
              	;
E416: CD54E1  	chgnames: call	chkwprt		;check for a write protected disk.
E419: 0E0C    		ld	c,12		;match first 12 bytes of fcb only.
E41B: CD18E3  		call	findfst		;get first name.
E41E: 2A43DF  		ld	hl,(params)	;get address of fcb.
E421: 7E      		ld	a,(hl)		;get user number.
E422: 111000  		ld	de,16		;move over to desired name.
E425: 19      		add	hl,de
E426: 77      		ld	(hl),a		;keep same user number.
E427: CDF5E1  	chgnam1:call	ckfilpos	;any matching file found?
E42A: C8      		ret	z		;no, we must be done.
E42B: CD44E1  		call	chkrofl		;check for read only file.
E42E: 0E10    		ld	c,16		;start 16 bytes into fcb.
E430: 1E0C    		ld	e,12		;and update the first 12 bytes of directory.
E432: CD01E4  		call	update
E435: CD2DE3  		call	findnxt		;get te next file name.
E438: C327E4  		jp	chgnam1		;and continue.
              	;
              	;   update a files attributes. the procedure is to search for
              	; every file with the same name as shown in fcb (ignoring bit 7)
              	; and then to update it (which includes bit 7). no other changes
              	; are made.
              	;
E43B: 0E0C    	saveattr: ld	c,12		;match first 12 bytes.
E43D: CD18E3  		call	findfst		;look for first filename.
E440: CDF5E1  	savatr1:call	ckfilpos	;was one found?
E443: C8      		ret	z		;nope, we must be done.
E444: 0E00    		ld	c,0		;yes, update the first 12 bytes now.
E446: 1E0C    		ld	e,12
E448: CD01E4  		call	update		;update filename and write directory.
E44B: CD2DE3  		call	findnxt		;and get the next file.
E44E: C340E4  		jp	savatr1		;then continue until done.
              	;
              	;  open a file (name specified in fcb).
              	;
E451: 0E0F    	openit:	ld	c,15		;compare the first 15 bytes.
E453: CD18E3  		call	findfst		;get the first one in directory.
E456: CDF5E1  		call	ckfilpos	;any at all?
E459: C8      		ret	z
E45A: CDA6E0  	openit1:call	setext		;point to extent byte within users fcb.
E45D: 7E      		ld	a,(hl)		;and get it.
E45E: F5      		push	af		;save it and address.
E45F: E5      		push	hl
E460: CD5EE1  		call	fcb2hl		;point to fcb in directory.
E463: EB      		ex	de,hl
E464: 2A43DF  		ld	hl,(params)	;this is the users copy.
E467: 0E20    		ld	c,32		;move it into users space.
E469: D5      		push	de
E46A: CD4FDF  		call	de2hl
E46D: CD78E1  		call	sets2b7		;set bit 7 in 's2' byte (unmodified).
E470: D1      		pop	de		;now get the extent byte from this fcb.
E471: 210C00  		ld	hl,12
E474: 19      		add	hl,de
E475: 4E      		ld	c,(hl)		;into (c).
E476: 210F00  		ld	hl,15		;now get the record count byte into (b).
E479: 19      		add	hl,de
E47A: 46      		ld	b,(hl)
E47B: E1      		pop	hl		;keep the same extent as the user had originally.
E47C: F1      		pop	af
E47D: 77      		ld	(hl),a
E47E: 79      		ld	a,c		;is it the same as in the directory fcb?
E47F: BE      		cp	(hl)
E480: 78      		ld	a,b		;if yes, then use the same record count.
E481: CA8BE4  		jp	z,openit2
E484: 3E00    		ld	a,0		;if the user specified an extent greater than
E486: DA8BE4  		jp	c,openit2	;the one in the directory, then set record count to 0.
E489: 3E80    		ld	a,128		;otherwise set to maximum.
E48B: 2A43DF  	openit2:ld	hl,(params)	;set record count in users fcb to (a).
E48E: 110F00  		ld	de,15
E491: 19      		add	hl,de		;compute relative position.
E492: 77      		ld	(hl),a		;and set the record count.
E493: C9      		ret	
              	;
              	;   move two bytes from (de) to (hl) if (and only if) (hl)
              	; point to a zero value (16 bit).
              	;   return with zero flag set it (de) was moved. registers (de)
              	; and (hl) are not changed. however (a) is.
              	;
E494: 7E      	moveword: ld	a,(hl)		;check for a zero word.
E495: 23      		inc	hl
E496: B6      		or	(hl)		;both bytes zero?
E497: 2B      		dec	hl
E498: C0      		ret	nz		;nope, just return.
E499: 1A      		ld	a,(de)		;yes, move two bytes from (de) into
E49A: 77      		ld	(hl),a		;this zero space.
E49B: 13      		inc	de
E49C: 23      		inc	hl
E49D: 1A      		ld	a,(de)
E49E: 77      		ld	(hl),a
E49F: 1B      		dec	de		;don't disturb these registers.
E4A0: 2B      		dec	hl
E4A1: C9      		ret	
              	;
              	;   get here to close a file specified by (fcb).
              	;
E4A2: AF      	closeit:xor	a		;clear status and file position bytes.
E4A3: 3245DF  		ld	(status),a
E4A6: 32EAE9  		ld	(filepos),a
E4A9: 32EBE9  		ld	(filepos+1),a
E4AC: CD1EE1  		call	getwprt		;get write protect bit for this drive.
E4AF: C0      		ret	nz		;just return if it is set.
E4B0: CD69E1  		call	gets2		;else get the 's2' byte.
E4B3: E680    		and	80h		;and look at bit 7 (file unmodified?).
E4B5: C0      		ret	nz		;just return if set.
E4B6: 0E0F    		ld	c,15		;else look up this file in directory.
E4B8: CD18E3  		call	findfst
E4BB: CDF5E1  		call	ckfilpos	;was it found?
E4BE: C8      		ret	z		;just return if not.
E4BF: 011000  		ld	bc,16		;set (hl) pointing to records used section.
E4C2: CD5EE1  		call	fcb2hl
E4C5: 09      		add	hl,bc
E4C6: EB      		ex	de,hl
E4C7: 2A43DF  		ld	hl,(params)	;do the same for users specified fcb.
E4CA: 09      		add	hl,bc
E4CB: 0E10    		ld	c,16		;this many bytes are present in this extent.
E4CD: 3ADDE9  	closeit1: ld	a,(bigdisk)	;8 or 16 bit record numbers?
E4D0: B7      		or	a
E4D1: CAE8E4  		jp	z,closeit4
E4D4: 7E      		ld	a,(hl)		;just 8 bit. get one from users fcb.
E4D5: B7      		or	a
E4D6: 1A      		ld	a,(de)		;now get one from directory fcb.
E4D7: C2DBE4  		jp	nz,closeit2
E4DA: 77      		ld	(hl),a		;users byte was zero. update from directory.
E4DB: B7      	closeit2: or	a
E4DC: C2E1E4  		jp	nz,closeit3
E4DF: 7E      		ld	a,(hl)		;directories byte was zero, update from users fcb.
E4E0: 12      		ld	(de),a
E4E1: BE      	closeit3: cp	(hl)		;if neither one of these bytes were zero,
E4E2: C21FE5  		jp	nz,closeit7	;then close error if they are not the same.
E4E5: C3FDE4  		jp	closeit5	;ok so far, get to next byte in fcbs.
E4E8: CD94E4  	closeit4: call	moveword	;update users fcb if it is zero.
E4EB: EB      		ex	de,hl
E4EC: CD94E4  		call	moveword	;update directories fcb if it is zero.
E4EF: EB      		ex	de,hl
E4F0: 1A      		ld	a,(de)		;if these two values are no different,
E4F1: BE      		cp	(hl)		;then a close error occured.
E4F2: C21FE5  		jp	nz,closeit7
E4F5: 13      		inc	de		;check second byte.
E4F6: 23      		inc	hl
E4F7: 1A      		ld	a,(de)
E4F8: BE      		cp	(hl)
E4F9: C21FE5  		jp	nz,closeit7
E4FC: 0D      		dec	c		;remember 16 bit values.
E4FD: 13      	closeit5: inc	de		;bump to next item in table.
E4FE: 23      		inc	hl
E4FF: 0D      		dec	c		;there are 16 entries only.
E500: C2CDE4  		jp	nz,closeit1	;continue if more to do.
E503: 01ECFF  		ld	bc,0ffech	;backup 20 places (extent byte).
E506: 09      		add	hl,bc
E507: EB      		ex	de,hl
E508: 09      		add	hl,bc
E509: 1A      		ld	a,(de)
E50A: BE      		cp	(hl)		;directory's extent already greater than the
E50B: DA17E5  		jp	c,closeit6	;users extent?
E50E: 77      		ld	(hl),a		;no, update directory extent.
E50F: 010300  		ld	bc,3		;and update the record count byte in
E512: 09      		add	hl,bc		;directories fcb.
E513: EB      		ex	de,hl
E514: 09      		add	hl,bc
E515: 7E      		ld	a,(hl)		;get from user.
E516: 12      		ld	(de),a		;and put in directory.
E517: 3EFF    	closeit6: ld	a,0ffh		;set 'was open and is now closed' byte.
E519: 32D2E9  		ld	(closeflg),a
E51C: C310E4  		jp	update1		;update the directory now.
E51F: 2145DF  	closeit7: ld	hl,status	;set return status and then return.
E522: 35      		dec	(hl)
E523: C9      		ret	
              	;
              	;   routine to get the next empty space in the directory. it
              	; will then be cleared for use.
              	;
E524: CD54E1  	getempty: call	chkwprt		;make sure disk is not write protected.
E527: 2A43DF  		ld	hl,(params)	;save current parameters (fcb).
E52A: E5      		push	hl
E52B: 21ACE9  		ld	hl,emptyfcb	;use special one for empty space.
E52E: 2243DF  		ld	(params),hl
E531: 0E01    		ld	c,1		;search for first empty spot in directory.
E533: CD18E3  		call	findfst		;(* only check first byte *)
E536: CDF5E1  		call	ckfilpos	;none?
E539: E1      		pop	hl
E53A: 2243DF  		ld	(params),hl	;restore original fcb address.
E53D: C8      		ret	z		;return if no more space.
E53E: EB      		ex	de,hl
E53F: 210F00  		ld	hl,15		;point to number of records for this file.
E542: 19      		add	hl,de
E543: 0E11    		ld	c,17		;and clear all of this space.
E545: AF      		xor	a
E546: 77      	getmt1:	ld	(hl),a
E547: 23      		inc	hl
E548: 0D      		dec	c
E549: C246E5  		jp	nz,getmt1
E54C: 210D00  		ld	hl,13		;clear the 's1' byte also.
E54F: 19      		add	hl,de
E550: 77      		ld	(hl),a
E551: CD8CE1  		call	chknmbr		;keep (scratch1) within bounds.
E554: CDFDE3  		call	fcbset		;write out this fcb entry to directory.
E557: C378E1  		jp	sets2b7		;set 's2' byte bit 7 (unmodified at present).
              	;
              	;   routine to close the current extent and open the next one
              	; for reading.
              	;
E55A: AF      	getnext:xor	a
E55B: 32D2E9  		ld	(closeflg),a	;clear close flag.
E55E: CDA2E4  		call	closeit		;close this extent.
E561: CDF5E1  		call	ckfilpos
E564: C8      		ret	z		;not there???
E565: 2A43DF  		ld	hl,(params)	;get extent byte.
E568: 010C00  		ld	bc,12
E56B: 09      		add	hl,bc
E56C: 7E      		ld	a,(hl)		;and increment it.
E56D: 3C      		inc	a
E56E: E61F    		and	1fh		;keep within range 0-31.
E570: 77      		ld	(hl),a
E571: CA83E5  		jp	z,gtnext1	;overflow?
E574: 47      		ld	b,a		;mask extent byte.
E575: 3AC5E9  		ld	a,(extmask)
E578: A0      		and	b
E579: 21D2E9  		ld	hl,closeflg	;check close flag (0ffh is ok).
E57C: A6      		and	(hl)
E57D: CA8EE5  		jp	z,gtnext2	;if zero, we must read in next extent.
E580: C3ACE5  		jp	gtnext3		;else, it is already in memory.
E583: 010200  	gtnext1:ld	bc,2		;point to the 's2' byte.
E586: 09      		add	hl,bc
E587: 34      		inc	(hl)		;and bump it.
E588: 7E      		ld	a,(hl)		;too many extents?
E589: E60F    		and	0fh
E58B: CAB6E5  		jp	z,gtnext5	;yes, set error code.
              	;
              	;   get here to open the next extent.
              	;
E58E: 0E0F    	gtnext2:ld	c,15		;set to check first 15 bytes of fcb.
E590: CD18E3  		call	findfst		;find the first one.
E593: CDF5E1  		call	ckfilpos	;none available?
E596: C2ACE5  		jp	nz,gtnext3
E599: 3AD3E9  		ld	a,(rdwrtflg)	;no extent present. can we open an empty one?
E59C: 3C      		inc	a		;0ffh means reading (so not possible).
E59D: CAB6E5  		jp	z,gtnext5	;or an error.
E5A0: CD24E5  		call	getempty	;we are writing, get an empty entry.
E5A3: CDF5E1  		call	ckfilpos	;none?
E5A6: CAB6E5  		jp	z,gtnext5	;error if true.
E5A9: C3AFE5  		jp	gtnext4		;else we are almost done.
E5AC: CD5AE4  	gtnext3:call	openit1		;open this extent.
E5AF: CDBBE0  	gtnext4:call	strdata		;move in updated data (rec #, extent #, etc.)
E5B2: AF      		xor	a		;clear status and return.
E5B3: C301DF  		jp	setstat
              	;
              	;   error in extending the file. too many extents were needed
              	; or not enough space on the disk.
              	;
E5B6: CD05DF  	gtnext5:call	ioerr1		;set error code, clear bit 7 of 's2'
E5B9: C378E1  		jp	sets2b7		;so this is not written on a close.
              	;
              	;   read a sequential file.
              	;
E5BC: 3E01    	rdseq:	ld	a,1		;set sequential access mode.
E5BE: 32D5E9  		ld	(mode),a
E5C1: 3EFF    	rdseq1:	ld	a,0ffh		;don't allow reading unwritten space.
E5C3: 32D3E9  		ld	(rdwrtflg),a
E5C6: CDBBE0  		call	strdata		;put rec# and ext# into fcb.
E5C9: 3AE3E9  		ld	a,(savnrec)	;get next record to read.
E5CC: 21E1E9  		ld	hl,savnxt	;get number of records in extent.
E5CF: BE      		cp	(hl)		;within this extent?
E5D0: DAE6E5  		jp	c,rdseq2
E5D3: FE80    		cp	128		;no. is this extent fully used?
E5D5: C2FBE5  		jp	nz,rdseq3	;no. end-of-file.
E5D8: CD5AE5  		call	getnext		;yes, open the next one.
E5DB: AF      		xor	a		;reset next record to read.
E5DC: 32E3E9  		ld	(savnrec),a
E5DF: 3A45DF  		ld	a,(status)	;check on open, successful?
E5E2: B7      		or	a
E5E3: C2FBE5  		jp	nz,rdseq3	;no, error.
E5E6: CD77E0  	rdseq2:	call	comblk		;ok. compute block number to read.
E5E9: CD84E0  		call	chkblk		;check it. within bounds?
E5EC: CAFBE5  		jp	z,rdseq3	;no, error.
E5EF: CD8AE0  		call	logical		;convert (blknmbr) to logical sector (128 byte).
E5F2: CDD1DF  		call	trksec1		;set the track and sector for this block #.
E5F5: CDB2DF  		call	doread		;and read it.
E5F8: C3D2E0  		jp	setnrec		;and set the next record to be accessed.
              	;
              	;   read error occured. set status and return.
              	;
E5FB: C305DF  	rdseq3:	jp	ioerr1
              	;
              	;   write the next sequential record.
              	;
E5FE: 3E01    	wtseq:	ld	a,1		;set sequential access mode.
E600: 32D5E9  		ld	(mode),a
E603: 3E00    	wtseq1:	ld	a,0		;allow an addition empty extent to be opened.
E605: 32D3E9  		ld	(rdwrtflg),a
E608: CD54E1  		call	chkwprt		;check write protect status.
E60B: 2A43DF  		ld	hl,(params)
E60E: CD47E1  		call	ckrof1		;check for read only file, (hl) already set to fcb.
E611: CDBBE0  		call	strdata		;put updated data into fcb.
E614: 3AE3E9  		ld	a,(savnrec)	;get record number to write.
E617: FE80    		cp	128		;within range?
E619: D205DF  		jp	nc,ioerr1	;no, error(?).
E61C: CD77E0  		call	comblk		;compute block number.
E61F: CD84E0  		call	chkblk		;check number.
E622: 0E00    		ld	c,0		;is there one to write to?
E624: C26EE6  		jp	nz,wtseq6	;yes, go do it.
E627: CD3EE0  		call	getblock	;get next block number within fcb to use.
E62A: 32D7E9  		ld	(relblock),a	;and save.
E62D: 010000  		ld	bc,0		;start looking for space from the start
E630: B7      		or	a		;if none allocated as yet.
E631: CA3BE6  		jp	z,wtseq2
E634: 4F      		ld	c,a		;extract previous block number from fcb
E635: 0B      		dec	bc		;so we can be closest to it.
E636: CD5EE0  		call	extblk
E639: 44      		ld	b,h
E63A: 4D      		ld	c,l
E63B: CDBEE3  	wtseq2:	call	fndspace	;find the next empty block nearest number (bc).
E63E: 7D      		ld	a,l		;check for a zero number.
E63F: B4      		or	h
E640: C248E6  		jp	nz,wtseq3
E643: 3E02    		ld	a,2		;no more space?
E645: C301DF  		jp	setstat
E648: 22E5E9  	wtseq3:	ld	(blknmbr),hl	;save block number to access.
E64B: EB      		ex	de,hl		;put block number into (de).
E64C: 2A43DF  		ld	hl,(params)	;now we must update the fcb for this
E64F: 011000  		ld	bc,16		;newly allocated block.
E652: 09      		add	hl,bc
E653: 3ADDE9  		ld	a,(bigdisk)	;8 or 16 bit block numbers?
E656: B7      		or	a
E657: 3AD7E9  		ld	a,(relblock)	;(* update this entry *)
E65A: CA64E6  		jp	z,wtseq4	;zero means 16 bit ones.
E65D: CD64E1  		call	adda2hl		;(hl)=(hl)+(a)
E660: 73      		ld	(hl),e		;store new block number.
E661: C36CE6  		jp	wtseq5
E664: 4F      	wtseq4:	ld	c,a		;compute spot in this 16 bit table.
E665: 0600    		ld	b,0
E667: 09      		add	hl,bc
E668: 09      		add	hl,bc
E669: 73      		ld	(hl),e		;stuff block number (de) there.
E66A: 23      		inc	hl
E66B: 72      		ld	(hl),d
E66C: 0E02    	wtseq5:	ld	c,2		;set (c) to indicate writing to un-used disk space.
E66E: 3A45DF  	wtseq6:	ld	a,(status)	;are we ok so far?
E671: B7      		or	a
E672: C0      		ret	nz
E673: C5      		push	bc		;yes, save write flag for bios (register c).
E674: CD8AE0  		call	logical		;convert (blknmbr) over to loical sectors.
E677: 3AD5E9  		ld	a,(mode)	;get access mode flag (1=sequential,
E67A: 3D      		dec	a		;0=random, 2=special?).
E67B: 3D      		dec	a
E67C: C2BBE6  		jp	nz,wtseq9
              	;
              	;   special random i/o from function #40. maybe for m/pm, but the
              	; current block, if it has not been written to, will be zeroed
              	; out and then written (reason?).
              	;
E67F: C1      		pop	bc
E680: C5      		push	bc
E681: 79      		ld	a,c		;get write status flag (2=writing unused space).
E682: 3D      		dec	a
E683: 3D      		dec	a
E684: C2BBE6  		jp	nz,wtseq9
E687: E5      		push	hl
E688: 2AB9E9  		ld	hl,(dirbuf)	;zero out the directory buffer.
E68B: 57      		ld	d,a		;note that (a) is zero here.
E68C: 77      	wtseq7:	ld	(hl),a
E68D: 23      		inc	hl
E68E: 14      		inc	d		;do 128 bytes.
E68F: F28CE6  		jp	p,wtseq7
E692: CDE0E1  		call	dirdma		;tell the bios the dma address for directory access.
E695: 2AE7E9  		ld	hl,(logsect)	;get sector that starts current block.
E698: 0E02    		ld	c,2		;set 'writing to unused space' flag.
E69A: 22E5E9  	wtseq8:	ld	(blknmbr),hl	;save sector to write.
E69D: C5      		push	bc
E69E: CDD1DF  		call	trksec1		;determine its track and sector numbers.
E6A1: C1      		pop	bc
E6A2: CDB8DF  		call	dowrite		;now write out 128 bytes of zeros.
E6A5: 2AE5E9  		ld	hl,(blknmbr)	;get sector number.
E6A8: 0E00    		ld	c,0		;set normal write flag.
E6AA: 3AC4E9  		ld	a,(blkmask)	;determine if we have written the entire
E6AD: 47      		ld	b,a		;physical block.
E6AE: A5      		and	l
E6AF: B8      		cp	b
E6B0: 23      		inc	hl		;prepare for the next one.
E6B1: C29AE6  		jp	nz,wtseq8	;continue until (blkmask+1) sectors written.
E6B4: E1      		pop	hl		;reset next sector number.
E6B5: 22E5E9  		ld	(blknmbr),hl
E6B8: CDDAE1  		call	defdma		;and reset dma address.
              	;
              	;   normal disk write. set the desired track and sector then
              	; do the actual write.
              	;
E6BB: CDD1DF  	wtseq9:	call	trksec1		;determine track and sector for this write.
E6BE: C1      		pop	bc		;get write status flag.
E6BF: C5      		push	bc
E6C0: CDB8DF  		call	dowrite		;and write this out.
E6C3: C1      		pop	bc
E6C4: 3AE3E9  		ld	a,(savnrec)	;get number of records in file.
E6C7: 21E1E9  		ld	hl,savnxt	;get last record written.
E6CA: BE      		cp	(hl)
E6CB: DAD2E6  		jp	c,wtseq10
E6CE: 77      		ld	(hl),a		;we have to update record count.
E6CF: 34      		inc	(hl)
E6D0: 0E02    		ld	c,2
              	;
              	;*   this area has been patched to correct disk update problem
              	;* when using blocking and de-blocking in the bios.
              	;
E6D2: 00      	wtseq10:nop			;was 'dcr c'
E6D3: 00      		nop			;was 'dcr c'
E6D4: 210000  		ld	hl,0		;was 'jnz wtseq99'
              	;
              	; *   end of patch.
              	;
E6D7: F5      		push	af
E6D8: CD69E1  		call	gets2		;set 'extent written to' flag.
E6DB: E67F    		and	7fh		;(* clear bit 7 *)
E6DD: 77      		ld	(hl),a
E6DE: F1      		pop	af		;get record count for this extent.
E6DF: FE7F    	wtseq99:cp	127		;is it full?
E6E1: C200E7  		jp	nz,wtseq12
E6E4: 3AD5E9  		ld	a,(mode)	;yes, are we in sequential mode?
E6E7: FE01    		cp	1
E6E9: C200E7  		jp	nz,wtseq12
E6EC: CDD2E0  		call	setnrec		;yes, set next record number.
E6EF: CD5AE5  		call	getnext		;and get next empty space in directory.
E6F2: 2145DF  		ld	hl,status	;ok?
E6F5: 7E      		ld	a,(hl)
E6F6: B7      		or	a
E6F7: C2FEE6  		jp	nz,wtseq11
E6FA: 3D      		dec	a		;yes, set record count to -1.
E6FB: 32E3E9  		ld	(savnrec),a
E6FE: 3600    	wtseq11:ld	(hl),0		;clear status.
E700: C3D2E0  	wtseq12:jp	setnrec		;set next record to access.
              	;
              	;   for random i/o, set the fcb for the desired record number
              	; based on the 'r0,r1,r2' bytes. these bytes in the fcb are
              	; used as follows:
              	;
              	;       fcb+35            fcb+34            fcb+33
              	;  |     'r-2'      |      'r-1'      |      'r-0'     |
              	;  |7             0 | 7             0 | 7             0|
              	;  |0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0|
              	;  |    overflow   | | extra |  extent   |   record #  |
              	;  | ______________| |_extent|__number___|_____________|
              	;                     also 's2'
              	;
              	;   on entry, register (c) contains 0ffh if this is a read
              	; and thus we can not access unwritten disk space. otherwise,
              	; another extent will be opened (for writing) if required.
              	;
E703: AF      	position: xor	a		;set random i/o flag.
E704: 32D5E9  		ld	(mode),a
              	;
              	;   special entry (function #40). m/pm ?
              	;
E707: C5      	positn1:push	bc		;save read/write flag.
E708: 2A43DF  		ld	hl,(params)	;get address of fcb.
E70B: EB      		ex	de,hl
E70C: 212100  		ld	hl,33		;now get byte 'r0'.
E70F: 19      		add	hl,de
E710: 7E      		ld	a,(hl)
E711: E67F    		and	7fh		;keep bits 0-6 for the record number to access.
E713: F5      		push	af
E714: 7E      		ld	a,(hl)		;now get bit 7 of 'r0' and bits 0-3 of 'r1'.
E715: 17      		rla	
E716: 23      		inc	hl
E717: 7E      		ld	a,(hl)
E718: 17      		rla	
E719: E61F    		and	1fh		;and save this in bits 0-4 of (c).
E71B: 4F      		ld	c,a		;this is the extent byte.
E71C: 7E      		ld	a,(hl)		;now get the extra extent byte.
E71D: 1F      		rra	
E71E: 1F      		rra	
E71F: 1F      		rra	
E720: 1F      		rra	
E721: E60F    		and	0fh
E723: 47      		ld	b,a		;and save it in (b).
E724: F1      		pop	af		;get record number back to (a).
E725: 23      		inc	hl		;check overflow byte 'r2'.
E726: 6E      		ld	l,(hl)
E727: 2C      		inc	l
E728: 2D      		dec	l
E729: 2E06    		ld	l,6		;prepare for error.
E72B: C28BE7  		jp	nz,positn5	;out of disk space error.
E72E: 212000  		ld	hl,32		;store record number into fcb.
E731: 19      		add	hl,de
E732: 77      		ld	(hl),a
E733: 210C00  		ld	hl,12		;and now check the extent byte.
E736: 19      		add	hl,de
E737: 79      		ld	a,c
E738: 96      		sub	(hl)		;same extent as before?
E739: C247E7  		jp	nz,positn2
E73C: 210E00  		ld	hl,14		;yes, check extra extent byte 's2' also.
E73F: 19      		add	hl,de
E740: 78      		ld	a,b
E741: 96      		sub	(hl)
E742: E67F    		and	7fh
E744: CA7FE7  		jp	z,positn3	;same, we are almost done then.
              	;
              	;  get here when another extent is required.
              	;
E747: C5      	positn2:push	bc
E748: D5      		push	de
E749: CDA2E4  		call	closeit		;close current extent.
E74C: D1      		pop	de
E74D: C1      		pop	bc
E74E: 2E03    		ld	l,3		;prepare for error.
E750: 3A45DF  		ld	a,(status)
E753: 3C      		inc	a
E754: CA84E7  		jp	z,positn4	;close error.
E757: 210C00  		ld	hl,12		;put desired extent into fcb now.
E75A: 19      		add	hl,de
E75B: 71      		ld	(hl),c
E75C: 210E00  		ld	hl,14		;and store extra extent byte 's2'.
E75F: 19      		add	hl,de
E760: 70      		ld	(hl),b
E761: CD51E4  		call	openit		;try and get this extent.
E764: 3A45DF  		ld	a,(status)	;was it there?
E767: 3C      		inc	a
E768: C27FE7  		jp	nz,positn3
E76B: C1      		pop	bc		;no. can we create a new one (writing?).
E76C: C5      		push	bc
E76D: 2E04    		ld	l,4		;prepare for error.
E76F: 0C      		inc	c
E770: CA84E7  		jp	z,positn4	;nope, reading unwritten space error.
E773: CD24E5  		call	getempty	;yes we can, try to find space.
E776: 2E05    		ld	l,5		;prepare for error.
E778: 3A45DF  		ld	a,(status)
E77B: 3C      		inc	a
E77C: CA84E7  		jp	z,positn4	;out of space?
              	;
              	;   normal return location. clear error code and return.
              	;
E77F: C1      	positn3:pop	bc		;restore stack.
E780: AF      		xor	a		;and clear error code byte.
E781: C301DF  		jp	setstat
              	;
              	;   error. set the 's2' byte to indicate this (why?).
              	;
E784: E5      	positn4:push	hl
E785: CD69E1  		call	gets2
E788: 36C0    		ld	(hl),0c0h
E78A: E1      		pop	hl
              	;
              	;   return with error code (presently in l).
              	;
E78B: C1      	positn5:pop	bc
E78C: 7D      		ld	a,l		;get error code.
E78D: 3245DF  		ld	(status),a
E790: C378E1  		jp	sets2b7
              	;
              	;   read a random record.
              	;
E793: 0EFF    	readran:ld	c,0ffh		;set 'read' status.
E795: CD03E7  		call	position	;position the file to proper record.
E798: CCC1E5  		call	z,rdseq1	;and read it as usual (if no errors).
E79B: C9      		ret	
              	;
              	;   write to a random record.
              	;
E79C: 0E00    	writeran: ld	c,0		;set 'writing' flag.
E79E: CD03E7  		call	position	;position the file to proper record.
E7A1: CC03E6  		call	z,wtseq1	;and write as usual (if no errors).
E7A4: C9      		ret	
              	;
              	;   compute the random record number. enter with (hl) pointing
              	; to a fcb an (de) contains a relative location of a record
              	; number. on exit, (c) contains the 'r0' byte, (b) the 'r1'
              	; byte, and (a) the 'r2' byte.
              	;
              	;   on return, the zero flag is set if the record is within
              	; bounds. otherwise, an overflow occured.
              	;
E7A5: EB      	comprand: ex	de,hl		;save fcb pointer in (de).
E7A6: 19      		add	hl,de		;compute relative position of record #.
E7A7: 4E      		ld	c,(hl)		;get record number into (bc).
E7A8: 0600    		ld	b,0
E7AA: 210C00  		ld	hl,12		;now get extent.
E7AD: 19      		add	hl,de
E7AE: 7E      		ld	a,(hl)		;compute (bc)=(record #)+(extent)*128.
E7AF: 0F      		rrca			;move lower bit into bit 7.
E7B0: E680    		and	80h		;and ignore all other bits.
E7B2: 81      		add	a,c		;add to our record number.
E7B3: 4F      		ld	c,a
E7B4: 3E00    		ld	a,0		;take care of any carry.
E7B6: 88      		adc	a,b
E7B7: 47      		ld	b,a
E7B8: 7E      		ld	a,(hl)		;now get the upper bits of extent into
E7B9: 0F      		rrca			;bit positions 0-3.
E7BA: E60F    		and	0fh		;and ignore all others.
E7BC: 80      		add	a,b		;add this in to 'r1' byte.
E7BD: 47      		ld	b,a
E7BE: 210E00  		ld	hl,14		;get the 's2' byte (extra extent).
E7C1: 19      		add	hl,de
E7C2: 7E      		ld	a,(hl)
E7C3: 87      		add	a,a		;and shift it left 4 bits (bits 4-7).
E7C4: 87      		add	a,a
E7C5: 87      		add	a,a
E7C6: 87      		add	a,a
E7C7: F5      		push	af		;save carry flag (bit 0 of flag byte).
E7C8: 80      		add	a,b		;now add extra extent into 'r1'.
E7C9: 47      		ld	b,a
E7CA: F5      		push	af		;and save carry (overflow byte 'r2').
E7CB: E1      		pop	hl		;bit 0 of (l) is the overflow indicator.
E7CC: 7D      		ld	a,l
E7CD: E1      		pop	hl		;and same for first carry flag.
E7CE: B5      		or	l		;either one of these set?
E7CF: E601    		and	01h		;only check the carry flags.
E7D1: C9      		ret	
              	;
              	;   routine to setup the fcb (bytes 'r0', 'r1', 'r2') to
              	; reflect the last record used for a random (or other) file.
              	; this reads the directory and looks at all extents computing
              	; the largerst record number for each and keeping the maximum
              	; value only. then 'r0', 'r1', and 'r2' will reflect this
              	; maximum record number. this is used to compute the space used
              	; by a random file.
              	;
E7D2: 0E0C    	ransize:ld	c,12		;look thru directory for first entry with
E7D4: CD18E3  		call	findfst		;this name.
E7D7: 2A43DF  		ld	hl,(params)	;zero out the 'r0, r1, r2' bytes.
E7DA: 112100  		ld	de,33
E7DD: 19      		add	hl,de
E7DE: E5      		push	hl
E7DF: 72      		ld	(hl),d		;note that (d)=0.
E7E0: 23      		inc	hl
E7E1: 72      		ld	(hl),d
E7E2: 23      		inc	hl
E7E3: 72      		ld	(hl),d
E7E4: CDF5E1  	ransiz1:call	ckfilpos	;is there an extent to process?
E7E7: CA0CE8  		jp	z,ransiz3	;no, we are done.
E7EA: CD5EE1  		call	fcb2hl		;set (hl) pointing to proper fcb in dir.
E7ED: 110F00  		ld	de,15		;point to last record in extent.
E7F0: CDA5E7  		call	comprand	;and compute random parameters.
E7F3: E1      		pop	hl
E7F4: E5      		push	hl		;now check these values against those
E7F5: 5F      		ld	e,a		;already in fcb.
E7F6: 79      		ld	a,c		;the carry flag will be set if those
E7F7: 96      		sub	(hl)		;in the fcb represent a larger size than
E7F8: 23      		inc	hl		;this extent does.
E7F9: 78      		ld	a,b
E7FA: 9E      		sbc	a,(hl)
E7FB: 23      		inc	hl
E7FC: 7B      		ld	a,e
E7FD: 9E      		sbc	a,(hl)
E7FE: DA06E8  		jp	c,ransiz2
E801: 73      		ld	(hl),e		;we found a larger (in size) extent.
E802: 2B      		dec	hl		;stuff these values into fcb.
E803: 70      		ld	(hl),b
E804: 2B      		dec	hl
E805: 71      		ld	(hl),c
E806: CD2DE3  	ransiz2:call	findnxt		;now get the next extent.
E809: C3E4E7  		jp	ransiz1		;continue til all done.
E80C: E1      	ransiz3:pop	hl		;we are done, restore the stack and
E80D: C9      		ret			;return.
              	;
              	;   function to return the random record position of a given
              	; file which has been read in sequential mode up to now.
              	;
E80E: 2A43DF  	setran:	ld	hl,(params)	;point to fcb.
E811: 112000  		ld	de,32		;and to last used record.
E814: CDA5E7  		call	comprand	;compute random position.
E817: 212100  		ld	hl,33		;now stuff these values into fcb.
E81A: 19      		add	hl,de
E81B: 71      		ld	(hl),c		;move 'r0'.
E81C: 23      		inc	hl
E81D: 70      		ld	(hl),b		;and 'r1'.
E81E: 23      		inc	hl
E81F: 77      		ld	(hl),a		;and lastly 'r2'.
E820: C9      		ret	
              	;
              	;   this routine select the drive specified in (active) and
              	; update the login vector and bitmap table if this drive was
              	; not already active.
              	;
E821: 2AAFE9  	logindrv: ld	hl,(login)	;get the login vector.
E824: 3A42DF  		ld	a,(active)	;get the default drive.
E827: 4F      		ld	c,a
E828: CDEAE0  		call	shiftr		;position active bit for this drive
E82B: E5      		push	hl		;into bit 0.
E82C: EB      		ex	de,hl
E82D: CD59DF  		call	select		;select this drive.
E830: E1      		pop	hl
E831: CC47DF  		call	z,slcterr	;valid drive?
E834: 7D      		ld	a,l		;is this a newly activated drive?
E835: 1F      		rra	
E836: D8      		ret	c
E837: 2AAFE9  		ld	hl,(login)	;yes, update the login vector.
E83A: 4D      		ld	c,l
E83B: 44      		ld	b,h
E83C: CD0BE1  		call	setbit
E83F: 22AFE9  		ld	(login),hl	;and save.
E842: C3A3E2  		jp	bitmap		;now update the bitmap.
              	;
              	;   function to set the active disk number.
              	;
E845: 3AD6E9  	setdsk:	ld	a,(eparam)	;get parameter passed and see if this
E848: 2142DF  		ld	hl,active	;represents a change in drives.
E84B: BE      		cp	(hl)
E84C: C8      		ret	z
E84D: 77      		ld	(hl),a		;yes it does, log it in.
E84E: C321E8  		jp	logindrv
              	;
              	;   this is the 'auto disk select' routine. the firsst byte
              	; of the fcb is examined for a drive specification. if non
              	; zero then the drive will be selected and loged in.
              	;
E851: 3EFF    	autosel:ld	a,0ffh		;say 'auto-select activated'.
E853: 32DEE9  		ld	(auto),a
E856: 2A43DF  		ld	hl,(params)	;get drive specified.
E859: 7E      		ld	a,(hl)
E85A: E61F    		and	1fh		;look at lower 5 bits.
E85C: 3D      		dec	a		;adjust for (1=a, 2=b) etc.
E85D: 32D6E9  		ld	(eparam),a	;and save for the select routine.
E860: FE1E    		cp	1eh		;check for 'no change' condition.
E862: D275E8  		jp	nc,autosl1	;yes, don't change.
E865: 3A42DF  		ld	a,(active)	;we must change, save currently active
E868: 32DFE9  		ld	(olddrv),a	;drive.
E86B: 7E      		ld	a,(hl)		;and save first byte of fcb also.
E86C: 32E0E9  		ld	(autoflag),a	;this must be non-zero.
E86F: E6E0    		and	0e0h		;whats this for (bits 6,7 are used for
E871: 77      		ld	(hl),a		;something)?
E872: CD45E8  		call	setdsk		;select and log in this drive.
E875: 3A41DF  	autosl1:ld	a,(userno)	;move user number into fcb.
E878: 2A43DF  		ld	hl,(params)	;(* upper half of first byte *)
E87B: B6      		or	(hl)
E87C: 77      		ld	(hl),a
E87D: C9      		ret			;and return (all done).
              	;
              	;   function to return the current cp/m version number.
              	;
E87E: 3E22    	getver:	ld	a,022h		;version 2.2
E880: C301DF  		jp	setstat
              	;
              	;   function to reset the disk system.
              	;
E883: 210000  	rstdsk:	ld	hl,0		;clear write protect status and log
E886: 22ADE9  		ld	(wrtprt),hl	;in vector.
E889: 22AFE9  		ld	(login),hl
E88C: AF      		xor	a		;select drive 'a'.
E88D: 3242DF  		ld	(active),a
E890: 218000  		ld	hl,tbuff	;setup default dma address.
E893: 22B1E9  		ld	(userdma),hl
E896: CDDAE1  		call	defdma
E899: C321E8  		jp	logindrv	;now log in drive 'a'.
              	;
              	;   function to open a specified file.
              	;
E89C: CD72E1  	openfil:call	clears2		;clear 's2' byte.
E89F: CD51E8  		call	autosel		;select proper disk.
E8A2: C351E4  		jp	openit		;and open the file.
              	;
              	;   function to close a specified file.
              	;
E8A5: CD51E8  	closefil: call	autosel		;select proper disk.
E8A8: C3A2E4  		jp	closeit		;and close the file.
              	;
              	;   function to return the first occurence of a specified file
              	; name. if the first byte of the fcb is '?' then the name will
              	; not be checked (get the first entry no matter what).
              	;
E8AB: 0E00    	getfst:	ld	c,0		;prepare for special search.
E8AD: EB      		ex	de,hl
E8AE: 7E      		ld	a,(hl)		;is first byte a '?'?
E8AF: FE3F    		cp	'?'
E8B1: CAC2E8  		jp	z,getfst1	;yes, just get very first entry (zero length match).
E8B4: CDA6E0  		call	setext		;get the extension byte from fcb.
E8B7: 7E      		ld	a,(hl)		;is it '?'? if yes, then we want
E8B8: FE3F    		cp	'?'		;an entry with a specific 's2' byte.
E8BA: C472E1  		call	nz,clears2	;otherwise, look for a zero 's2' byte.
E8BD: CD51E8  		call	autosel		;select proper drive.
E8C0: 0E0F    		ld	c,15		;compare bytes 0-14 in fcb (12&13 excluded).
E8C2: CD18E3  	getfst1:call	findfst		;find an entry and then move it into
E8C5: C3E9E1  		jp	movedir		;the users dma space.
              	;
              	;   function to return the next occurence of a file name.
              	;
E8C8: 2AD9E9  	getnxt:	ld	hl,(savefcb)	;restore pointers. note that no
E8CB: 2243DF  		ld	(params),hl	;other dbos calls are allowed.
E8CE: CD51E8  		call	autosel		;no error will be returned, but the
E8D1: CD2DE3  		call	findnxt		;results will be wrong.
E8D4: C3E9E1  		jp	movedir
              	;
              	;   function to delete a file by name.
              	;
E8D7: CD51E8  	delfile:call	autosel		;select proper drive.
E8DA: CD9CE3  		call	erafile		;erase the file.
E8DD: C301E3  		jp	ststatus	;set status and return.
              	;
              	;   function to execute a sequential read of the specified
              	; record number.
              	;
E8E0: CD51E8  	readseq:call	autosel		;select proper drive then read.
E8E3: C3BCE5  		jp	rdseq
              	;
              	;   function to write the net sequential record.
              	;
E8E6: CD51E8  	wrtseq:	call	autosel		;select proper drive then write.
E8E9: C3FEE5  		jp	wtseq
              	;
              	;   create a file function.
              	;
E8EC: CD72E1  	fcreate:call	clears2		;clear the 's2' byte on all creates.
E8EF: CD51E8  		call	autosel		;select proper drive and get the next
E8F2: C324E5  		jp	getempty	;empty directory space.
              	;
              	;   function to rename a file.
              	;
E8F5: CD51E8  	renfile:call	autosel		;select proper drive and then switch
E8F8: CD16E4  		call	chgnames	;file names.
E8FB: C301E3  		jp	ststatus
              	;
              	;   function to return the login vector.
              	;
E8FE: 2AAFE9  	getlog:	ld	hl,(login)
E901: C329E9  		jp	getprm1
              	;
              	;   function to return the current disk assignment.
              	;
E904: 3A42DF  	getcrnt:ld	a,(active)
E907: C301DF  		jp	setstat
              	;
              	;   function to set the dma address.
              	;
E90A: EB      	putdma:	ex	de,hl
E90B: 22B1E9  		ld	(userdma),hl	;save in our space and then get to
E90E: C3DAE1  		jp	defdma		;the bios with this also.
              	;
              	;   function to return the allocation vector.
              	;
E911: 2ABFE9  	getaloc:ld	hl,(alocvect)
E914: C329E9  		jp	getprm1
              	;
              	;   function to return the read-only status vector.
              	;
E917: 2AADE9  	getrov:	ld	hl,(wrtprt)
E91A: C329E9  		jp	getprm1
              	;
              	;   function to set the file attributes (read-only, system).
              	;
E91D: CD51E8  	setattr:call	autosel		;select proper drive then save attributes.
E920: CD3BE4  		call	saveattr
E923: C301E3  		jp	ststatus
              	;
              	;   function to return the address of the disk parameter block
              	; for the current drive.
              	;
E926: 2ABBE9  	getparm:ld	hl,(diskpb)
E929: 2245DF  	getprm1:ld	(status),hl
E92C: C9      		ret	
              	;
              	;   function to get or set the user number. if (e) was (ff)
              	; then this is a request to return the current user number.
              	; else set the user number from (e).
              	;
E92D: 3AD6E9  	getuser:ld	a,(eparam)	;get parameter.
E930: FEFF    		cp	0ffh		;get user number?
E932: C23BE9  		jp	nz,setuser
E935: 3A41DF  		ld	a,(userno)	;yes, just do it.
E938: C301DF  		jp	setstat
E93B: E61F    	setuser:and	1fh		;no, we should set it instead. keep low
E93D: 3241DF  		ld	(userno),a	;bits (0-4) only.
E940: C9      		ret	
              	;
              	;   function to read a random record from a file.
              	;
E941: CD51E8  	rdrandom: call	autosel		;select proper drive and read.
E944: C393E7  		jp	readran
              	;
              	;   function to compute the file size for random files.
              	;
E947: CD51E8  	wtrandom: call	autosel		;select proper drive and write.
E94A: C39CE7  		jp	writeran
              	;
              	;   function to compute the size of a random file.
              	;
E94D: CD51E8  	filesize: call	autosel		;select proper drive and check file length
E950: C3D2E7  		jp	ransize
              	;
              	;   function #37. this allows a program to log off any drives.
              	; on entry, set (de) to contain a word with bits set for those
              	; drives that are to be logged off. the log-in vector and the
              	; write protect vector will be updated. this must be a m/pm
              	; special function.
              	;
E953: 2A43DF  	logoff:	ld	hl,(params)	;get drives to log off.
E956: 7D      		ld	a,l		;for each bit that is set, we want
E957: 2F      		cpl			;to clear that bit in (login)
E958: 5F      		ld	e,a		;and (wrtprt).
E959: 7C      		ld	a,h
E95A: 2F      		cpl	
E95B: 2AAFE9  		ld	hl,(login)	;reset the login vector.
E95E: A4      		and	h
E95F: 57      		ld	d,a
E960: 7D      		ld	a,l
E961: A3      		and	e
E962: 5F      		ld	e,a
E963: 2AADE9  		ld	hl,(wrtprt)
E966: EB      		ex	de,hl
E967: 22AFE9  		ld	(login),hl	;and save.
E96A: 7D      		ld	a,l		;now do the write protect vector.
E96B: A3      		and	e
E96C: 6F      		ld	l,a
E96D: 7C      		ld	a,h
E96E: A2      		and	d
E96F: 67      		ld	h,a
E970: 22ADE9  		ld	(wrtprt),hl	;and save. all done.
E973: C9      		ret	
              	;
              	;   get here to return to the user.
              	;
E974: 3ADEE9  	goback:	ld	a,(auto)	;was auto select activated?
E977: B7      		or	a
E978: CA91E9  		jp	z,goback1
E97B: 2A43DF  		ld	hl,(params)	;yes, but was a change made?
E97E: 3600    		ld	(hl),0		;(* reset first byte of fcb *)
E980: 3AE0E9  		ld	a,(autoflag)
E983: B7      		or	a
E984: CA91E9  		jp	z,goback1
E987: 77      		ld	(hl),a		;yes, reset first byte properly.
E988: 3ADFE9  		ld	a,(olddrv)	;and get the old drive and select it.
E98B: 32D6E9  		ld	(eparam),a
E98E: CD45E8  		call	setdsk
E991: 2A0FDF  	goback1:ld	hl,(usrstack)	;reset the users stack pointer.
E994: F9      		ld	sp,hl
E995: 2A45DF  		ld	hl,(status)	;get return status.
E998: 7D      		ld	a,l		;force version 1.4 compatability.
E999: 44      		ld	b,h
E99A: C9      		ret			;and go back to user.
              	;
              	;   function #40. this is a special entry to do random i/o.
              	; for the case where we are writing to unused disk space, this
              	; space will be zeroed out first. this must be a m/pm special
              	; purpose function, because why would any normal program even
              	; care about the previous contents of a sector about to be
              	; written over.
              	;
E99B: CD51E8  	wtspecl:call	autosel		;select proper drive.
E99E: 3E02    		ld	a,2		;use special write mode.
E9A0: 32D5E9  		ld	(mode),a
E9A3: 0E00    		ld	c,0		;set write indicator.
E9A5: CD07E7  		call	positn1		;position the file.
E9A8: CC03E6  		call	z,wtseq1	;and write (if no errors).
E9AB: C9      		ret	
              	;
              	;**************************************************************
              	;*
              	;*     bdos data storage pool.
              	;*
              	;**************************************************************
              	;
E9AC: E5      	emptyfcb: defb	0e5h		;empty directory segment indicator.
E9AD: 0000    	wrtprt:	defw	0		;write protect status for all 16 drives.
E9AF: 0000    	login:	defw	0		;drive active word (1 bit per drive).
E9B1: 8000    	userdma:defw	080h		;user's dma address (defaults to 80h).
              	;
              	;   scratch areas from parameter block.
              	;
E9B3: 0000    	scratch1: defw	0		;relative position within dir segment for file (0-3).
E9B5: 0000    	scratch2: defw	0		;last selected track number.
E9B7: 0000    	scratch3: defw	0		;last selected sector number.
              	;
              	;   disk storage areas from parameter block.
              	;
E9B9: 0000    	dirbuf:	defw	0		;address of directory buffer to use.
E9BB: 0000    	diskpb:	defw	0		;contains address of disk parameter block.
E9BD: 0000    	chkvect:defw	0		;address of check vector.
E9BF: 0000    	alocvect: defw	0		;address of allocation vector (bit map).
              	;
              	;   parameter block returned from the bios.
              	;
E9C1: 0000    	sectors:defw	0		;sectors per track from bios.
E9C3: 00      	blkshft:defb	0		;block shift.
E9C4: 00      	blkmask:defb	0		;block mask.
E9C5: 00      	extmask:defb	0		;extent mask.
E9C6: 0000    	dsksize:defw	0		;disk size from bios (number of blocks-1).
E9C8: 0000    	dirsize:defw	0		;directory size.
E9CA: 0000    	alloc0:	defw	0		;storage for first bytes of bit map (dir space used).
E9CC: 0000    	alloc1:	defw	0
E9CE: 0000    	offset:	defw	0		;first usable track number.
E9D0: 0000    	xlate:	defw	0		;sector translation table address.
              	;
              	;
E9D2: 00      	closeflg: defb	0		;close flag (=0ffh is extent written ok).
E9D3: 00      	rdwrtflg: defb	0		;read/write flag (0ffh=read, 0=write).
E9D4: 00      	fndstat:defb	0		;filename found status (0=found first entry).
E9D5: 00      	mode:	defb	0		;i/o mode select (0=random, 1=sequential, 2=special random).
E9D6: 00      	eparam:	defb	0		;storage for register (e) on entry to bdos.
E9D7: 00      	relblock: defb	0		;relative position within fcb of block number written.
E9D8: 00      	counter:defb	0		;byte counter for directory name searches.
E9D9: 00000000	savefcb:defw	0,0		;save space for address of fcb (for directory searches).
E9DD: 00      	bigdisk:defb	0		;if =0 then disk is > 256 blocks long.
E9DE: 00      	auto:	defb	0		;if non-zero, then auto select activated.
E9DF: 00      	olddrv:	defb	0		;on auto select, storage for previous drive.
E9E0: 00      	autoflag: defb	0		;if non-zero, then auto select changed drives.
E9E1: 00      	savnxt:	defb	0		;storage for next record number to access.
E9E2: 00      	savext:	defb	0		;storage for extent number of file.
E9E3: 0000    	savnrec:defw	0		;storage for number of records in file.
E9E5: 0000    	blknmbr:defw	0		;block number (physical sector) used within a file or logical sect
E9E7: 0000    	logsect:defw	0		;starting logical (128 byte) sector of block (physical sector).
E9E9: 00      	fcbpos:	defb	0		;relative position within buffer for fcb of file of interest.
E9EA: 0000    	filepos:defw	0		;files position within directory (0 to max entries -1).
              	;
              	;   disk directory buffer checksum bytes. one for each of the
              	; 16 possible drives.
              	;
E9EC: 00000000	cksumtbl: defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
E9F0: 00...   	
              	
E9FC: 00000000		defb	0,0,0,0
              	;
              	;*
              	;******************   E N D   O F   C P / M   *****************
              	;*
              	
              	#include "../bios.asm"
              	;
              	;**************************************************************
              	;*
              	;*        B I O S   B O O T   R O U T I N E S
              	;*
              	;**************************************************************
              	;
              	
              	;
              	;**************************************************************
              	;*
              	;*          B I O S   J U M P   T A B L E
              	;*
              	;*    This isn't actually used by the BDOS, but
              	;*    some applications (*cough* MBASIC) use it
              	;*    to directly address BIOS calls to get around
              	;*    the BDOS.
              	;*
              	;**************************************************************
              	;
EA00: C333EA  		jp	boot
EA03: C346EA  	wbootin:jp	wboot	; Indirection to wboot, used by MBASIC
EA06: C3A0EA  		jp	const
EA09: C3ABEA  		jp	conin
EA0C: C3B7EA  		jp	conout
EA0F: C3C3EA  		jp	list
EA12: C3C7EA  		jp	punch
EA15: C3CBEA  		jp	reader
EA18: C3D9EA  		jp	home
EA1B: C3DEEA  		jp	seldsk
EA1E: C3FCEA  		jp	settrk
EA21: C300EB  		jp	setsec
EA24: C304EB  		jp	setdma
EA27: C30AEB  		jp	read
EA2A: C30EEB  		jp	write
EA2D: C312EB  		jp	prstat
EA30: C315EB  		jp	sectrn
              	
              	; Cold boot entry
              	; Sets up some lower CP/M memory areas, and tells the INIT
              	; program to run on CP/M startup.
EA33: 3100D4  	boot:	ld	sp,cbase
              	
              		; Run the warm boot common code
EA36: CD5DEA  		call	wbootr
              		
              		; Special conditions for a cold boot
EA39: CD5EEB  		call	cbinit
              	
              		; Jump to CP/M
EA3C: 0E00    		ld	c,default
EA3E: C300D4  		jp	cbase
              	
              	
              	; Error boot entry
              	; Kinda like warm boot, but drive is reset to default
EA41: 3E00    	eboot:	ld	a,default
EA43: 320400  		ld	(tdrive),a
              	
              	; Warm boot entry
              	; Mainly just calls wbootr and manages IOBYTE
EA46: 3100D4  	wboot:	ld	sp,cbase
              	
              		; Save current drive + user
EA49: 3A0400  		ld	a,(tdrive)
EA4C: F5      		push	af
              	
              		; Save IOBYTE
EA4D: 3A0300  		ld	a,(iobyte)
EA50: F5      		push	af
              	
              		; Warm boot
EA51: CD5DEA  		call	wbootr
              		
              		; Restore IOBYTE
EA54: F1      		pop	af
EA55: 320300  		ld	(iobyte),a
              		
              		; Restore tdrive and warm boot
EA58: F1      		pop	af
EA59: 4F      		ld	c,a
EA5A: C300D4  		jp	cbase
              	
              	; Warm boot routine
              	; Sends init signal to device bus, loads CCP, and inits CP/M
              	; Does not actually jump to CP/M just yet
EA5D: F3      	wbootr:	di
              		
              		; Zero out BSS
EA5E: AF      		xor	a
EA5F: 2189F4  		ld	hl,_TEXT_end
EA62: 77      		ld	(hl),a
EA63: 118AF4  		ld	de,_TEXT_end+1
EA66: 013906  		ld	bc,_BSS_size
EA69: EDB0    		ldir
              	
              		; Send init signals to all devices
EA6B: 0600    		ld	b,0
EA6D: C5      	wboot0:	push	bc
EA6E: 216EEB  		ld	hl,bdevsw
EA71: 78      		ld	a,b
EA72: CD2DEB  		call	swindir
EA75: AF      		xor	a
EA76: 14      		inc	d
EA77: CC4AEB  		call	z,callmj
EA7A: C1      		pop	bc
EA7B: 04      		inc	b
EA7C: 3E14    		ld	a,20
EA7E: B8      		cp	b
EA7F: 20EC    		jr	nz,wboot0
              	
              		; Turn off batch mode
EA81: 3E00    		ld	a,0
EA83: 32E8D4  		ld	(batch),a
              	
              		; Load the CCP
EA86: CD68EB  		call	resccp
              	
              		; Call config init
EA89: CD4FEB  		call	wbinit
              		
              		; Set up lower memory
EA8C: 2198EA  		ld	hl,cpmlow
EA8F: 110000  		ld	de,0
EA92: 010800  		ld	bc,8
EA95: EDB0    		ldir
              	
              	
              		; Return
EA97: C9      		ret
              	
              	
              	; This is not a true function, but a block of code to be copied
              	; to CP/M lower memory
EA98: C303EA  	cpmlow:	jp	wbootin	; Call jump table version instead
EA9B: 81      		defb	0x81	; Default IOBYTE
EA9C: 00      		defb	0	; Default drive
EA9D: C306DC  		jp	fbase	; BDOS entry 
              	
              	
              	; Console status
              	;
              	; Returns a=0xFF if there is a character
              	; uses: all
              	; Defaults to device 0 right now
EAA0: 0600    	const:	ld	b,0
EAA2: CD1EEB  		call	cdindir
EAA5: 14      		inc	d
EAA6: C0      		ret	nz
EAA7: 3C      		inc	a
EAA8: C34AEB  		jp	callmj
              		
              	; Console read
              	;
              	; Returns character in a
              	; uses: all
              	; Defaults to device 0 right now
EAAB: 0600    	conin:	ld	b,0
EAAD: CD1EEB  		call	cdindir
EAB0: 14      		inc	d
EAB1: C0      		ret	nz
EAB2: 3E02    		ld	a,2
EAB4: C34AEB  		jp	callmj
              		
              	; Console write
              	; c = Character to display
              	;
              	; uses: all
              	; Defaults to device 0 right now
EAB7: 0600    	conout:	ld	b,0
EAB9: CD1EEB  	chrout:	call	cdindir
EABC: 14      		inc	d
EABD: C0      		ret	nz
EABE: 3E03    		ld	a,3
EAC0: C34AEB  		jp	callmj
              		
              	; Printer write
              	; c = Character to print
              	;
              	; uses: all
EAC3: 0606    	list:	ld	b,6
EAC5: 18F2    		jr	chrout
              	
              	; Punch (or auxiliary) write
              	; c = Character to punch
              	;
EAC7: 0604    	punch:	ld	b,4
EAC9: 18EE    		jr	chrout
              	
              	; Reader (or auxiliary) read
              	;
              	; Returns character in a, or a=0x1A
EACB: 0602    	reader:	ld	b,2
EACD: CD1EEB  		call	cdindir
EAD0: 14      		inc	d
EAD1: 3E1A    		ld	a,0x1A
EAD3: C0      		ret	nz
EAD4: 3E02    		ld	a,2
EAD6: C34AEB  		jp	callmj
              		
              	; Move the current drive to track 0
              	;
              	; uses: all
EAD9: 3E01    	home:	ld	a,1
EADB: C3F6EA  		jp	callbd
              		
              	; Selects a block device
              	; c = Device to select
              	; e = Disk logging status
              	;
              	; return hl=0 if device not valid
              	; uses: all
EADE: 79      	seldsk:	ld	a,c
EADF: 43      		ld	b,e
EAE0: 216EEB  		ld	hl,bdevsw
EAE3: CD2DEB  		call	swindir
EAE6: 22F7EA  		ld	(callbd+1),hl
EAE9: 210000  		ld	hl,0
EAEC: 14      		inc	d
EAED: C0      		ret	nz
EAEE: 2A4BEB  		ld	hl,(callmj+1)
EAF1: 22FAEA  		ld	(callbd+4),hl
EAF4: 3E02    		ld	a,2
              		; Pass b = logging status, c = device #
              		
              	; Small stub to jump to the currently selected block device
              	; Also records hl as argument
              	;
              	; We love self-modfiying code!
EAF6: 21      	callbd:	defb	0x21
EAF7: 0000    		defw	0
EAF9: C3      		defb	0xC3
EAFA: 0000    		defw	0
              	
              	; Sets the track of the selected block device
              	; bc = Track, starts at 0
              	;
              	; uses: all
EAFC: 3E03    	settrk:	ld	a,3
EAFE: 18F6    		jr	callbd
              		
              	; Sets the sector of the selected block device
              	; bc = Sector, starts at 0
              	;
              	; uses: all
EB00: 3E04    	setsec:	ld	a,4
EB02: 18F2    		jr	callbd
              	
              	; Sets the DMA address of the selected block device
              	; bc = DMA address
              	;
              	; uses: all
EB04: 60      	setdma:	ld	h,b
EB05: 69      		ld	l,c
EB06: 224DEB  		ld	(biodma),hl
EB09: C9      		ret
              		
              	; Reads the configured block from the selected block device
              	;
              	; uses: all
EB0A: 3E05    	read:	ld	a,5
EB0C: 18E8    		jr	callbd
              	
              	; Writes the configured block to the selected block device
              	; c = Deferred mode
              	;
              	; uses: all
EB0E: 3E06    	write:	ld	a,6
EB10: 18E4    		jr	callbd
              		
              	; "Printer" is always read for bytes
              	; Maybe in the future we will implement this, but for now
              	; this will do.
              	;
              	; Returns a=0xFF
EB12: 3EFF    	prstat:	ld	a,0xFF
EB14: C9      		ret
              		
              	; Provides sector translation
              	; Returns no translation for all devices
EB15: 60      	sectrn:	ld	h,b
EB16: 69      		ld	l,c
EB17: C9      		ret
              		
              	
              	; BDOS -> BIOS system hook
              	; stubs some stuff out, and then jumps to the config system hook
EB18: 32DEE9  	bshook:	ld	(auto),a
EB1B: C367EB  		jp	syshook
              		
              	; Character device switch indirection
              	; Obtains device by doing IOBYTE indirection
              	; Sets hl to cdevsw and jumps to swindir
EB1E: 04      	cdindir:inc	b
EB1F: 3A0300  		ld	a,(iobyte)
EB22: 05      	cdindi0:dec	b
EB23: 2803    		jr	z,cdindi1
EB25: 1F      		rra
EB26: 18FA    		jr	cdindi0
EB28: E603    	cdindi1:and	0x03
EB2A: 21AEEB  		ld	hl,cdevsw
              	
              	; Switch indirect helper function
              	; a = Device
              	; hl = Start of switch
              	;
              	; returns d=255 if device found, hl as argument
              	; uses: af, de, hl
EB2D: 110400  	swindir:ld	de,4
EB30: B7      		or	a
EB31: 2804    	swindi0:jr	z,swindi1
EB33: 19      		add	hl,de
EB34: 3D      		dec	a
EB35: 18FA    		jr	swindi0
EB37: 7E      	swindi1:ld	a,(hl)
EB38: 324BEB  		ld	(callmj+1),a
EB3B: 23      		inc	hl
EB3C: B6      		or	(hl)
EB3D: C8      		ret	z
EB3E: 7E      		ld	a,(hl)
EB3F: 324CEB  		ld	(callmj+2),a
EB42: 23      		inc	hl
EB43: 7E      		ld	a,(hl)
EB44: 23      		inc	hl
EB45: 66      		ld	h,(hl)
EB46: 6F      		ld	l,a
EB47: 16FF    		ld	d,255
EB49: C9      	nulldev:ret		; Just points to a return
              	
              	; Small stub to jump to the memory jump register
EB4A: C3      	callmj: defb	0xC3
EB4B: 0000    		defw	0
              	
              	
              	
              	; Variables
EB4D: 0000    	biodma:	defw	0	; Block device DMA address
              	
              	;
              	;**************************************************************
              	;*
              	;*        W A R M   B O O T   C O N F I G   H O O K
              	;*
              	;*    This function is called at the end of a warm boot
              	;*    to set up hardware-specific stuff. 
              	;*
              	;**************************************************************
              	;
              	
EB4F: 3E01    	wbinit:	ld	a,0x01		; Bank out ROM
EB51: D300    		out	(0x00),a
              		
              		; Turn on batch mode
EB53: 3EFF    		ld	a,0xFF
EB55: 32E8D4  		ld	(batch),a
              		
              		; Also set interrupt mode 2 stuff
EB58: ED47    		ld	i,a
EB5A: ED5E    		im	2		; Start interrupts
EB5C: FB      		ei
              		
EB5D: C9      		ret
              	
              	;
              	;**************************************************************
              	;*
              	;*        C O L D   B O O T   C O N F I G   H O O K
              	;*
              	;*    This function will run once during the intial cold
              	;*    boot. It is the last task to run before control is
              	;*    given to the CCP. This function is run after wbinit
              	;*
              	;**************************************************************
              	;
              	
EB5E: 3E06    	cbinit:	ld	a,6	; Enable INIT to run
EB60: 3207D4  		ld	(inbuff+1),a
EB63: C9      		ret
              	
              	;
              	;**************************************************************
              	;*
              	;*            I N T E R R U P T   H A N D L I N G
              	;*
              	;*     This function will be called in order to handle an
              	;*     interrupt if the need arises. Hooking drivers up to
              	;*     this code may be a little bit more involved.
              	;*
              	;**************************************************************
              	;
              	
EB64: FB      	cfirq:	ei
EB65: ED4D    		reti
              	
              	;
              	;**************************************************************
              	;*
              	;*              B D O S   C A L L   H O O K
              	;*
              	;*     This function is called everytime a BDOS call occurs.
              	;*     It can be used by specialized drivers to either inject
              	;*     new BDOS calls, or intercept existing ones.
              	;*
              	;*     Registers 'bc' and 'e' must be preserved if a call is
              	;*     going to be forwarded to the system. Register 'c' will
              	;*     contain BDOS call number.
              	;*       
              	;*
              	;**************************************************************
              	;
              	
EB67: C9      	syshook:ret
              	
              	
              	;**************************************************************
              	;*
              	;*           B L O C K   D E V I C E   S W I T C H
              	;*
              	;*       IshkurCP/M can support up to 16 logical disks
              	;*       A single driver can be mapped to a number of
              	;*       these disks. Each logical disk is defined by a
              	;*       4-byte record. The first 2 bytes are a pointer
              	;*       to the device entry, and the last 2 are passed
              	;*       as an argument to the device. Usually this 
              	;*       takes the form of a minor number for indexing
              	;*       sub-disks on the same driver
              	;*
              	;*
              	;**************************************************************
              	;
              		
              	; One of the block devices needs to have the responsibiliy
              	; of loading the CCP into memory. Define the jump vector here
EB68: C300F4  	resccp:	jp	id_ccp
              	
              	; Additionally, if Ishkur is using a graphical device, that
              	; device may temporarily need to access the Graphical Resource
              	; Block (GRB) to load in fonts and such. This is up to 2k in
              	; size, and goes in the location that the CCP resides
EB6B: C3FCF3  	resgrb:	jp	id_grb
              	
              	; A device of "0" will be read as a non-existant device
              	; The 'init' signal can be sent to the same devices many 
              	; times if it has multipe entires in this table.
EB6E: E8F20000	bdevsw:	defw	idedev,	0	; 'A'
EB72: E8F20100		defw	idedev,	1	; 'B'
EB76: E8F20200		defw	idedev,	2	; 'C'
EB7A: E8F20300		defw	idedev,	3	; 'D'
EB7E: A4EF0400		defw	nfddev,	4	; 'E'
EB82: A4EF0500		defw	nfddev,	5	; 'F'
EB86: 00000600		defw	0,	6	; 'G'
EB8A: 00000700		defw	0,	7	; 'H'
EB8E: 00000800		defw	0,	8	; 'I'
EB92: 00000900		defw	0,	9	; 'J'
EB96: 00000A00		defw	0,	10	; 'K'
EB9A: 00000B00		defw	0,	11	; 'L'
EB9E: 00000C00		defw	0,	12	; 'M'
EBA2: 00000D00		defw	0,	13	; 'N'
EBA6: 00000E00		defw	0,	14	; 'O'
EBAA: 00000F00		defw	0,	15	; 'P'
              	
              	;
              	; Character device switch MUST come directly after in memory!
              	;
              	;**************************************************************
              	;*
              	;*        C H A R A C T E R   D E V I C E   S W I T C H
              	;*
              	;*      Currently, 4 character devices are supported. These
              	;*      devices are the console, the printer, and two "punches"
              	;*      (can be thought of as an auxillary serial device).
              	;*      All character devices use the same interface, which
              	;*      allows for easy indireciton. 
              	;*
              	;*	Device switch logic works about the same of the block
              	;*	devices.
              	;*
              	;**************************************************************
              	;
              	
              	; A device of "0" will be read as a non-existant device
              	; The 'init' signal can be sent to the same devices many 
              	; times if it has multipe entires in this table.
EBAE: 0BF20000	cdevsw:	defw	siodev,	0	; TTY device
EBB2: BEEB0000		defw	vdpdev,	0	; Console device
EBB6: E1F10000		defw	prtdev,	0	; Aux I/O device #1 (LPT)
EBBA: 00000000		defw	0,	0	; Aux I/O device #2 (GEN)
              	
              	;
              	;**************************************************************
              	;*
              	;*        D E V I C E   D R I V E R   I N C L U D E S
              	;*
              	;**************************************************************
              	;
              	
              	#include "../dev/nabu_vdp.asm"
              	;
              	;**************************************************************
              	;*
              	;*      T M S 9 9 1 8   C H A R A C T E R   D E V I C E
              	;*
              	;*      This device emulated a VT52 terminal using the
              	;*      TMS9918A graphics chip. The 2kb font record is
              	;*      not resident is memory, and must be provided by
              	;*      a compatable block I/O device.
              	;*
              	;*      F18A style 80 column mode is supported
              	;*
              	;*      This specific version uses the NABU keyboard as
              	;*      an input to the emulated termina 
              	;*
              	;*      Device requires 48 bytes of bss space (tm_bss)
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
F489: 00      	tm_outc:defs	1	; Output character
F48A: 00      	tm_scro:defs	1	; Scroll width
F48B: 00      	tm_escs:defs	1	; Escape state
F48C: 00      	tm_last:defs	1	; Last character read
F48D: 00000000	tm_cbuf:defs	40	; 40 byte character buffer
F491: 00...   	
              	.area	_TEXT
              	
              	; TMS9918 Configuration
00A0:         	tm_data	equ	0xA0	; TMS9918 data register (mode=0)
00A1:         	tm_latc	equ	0xA1	; TMS9918 latch register (mode=1)
              	
0090:         	tm_keyd	equ	0x90	; Keyboard data register
0091:         	tm_keys	equ	0x91	; Keyboard status register
              	
0040:         	tm_ayda	equ	0x40	; AY-3-8910 data port
0041:         	tm_ayla	equ	0x41	; AY-3-8910 latch port
              	
              	; --- VRAM MAP ---
              	; 0x0000 - 0x07FF: Font
              	; 0x0800 - 0x0BFF: 40 column screen buffer
              	; 0x0C00 - 0x0FFF: Unused
              	; 0x1000 - 0x17FF: 80 column screen buffer
              	;
              	; Serial #
              	; 0x17FE: 0xE5
              	; 0x17FF: 0x81
              	
              	
              	; Driver jump table
EBBE: B7      	vdpdev:	or	a
EBBF: 2845    		jr	z,tm_init
EBC1: 3D      		dec	a
EBC2: 2819    		jr	z,tm_stat
EBC4: 3D      		dec	a
EBC5: CAA8EC  		jp	z,tm_read
EBC8: C306ED  		jp	tm_writ
              	
              	; A slower version of the OTIR instruction
              	; b = Number of cycles
              	; c = Output port
              	; hl = Memory pointer
              	;
              	; uses: bc, hl
EBCB: F5      	tm_otir:push	af
EBCC: 7E      	tm_oti0:ld	a,(hl)
EBCD: ED79    		out	(c),a
EBCF: 23      		inc	hl
EBD0: 10FA    		djnz	tm_oti0
EBD2: F1      		pop	af
EBD3: C9      		ret
              		
              	; A slower version of the INIR instruction
              	; b = Number of cycles
              	; c = Output port
              	; hl = Memory pointer
              	;
              	; uses: bc, hl
EBD4: F5      	tm_inir:push	af
EBD5: ED78    	tm_inr0:in	a,(c)
EBD7: 77      		ld	(hl),a
EBD8: 23      		inc	hl
EBD9: 10FA    		djnz	tm_inr0
EBDB: F1      		pop	af
EBDC: C9      		ret
              	
              	
              	; Gets the status of the keyboard
              	;
              	; Returns a=0xFF if there is a key to read 
              	; uses: af, bc, de, hl
EBDD: CD52EF  	tm_stat:call	tm_dint
EBE0: CDE9EB  		call	tm_sta0
EBE3: F5      		push	af
EBE4: CD62EF  		call	tm_eint
EBE7: F1      		pop	af
EBE8: C9      		ret 
EBE9: 3A8CF4  	tm_sta0:ld	a,(tm_last)
EBEC: FEE4    		cp	0xE4
EBEE: 2871    		jr	z,tm_scri
EBF0: FEE5    		cp	0xE5
EBF2: 287F    		jr	z,tm_sclf
EBF4: 3A89F4  	tm_sta1:ld	a,(tm_outc)
EBF7: 3C      		inc	a
EBF8: 3EFF    		ld	a,0xFF
EBFA: C0      		ret	nz
EBFB: CD60EE  		call	tm_getc
EBFE: 3289F4  		ld	(tm_outc),a
EC01: 3C      		inc	a
EC02: C8      		ret	z
EC03: 3EFF    		ld	a,0xFF
EC05: C9      		ret
              	
              	; TMS9918 init
              	; Load font record, set up terminal
EC06: CD6BEB  	tm_init:call	resgrb
              	
              		; Set up registers
EC09: CD7DEC  		call	tm_setp
              		
              		; Set up interrupt vectors (if needed)
EC0C: 214CEF  		ld	hl,tm_virq
EC0F: 2206FF  		ld	(intvec+6),hl
EC12: 217EEE  		ld	hl,tm_kirq
EC15: 2204FF  		ld	(intvec+4),hl
              		
              		; Set TMS pattern generator block to 0
EC18: DBA1    		in	a,(tm_latc)
EC1A: AF      		xor	a
EC1B: D3A1    		out	(tm_latc),a
EC1D: 3E84    		ld	a,0x84
EC1F: D3A1    		out	(tm_latc),a
              		
              		; Write the GRB
EC21: 010040  		ld	bc,0x4000
EC24: CD41EF  		call	tm_addr
EC27: 2100D4  		ld	hl,cbase
EC2A: 0EA0    		ld	c,tm_data
EC2C: 3E08    		ld	a,8	; Transfer 8*256 = 2048
EC2E: 0600    	tm_ini0:ld	b,0
EC30: CDCBEB  		call	tm_otir
EC33: 3D      		dec	a
EC34: 20F8    		jr	nz,tm_ini0
              		
              		; Cold boot?
EC36: 3A74EF  		ld	a,(tm_cold)
EC39: B7      		or	a
EC3A: 2012    		jr	nz,tm_ini1
              		
              		; Check serial #
EC3C: 01FE17  		ld	bc,0x17FE
EC3F: CD41EF  		call	tm_addr
EC42: ED78    		in	a,(c)
EC44: FEE5    		cp	0xE5
EC46: 2006    		jr	nz,tm_ini1
EC48: ED78    		in	a,(c)
EC4A: FE81    		cp	0x81
EC4C: 280D    		jr	z,tm_cloc
              		
              		; Reset the terminal
EC4E: CD23EF  	tm_ini1:call	tm_cls
EC51: AF      		xor	a
EC52: 3272EF  		ld	(tm_curx),a
EC55: 3273EF  		ld	(tm_cury),a
EC58: 3274EF  		ld	(tm_cold),a
              		
              		; Fall to tm_cloc
              		
              	; Clear the output character
              	;
              	; uses: af
EC5B: 3EFF    	tm_cloc:ld	a,0xFF
EC5D: 3289F4  		ld	(tm_outc),a
              	
EC60: C9      		ret
              		
              	; Scroll left / scroll right
              	;
              	; uses: af, bc, de, hl
EC61: 3A8AF4  	tm_scri:ld	a,(tm_scro)
EC64: B7      		or	a
EC65: FE28    		cp	40
EC67: 2808    		jr	z,tm_scr1
EC69: C604    		add	a,4
EC6B: 328AF4  	tm_scr0:ld	(tm_scro),a
EC6E: CD00EF  		call	tm_usco
EC71: 1881    	tm_scr1:jr	tm_sta1
EC73: 3A8AF4  	tm_sclf:ld	a,(tm_scro)
EC76: B7      		or	a
EC77: 28F8    		jr	z,tm_scr1
EC79: D604    		sub	4
EC7B: 18EE    		jr	tm_scr0
              	
              	; Sets up registers depending on mode
              	; used to change between 40-col and 80-col
              	;
              	; uses: af, hl
EC7D: 2A6DEF  	tm_setp:ld	hl,(tm_mode)
              	
              		; Set TMS to text mode
EC80: DBA1    		in	a,(tm_latc)
EC82: 7C      		ld	a,h
EC83: D3A1    		out	(tm_latc),a
EC85: 3E80    		ld	a,0x80
EC87: D3A1    		out	(tm_latc),a
EC89: DBA1    		in	a,(tm_latc)
EC8B: 3EF0    		ld	a,0xF0
EC8D: D3A1    		out	(tm_latc),a
EC8F: 3E81    		ld	a,0x81
EC91: D3A1    		out	(tm_latc),a
              		
              		; Set TMS color
EC93: DBA1    		in	a,(tm_latc)
EC95: 3A6FEF  		ld	a,(tm_colr)
EC98: D3A1    		out	(tm_latc),a
EC9A: 3E87    		ld	a,0x87
EC9C: D3A1    		out	(tm_latc),a
              		
              		; Set TMS name table to 0x0800
EC9E: DBA1    		in	a,(tm_latc)
ECA0: 7D      		ld	a,l
ECA1: D3A1    		out	(tm_latc),a
ECA3: 3E82    		ld	a,0x82
ECA5: D3A1    		out	(tm_latc),a
ECA7: C9      		ret
              	
              	; Waits for the user to press a key, and returns it
              	;
              	; Returns ASCII key in A
              	; uses: af, bc, de, hl
ECA8: CD52EF  	tm_read:call	tm_dint
ECAB: CDB4EC  		call	tm_rea0
ECAE: F5      		push	af
ECAF: CD62EF  		call	tm_eint
ECB2: F1      		pop	af
ECB3: C9      		ret 
ECB4: 3A72EF  	tm_rea0:ld	a,(tm_curx)
ECB7: 4F      		ld	c,a
ECB8: 3A73EF  		ld	a,(tm_cury)
ECBB: 57      		ld	d,a
ECBC: 210010  		ld	hl,0x1000
ECBF: 3E50    		ld	a,80
ECC1: CDDCEE  		call	tm_chat
ECC4: DBA0    		in	a,(tm_data)	; char is in A
ECC6: 57      		ld	d,a		; char key
ECC7: 5F      		ld	e,a		; blinking char
ECC8: 0601    		ld	b,1
              		
ECCA: D5      	tm_rea1:push	de
ECCB: CDE9EB  		call	tm_sta0		; No interrupts!
ECCE: D1      		pop	de
ECCF: 3C      		inc	a
ECD0: 200D    		jr	nz,tm_rea2
ECD2: 5A      		ld	e,d
ECD3: CDEFEC  		call	tm_rea3
ECD6: 3A89F4  		ld	a,(tm_outc)
ECD9: 47      		ld	b,a
ECDA: CD5BEC  		call	tm_cloc
ECDD: 78      		ld	a,b
ECDE: C9      		ret
              		
ECDF: CDFDEC  	tm_rea2:call	tm_stal
ECE2: 10E6    		djnz	tm_rea1
ECE4: 3E80    		ld	a,0x80
ECE6: AB      		xor	e
ECE7: 5F      		ld	e,a
ECE8: CDEFEC  		call	tm_rea3
ECEB: 06BE    		ld	b,190
ECED: 18DB    		jr	tm_rea1
              	
              	
ECEF: D5      	tm_rea3:push	de
ECF0: 3A72EF  		ld	a,(tm_curx)
ECF3: 4F      		ld	c,a
ECF4: 3A73EF  		ld	a,(tm_cury)
ECF7: 57      		ld	d,a
ECF8: CDB8EE  		call	tm_putc
ECFB: D1      		pop	de
ECFC: C9      		ret
              	
              	; Stalls out for a little bit
              	;
              	; uses: none
ECFD: C5      	tm_stal:push	bc
ECFE: 06FF    		ld	b,255
ED00: C5      	tm_sta2:push	bc
ED01: C1      		pop	bc
ED02: 10FC    		djnz	tm_sta2
ED04: C1      		pop	bc
ED05: C9      		ret
              	
              	
              	; Writes a character to the screen
              	; c = Character to write
              	;
              	; Returns c,b as next position 
              	; uses: af, bc, de, hl
ED06: CD52EF  	tm_writ:call	tm_dint
ED09: 59      		ld	e,c
ED0A: 3A72EF  		ld	a,(tm_curx)
ED0D: 4F      		ld	c,a
ED0E: 3A73EF  		ld	a,(tm_cury)
ED11: 57      		ld	d,a
ED12: CD21ED  		call	tm_wri0
ED15: 78      		ld	a,b
ED16: 3273EF  		ld	(tm_cury),a
ED19: 79      		ld	a,c
ED1A: 3272EF  		ld	(tm_curx),a
ED1D: CD62EF  		call	tm_eint
ED20: C9      		ret
              		
              	; Write helper routine
              	; c = X position
              	; d = Y position
              	; e = Character
              	;
              	; Returns c,b as next position
ED21: 42      	tm_wri0:ld	b,d		; c = X, b = Y
ED22: 3A8BF4  		ld	a,(tm_escs)
ED25: B7      		or	a		; Process escape code
ED26: C293ED  		jp	nz,tm_esc
ED29: 3E1F    		ld	a,0x1F
ED2B: BB      		cp	e
ED2C: D260ED  		jp	nc,tm_wri1	; Process control code
ED2F: C5      		push	bc
ED30: CDB8EE  		call	tm_putc		; Write character
ED33: C1      		pop	bc
              		
              		; Increment character
ED34: 0C      	tm_ri	inc	c
ED35: 3E50    		ld	a,80
ED37: B9      		cp	c
ED38: C0      		ret	nz
ED39: AF      		xor	a
ED3A: 4F      		ld	c,a
ED3B: 04      	tm_lf:  inc	b	; Line feed
ED3C: 3E18    		ld	a,24
ED3E: B8      		cp	b
ED3F: C0      		ret	nz
ED40: C5      		push	bc
ED41: CD3AEE  		call	tm_dsco
ED44: C1      		pop	bc
ED45: 05      		dec	b
ED46: C9      		ret
ED47: AF      	tm_cr:	xor	a	; Carriage return
ED48: 4F      		ld	c,a
ED49: C9      		ret
ED4A: 0D      	tm_bs:	dec	c	; Backspace 
ED4B: F0      		ret	p
ED4C: 0E4F    		ld	c,79
ED4E: 05      		dec	b
ED4F: F0      		ret	p
ED50: AF      		xor	a
ED51: 47      		ld	b,a
ED52: 4F      		ld	c,a
ED53: C9      		ret
ED54: AF      	tm_up:	xor	a	; Move up
ED55: B8      		cp	b
ED56: C8      		ret	z
ED57: 05      		dec	b
ED58: C9      		ret
ED59: CD23EF  	tm_cshm:call	tm_cls
ED5C: AF      	tm_home:xor	a
ED5D: 47      		ld	b,a
ED5E: 4F      		ld	c,a
ED5F: C9      		ret
              	
ED60: 7B      	tm_wri1:ld	a,e
ED61: FE07    		cp	0x07	; Bell
ED63: CA19EE  		jp	z,tm_bell
ED66: FE08    		cp	0x08	; '\b' (Cursor left)
ED68: 28E0    		jr	z,tm_bs
ED6A: FE12    		cp	0x12	; Cursor right
ED6C: 28C6    		jr	z,tm_ri
ED6E: FE0A    		cp	0x0A	; '\n' (Cursor down)
ED70: 28C9    		jr	z,tm_lf
ED72: FE0B    		cp	0x0B	; Cursor up
ED74: 28DE    		jr	z,tm_up
ED76: FE0D    		cp	0x0D	; '\r' 
ED78: 28CD    		jr	z,tm_cr
ED7A: FE17    		cp	0x17	; Clear end of screen
ED7C: 2856    		jr	z,tm_cles
ED7E: FE18    		cp	0x18	; Clear end of line
ED80: 2854    		jr	z,tm_clea
ED82: FE1A    		cp	0x1A	; Clear screen, home cursor
ED84: 28D3    		jr	z,tm_cshm
ED86: FE1E    		cp	0x1E	; Home cursor
ED88: 28D2    		jr	z,tm_home
ED8A: FE1B    		cp	0x1B	; Escape
ED8C: C0      		ret	nz
ED8D: 3E01    		ld	a,1
ED8F: 328BF4  		ld	(tm_escs),a
ED92: C9      		ret
              		
              		; Handle escape sequence
ED93: 3D      	tm_esc:	dec	a
ED94: 280E    		jr	z,tm_esc0
ED96: 3D      		dec	a
ED97: 2825    		jr	z,tm_esc1
ED99: 3D      		dec	a
ED9A: 282D    		jr	z,tm_esc2
ED9C: 3D      		dec	a
ED9D: 2871    		jr	z,tm_updc
ED9F: AF      	tm_escd:xor	a	; Escape done
EDA0: 328BF4  	tm_escr:ld	(tm_escs),a
EDA3: C9      		ret
EDA4: 3EFF    	tm_esc0:ld	a,0xFF	; Do 40-col
EDA6: BB      		cp	e
EDA7: 2850    		jr	z,tm_40c
EDA9: 3EFE    		ld	a,0xFE	; Do 80-col
EDAB: BB      		cp	e
EDAC: 2858    		jr	z,tm_80c
EDAE: 3EFD    		ld	a,0xFD	; Set color
EDB0: BB      		cp	e
EDB1: 2859    		jr	z,tm_scol
EDB3: 3E3D    		ld	a,0x3D	; '='
EDB5: BB      		cp	e
EDB6: 20E7    		jr	nz,tm_escd
EDB8: 3A8BF4  	tm_esci:ld	a,(tm_escs)
EDBB: 3C      		inc	a
EDBC: 18E2    		jr	tm_escr
EDBE: 7B      	tm_esc1:ld	a,e
EDBF: 1E20    		ld	e,0x20
EDC1: 93      		sub	e
EDC2: FE18    		cp	24
EDC4: 30D9    		jr	nc,tm_escd
EDC6: 47      		ld	b,a
EDC7: 18EF    		jr	tm_esci
EDC9: 7B      	tm_esc2:ld	a,e
EDCA: 1E20    		ld	e,0x20
EDCC: 93      		sub	e
EDCD: FE50    		cp	80
EDCF: 30CE    		jr	nc,tm_escd
EDD1: 4F      		ld	c,a
EDD2: 18CB    		jr	tm_escd
              		
              		; Clear segment
              		; B = ending line
EDD4: 0617    	tm_cles:ld	b,23
EDD6: 04      	tm_clea:inc	b
EDD7: 1E00    		ld	e,0
EDD9: C5      		push	bc
EDDA: D5      		push	de
EDDB: 3E50    		ld	a,80
EDDD: 210050  		ld	hl,0x5000
EDE0: CDDCEE  		call	tm_chat
EDE3: D1      		pop	de
EDE4: C1      		pop	bc
EDE5: AF      	tm_cle0:xor	a
EDE6: D3A0    		out	(tm_data),a
EDE8: 0C      		inc	c
EDE9: 3E50    		ld	a,80
EDEB: B9      		cp	c
EDEC: 20F7    		jr	nz,tm_cle0
EDEE: 14      		inc	d
EDEF: AF      		xor	a
EDF0: 4F      		ld	c,a
EDF1: 7A      		ld	a,d
EDF2: B8      		cp	b
EDF3: 20F0    		jr	nz,tm_cle0
EDF5: D1      		pop	de	; Do not update character
EDF6: C300EF  		jp	tm_usco
              		
EDF9: E5      	tm_40c:	push	hl
EDFA: 210200  		ld	hl,0x0002
EDFD: 226DEF  	tm_cupd:ld	(tm_mode),hl
EE00: CD7DEC  		call	tm_setp
EE03: E1      		pop	hl
EE04: 1899    		jr	tm_escd
              		
EE06: E5      	tm_80c:	push	hl
EE07: 210704  		ld	hl,0x0407
EE0A: 18F1    		jr	tm_cupd
              		
              		; Set color command
EE0C: 3E04    	tm_scol:ld	a,4
EE0E: 1890    		jr	tm_escr
              		
              		; Update color here
EE10: 7B      	tm_updc:ld	a,e
EE11: 326FEF  		ld	(tm_colr),a
EE14: CD7DEC  		call	tm_setp
EE17: 1886    		jr	tm_escd
              	
              		; Ring the bell
EE19: AF      	tm_bell:xor	a
EE1A: D341    		out	(tm_ayla),a
EE1C: D340    		out	(tm_ayda),a
EE1E: 3C      		inc	a
EE1F: D341    		out	(tm_ayla),a
EE21: 3E80    		ld	a,0x80
EE23: D340    		out	(tm_ayda),a
EE25: 3E07    		ld	a,7
EE27: D341    		out	(tm_ayla),a
EE29: DB40    		in	a,(tm_ayda)
EE2B: E6C0    		and	0xC0
EE2D: F63E    		or	0x3E
EE2F: D340    		out	(tm_ayda),a
EE31: 3E08    		ld	a,8
EE33: D341    		out	(tm_ayla),a
EE35: 3E0F    		ld	a,0x0F
EE37: D340    		out	(tm_ayda),a
EE39: C9      		ret
              		
              	
              		
              	; Scroll both frame buffers down one
              	;
              	; uses: af, bc, de, hl
EE3A: 212808  	tm_dsco:ld	hl,0x0800+40
EE3D: 110048  		ld	de,0x4800
EE40: 0618    		ld	b,24
EE42: CD4DEE  		call	tm_dsc0
EE45: 215010  		ld	hl,0x1000+80
EE48: 110050  		ld	de,0x5000
EE4B: 0630    		ld	b,48
EE4D: C5      	tm_dsc0:push	bc
EE4E: D5      		push	de
EE4F: E5      		push	hl
EE50: CDE8EE  		call	tm_vcpy
EE53: E1      		pop	hl
EE54: D1      		pop	de
EE55: 012800  		ld	bc,40
EE58: 09      		add	hl,bc
EE59: EB      		ex	de,hl
EE5A: 09      		add	hl,bc
EE5B: EB      		ex	de,hl
EE5C: C1      		pop	bc
EE5D: 10EE    		djnz	tm_dsc0
EE5F: C9      		ret
              		
              	
              	; Grabs the latest key pressed by the keyboard
              	; Discard keyboard errors
              	; Returns key in A, or 0xFF if none
              	;
              	; uses: af, bc, de, hl
EE60: 3A71EF  	tm_getc:ld	a,(tm_inf)
EE63: B7      		or	a
EE64: 3E00    		ld	a,0
EE66: 3271EF  		ld	(tm_inf),a
EE69: 3A70EF  		ld	a,(tm_inb)
EE6C: 2008    		jr	nz,tm_get0
              	
EE6E: DB91    		in	a,(tm_keys)
EE70: E602    		and	2
EE72: 3D      		dec	a
EE73: F8      		ret	m
              		
              		; Grab the key
EE74: DB90    		in	a,(tm_keyd)
EE76: 328CF4  	tm_get0:ld	(tm_last),a
EE79: CD8CEE  		call	tm_map
EE7C: 79      		ld	a,c
EE7D: C9      		ret
              		
              	; Handles a keyboard interrupt for the VDP terminal driver
              	; Keypress stored in tm_inb and tm_inf flag is set
              	; 
              	; uses: none
EE7E: F5      	tm_kirq:push	af
EE7F: DB90    		in	a,(tm_keyd)
EE81: 3270EF  		ld	(tm_inb),a
EE84: 3E01    		ld	a,1
EE86: 3271EF  		ld	(tm_inf),a
EE89: F1      		pop	af
EE8A: FB      		ei
EE8B: C9      		ret
              		
              		
              	; Maps keyboard input to ASCII
              	; a = Key to map
              	;
              	; Returns mapped key in c
              	; uses: af, c
EE8C: 4F      	tm_map:	ld	c,a
              		
              		; Mapping function
EE8D: 21A3EE  		ld	hl,tm_mapt
EE90: 7E      	tm_map0:ld	a,(hl)
EE91: B7      		or	a
EE92: 2808    		jr	z,tm_map2
EE94: B9      		cp	c
EE95: 23      		inc	hl
EE96: 7E      		ld	a,(hl)
EE97: 23      		inc	hl
EE98: 20F6    		jr	nz,tm_map0
EE9A: 4F      		ld	c,a
EE9B: C9      		ret
              		
              		
              		; Filter non-ASCII
EE9C: 79      	tm_map2:ld	a,c
EE9D: E680    		and	0x80	
EE9F: C8      		ret	z
EEA0: 0EFF    		ld	c,0xFF
EEA2: C9      		ret
              		
              	; Map table
EEA3: 7F08    	tm_mapt:defb	0x7F,0x08	; DEL -> BS
EEA5: E108    		defb	0xE1,0x08	; '<-' -> BS
EEA7: EA7F    		defb	0xEA,0x7F	; TV -> DEL
EEA9: E00C    		defb	0xE0,0x0C	; '->' -> Right
EEAB: E20B    		defb	0xE2,0x0B	; '/\' -> Up
EEAD: E30A    		defb	0xE3,0x0A	; '\/' -> Linefeed 
EEAF: E95C    		defb	0xE9,0x5C	; PAUSE -> '\'
EEB1: E860    		defb	0xE8,0x60	; SYM -> '@'
EEB3: E67C    		defb	0xE6,0x7C	; NO -> '|'
EEB5: E77E    		defb	0xE7,0x7E	; YES -> '~'
EEB7: 00      		defb	0
              	
              	; Puts a character on the screen
              	; c = X position
              	; d = Y position
              	; e = Character to put
              	;
              	; uses: af, bc, de, hl
EEB8: 210050  	tm_putc:ld	hl,0x5000
EEBB: 3E50    		ld	a,80
EEBD: C5      		push	bc
EEBE: D5      		push	de
EEBF: CDDCEE  		call	tm_chat	; Place it in the 80 col buffer
EEC2: ED59    		out	(c),e
EEC4: D1      		pop	de
EEC5: C1      		pop	bc
EEC6: 3A8AF4  	tm_putf:ld	a,(tm_scro)	; Place into frame buffer
EEC9: 47      		ld	b,a
EECA: 79      		ld	a,c
EECB: 90      		sub	b	; If character is less than scroll...
EECC: 4F      		ld	c,a
EECD: F8      		ret	m
EECE: FE28    		cp	40	; If desired position is 40 or more
EED0: D0      		ret	nc
EED1: 210048  		ld	hl,0x4800
EED4: 3E28    		ld	a,40
EED6: CDDCEE  		call	tm_chat	; Place it in the 40 col screen buffer
EED9: ED59    		out	(c),e
EEDB: C9      		ret
              	
              	; Sets the TMS address to a character at x,y
              	; a = Line width
              	; c = X position
              	; d = Y position
              	; hl = Buffer address
              	;
              	; uses: af, bc, d, hl
EEDC: 0600    	tm_chat:ld	b,0
EEDE: 09      		add	hl,bc
EEDF: 4F      		ld	c,a
EEE0: AF      		xor	a
EEE1: BA      		cp	d
EEE2: 285B    	tm_cha0:jr	z,tm_addh
EEE4: 09      		add	hl,bc
EEE5: 15      		dec	d
EEE6: 18FA    		jr	tm_cha0
              	
              	; Copies VRAM from one location to another
              	; Transfers occur in blocks of 40 bytes
              	; de = destination address
              	; hl = source location
              	;
              	; b = 0 on return
              	; uses: af, bc, de, hl
EEE8: CD3FEF  	tm_vcpy:call	tm_addh
EEEB: 0628    		ld	b,40
EEED: 218DF4  		ld	hl,tm_cbuf
EEF0: CDD4EB  		call	tm_inir
EEF3: EB      		ex	de,hl
EEF4: CD3FEF  		call	tm_addh
EEF7: 0628    		ld	b,40
EEF9: 218DF4  		ld	hl,tm_cbuf
EEFC: CDCBEB  		call	tm_otir
EEFF: C9      		ret
              		
              	; Updates the frame buffer based on the scroll position
              	;
              	; uses: af, bc, de, hl
EF00: 210010  	tm_usco:ld	hl,0x1000
EF03: 110048  		ld	de,0x4800
EF06: 3A8AF4  		ld	a,(tm_scro)
EF09: 0600    		ld	b,0
EF0B: 4F      		ld	c,a
EF0C: 09      		add	hl,bc
EF0D: 0618    		ld	b,24
EF0F: C5      	tm_usc0:push	bc
EF10: D5      		push	de
EF11: E5      		push	hl
EF12: CDE8EE  		call	tm_vcpy
EF15: E1      		pop	hl
EF16: D1      		pop	de
EF17: 0E50    		ld	c,80
EF19: 09      		add	hl,bc
EF1A: EB      		ex	de,hl
EF1B: 0E28    		ld	c,40
EF1D: 09      		add	hl,bc
EF1E: EB      		ex	de,hl
EF1F: C1      		pop	bc
EF20: 10ED    		djnz	tm_usc0
EF22: C9      		ret
              		
              	
              	; Clears out screen buffer and offscreen buffer
              	; Also includes clear limited function
              	;
              	; uses: af, bc, de
EF23: 010048  	tm_cls:	ld	bc,0x4800
EF26: 11FE0F  		ld	de,0x1000-2
EF29: CD41EF  		call	tm_addr
EF2C: AF      	tm_cls0:xor	a
EF2D: ED79    		out	(c),a
EF2F: 1B      		dec	de
EF30: 7A      		ld	a,d
EF31: B3      		or	e
EF32: 20F8    		jr	nz,tm_cls0
              		
              		; Write super special serial #
EF34: 3EE5    		ld	a,0xE5
EF36: ED79    		out	(c),a
EF38: F5      		push	af
EF39: F1      		pop	af
EF3A: 3E81    		ld	a,0x81
EF3C: ED79    		out	(c),a
EF3E: C9      		ret
              	
              	; Sets the TMS address for either reading or writing
              	; bc = Address 
              	;
              	; Returns tm_data in c
              	; uses: af, bc
EF3F: 44      	tm_addh:ld	b,h		; Does HL instead of BC
EF40: 4D      		ld	c,l
EF41: DBA1    	tm_addr:in	a,(tm_latc)
EF43: 79      		ld	a,c
EF44: D3A1    		out	(tm_latc),a
EF46: 78      		ld	a,b
EF47: D3A1    		out	(tm_latc),a
EF49: 0EA0    		ld	c,tm_data
EF4B: C9      		ret
              		
              	; Handles a TMS9918 irq
EF4C: F5      	tm_virq:push	af
EF4D: DBA1    		in	a,(tm_latc)
EF4F: F1      		pop	af
EF50: FB      		ei
EF51: C9      		ret
              		
              		
              	; Disables all interrupts while VDP operations occur
              	;
              	; uses: a
EF52: 3EC9    	tm_dint:ld	a,0xC9
EF54: 323800  		ld	(0x38),a
EF57: ED56    		im	1
EF59: 3E0E    		ld	a,0x0E
EF5B: D341    		out	(tm_ayla),a	; AY register = 14
EF5D: 3E00    		ld	a,0x00
EF5F: D340    		out	(tm_ayda),a	
EF61: C9      		ret
              		
              	; Enables interrupts again
              	;
              	; uses: a
EF62: 3E0E    	tm_eint:ld	a,0x0E
EF64: D341    		out	(tm_ayla),a	; AY register = 14
EF66: 3EB0    		ld	a,0xB0
EF68: D340    		out	(tm_ayda),a
EF6A: ED5E    		im	2
EF6C: C9      		ret
              		
              	; Variables
EF6D: 0200    	tm_mode:defw	0x0002
EF6F: E1      	tm_colr:defb	0xE1
EF70: 00      	tm_inb:	defb	0
EF71: 00      	tm_inf:	defb	0
EF72: 00      	tm_curx:defb	0
EF73: 00      	tm_cury:defb	0
EF74: 01      	tm_cold:defb	1
              	#include "../dev/nabu_fdc.asm"
              	;
              	;**************************************************************
              	;*
              	;*      N A B U   F D 1 7 9 7   F L O P P Y   D R I V E R
              	;*
              	;*      This driver interfaces the NABU FDC for use as a
              	;*      CP/M file system, graphical source, and boot device.
              	;*      The driver only supports double-density disks of 
              	;*      Osborne 1 format at the time, but this could be
              	;*      updated if it is needed. The directory table starts
              	;*      on track 2, the system sectors are as follows:
              	;*
              	;*      Track 0 Sector 1:	Boot Sector
              	;*      Track 0 Sector 2-3:	Graphical Resource Block
              	;*	Track 0 Sector 4-5:	CCP
              	;*	Track 1 Sector 1-5:	BDOS + BIOS Image
              	;*
              	;*	Device requires 90 bytes of bss space (nf_bss)
              	;*	Device requires 1024 byte buffer space (nf_cach)
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
F4B5: 00      	nf_io:	defs	1	; FDC address
F4B6: 00      	nf_r2ks:defs	1	; Temp storaged used in nf_r2k
              	
F4B7: 00      	nf_curd:defs	1	; Currently selected disk
F4B8: 00      	nf_subs:defs	1	; Current subsector
F4B9: 00      	nf_sync:defs	1	; Set if disk needs to be rehomed
F4BA: 00      	nf_inco:defs	1	; Set if sector is in core already
F4BB: 00      	nf_dirt:defs	1	; Set if cache is dirty
              	
F4BC: 00000000	nf_cach:defs	1024	; Sector cache
F4C0: 00...   	
              	
              	.area	_NOINIT
              	
FAC2: 00000000	nf_asva:defs	26	; Misc CP/M buffer
FAC6: 00...   	
FADC: 00000000	nf_asvb:defs	26
FAE0: 00...   	
FAF6: 00000000	nf_csva:defs	15
FAFA: 00...   	
FB05: 00000000	nf_csvb:defs	15
FB09: 00...   	
              	
              	.area	_TEXT
              	
0002:         	nf_rdsk	equ	2	; Defines which drives contains system
              				; resources (2 = A, 4 = B)
              				
0040:         	nf_ayda	equ	0x40	; AY-3-8910 data port
0041:         	nf_atla	equ	0x41	; AY-3-8910 latch port
              	
              	;
              	;**************************************************************
              	;*
              	;*         D I S K   D R I V E   G E O M E T R Y
              	;* 
              	;**************************************************************
              	;
              	
              	; Disk A DPH
EF75:         	nf_dpha:
EF75: 00000000		defw	0,0,0,0
EF79: 00000000	
EF7D: 10FF    		defw	dircbuf	; DIRBUF
EF7F: 95EF    		defw	nf_dpb	; DPB
EF81: F6FA    		defw	nf_csva	; CSV
EF83: C2FA    		defw	nf_asva	; ALV
              	
              	; Disk B DPH
EF85:         	nf_dphb:
EF85: 00000000		defw	0,0,0,0
EF89: 00000000	
EF8D: 10FF    		defw	dircbuf	; DIRBUF
EF8F: 95EF    		defw	nf_dpb	; DPB
EF91: 05FB    		defw	nf_csvb	; CSV
EF93: DCFA    		defw	nf_asvb	; ALV
              	
              	; Osborne 1 format
EF95:         	nf_dpb:
EF95: 2800    		defw	40	; # sectors per track
EF97: 03      		defb	3	; BSH
EF98: 07      		defb	7	; BLM
EF99: 00      		defb	0	; EXM
EF9A: B800    		defw	184	; DSM
EF9C: 3F00    		defw	63	; DRM
EF9E: C0      		defb	0xC0	; AL0
EF9F: 00      		defb	0	; AL1
EFA0: 1000    		defw	16	; Size of directory check vector
EFA2: 0300    		defw	3	; Number of reserved tracks at the beginning of disk
              	
              	
              	; Driver entry point
              	; a = Command #
              	;
              	; uses: all
EFA4: B7      	nfddev:	or	a
EFA5: 2815    		jr	z,nf_init
EFA7: 3D      		dec	a
EFA8: 283D    		jr	z,nf_home
EFAA: 3D      		dec	a
EFAB: 2852    		jr	z,nf_sel
EFAD: 3D      		dec	a
EFAE: CA53F0  		jp	z,nf_strk
EFB1: 3D      		dec	a
EFB2: CA89F0  		jp	z,nf_ssec
EFB5: 3D      		dec	a
EFB6: CADAF0  		jp	z,nf_read
EFB9: C3E2F0  		jp	nf_writ
              		
              	; Initialize device
              	; Sets the current track to 0
EFBC: AF      	nf_init:xor	a
EFBD: 32B5F4  		ld	(nf_io),a
              	
              		; Look for the FDC
EFC0: 0ECF    		ld	c,0xCF
EFC2: ED78    	nf_ini1:in	a,(c)
EFC4: FE10    		cp	0x10
EFC6: 2808    		jr	z,nf_ini2
EFC8: 0C      		inc	c
EFC9: C8      		ret	z	; Should not be possible!
EFCA: 3E0F    		ld	a,0x0F
EFCC: 81      		add	a,c
EFCD: 4F      		ld	c,a
EFCE: 18F2    		jr	nf_ini1
              		
              		; Get command register
EFD0: 79      	nf_ini2:ld	a,c
EFD1: D60F    		sub	15
EFD3: 4F      		ld	c,a
EFD4: 32B5F4  		ld	(nf_io),a
              		
              		; Select drive defined by hl
EFD7: CB25    		sla	l
EFD9: 3E02    		ld	a,2
EFDB: 85      		add	l
EFDC: 32B7F4  		ld	(nf_curd),a
              		
              		; Force FDC interrupt
EFDF: 3ED0    		ld	a,0xD0
EFE1: ED79    		out	(c),a
              		
              		; Re-home drive
EFE3: CDE7EF  		call	nf_home
              		
              		; De-select drive
              		
EFE6: C9      		ret
              	
              	; Sends the drive to track 0, and syncs the drive
              	;
              	; uses : af, c
EFE7: CDFAF0  	nf_home:call	nf_wdef
EFEA: CDADF1  		call	nf_dvsc
              	
EFED: 3AB5F4  		ld	a,(nf_io)
EFF0: 4F      		ld	c,a
              		
              		; Restore to track 0
EFF1: 3E09    		ld	a,0x09
EFF3: ED79    		out	(c),a 
EFF5: CDC4F1  		call	nf_busy
              		
              		; Reset sync flag
EFF8: AF      		xor	a
EFF9: 32B9F4  		ld	(nf_sync),a
              		
              		; De-select drive
EFFC: C3B2F1  		jp	nf_udsl
              		
              	; Selects the drive
              	; c = Logging status
              	; hl = Call argument
              	;
              	; uses; all
EFFF: 3AB5F4  	nf_sel:	ld	a,(nf_io)
F002: B7      		or	a
F003: FA0AF0  		jp	m,nf_seld
              		
              		; no FDC card
F006: 210000  		ld	hl,0
F009: C9      		ret
              	
F00A: 7D      	nf_seld:ld	a,l		; Select a disk
F00B: 0602    		ld	b,2
F00D: B7      		or	a
F00E: 2809    		jr	z,nf_sel0
F010: 3D      		dec	a
F011: 0604    		ld	b,4
F013: 2804    		jr	z,nf_sel0
F015: 210000  		ld	hl,0
F018: C9      		ret
              	
              		; Move control of drive buffers
F019: CDFAF0  	nf_sel0:call	nf_wdef		; Write back if needed
F01C: 3EFF    		ld	a,0xFF
F01E: 32B9F4  		ld	(nf_sync),a	; Set sync flag
F021: 78      		ld	a,b
F022: 32B7F4  		ld	(nf_curd),a	; Set current drive
F025: 5F      		ld	e,a
              		
              		; Check to make sure there is a disk
F026: 16FF    	nf_selc	ld	d,255
F028: CDADF1  		call	nf_dvsc
F02B: 3AB5F4  		ld	a,(nf_io)
F02E: 4F      		ld	c,a
F02F: 3ED0    		ld	a,0xD0
F031: ED79    		out	(c),a		; Force FDC interrupt
F033: CDCAF1  	nf_sel1:call	nf_stal
F036: ED78    		in	a,(c)
F038: E602    		and	0x02
F03A: 2009    		jr	nz,nf_sel2
F03C: 15      		dec	d
F03D: 20F4    		jr	nz,nf_sel1
              		
              		; No disk!
F03F: 210000  		ld	hl,0
F042: C3B2F1  		jp	nf_udsl
              		
              		
              		; Output DPH
F045: CDB2F1  	nf_sel2:call	nf_udsl
F048: 2175EF  		ld	hl,nf_dpha
F04B: 3E02    		ld	a,2
F04D: BB      		cp	e
F04E: C8      		ret	z
F04F: 2185EF  		ld	hl,nf_dphb
F052: C9      		ret
              	
              	; Sets the track of the selected block device
              	; bc = Track, starts at 0
              	; hl = Call argument
              	;
              	; uses: all
F053: 51      	nf_strk:ld	d,c		; Track = d
F054: 3AB5F4  		ld	a,(nf_io)
F057: 4F      		ld	c,a
F058: 3AB9F4  		ld	a,(nf_sync)
F05B: B7      		or	a
F05C: 280E    		jr	z,nf_str0	; Check if disk direct
              		
F05E: CDADF1  		call	nf_dvsc
              		
              		; Restore to track 0
F061: 3E09    		ld	a,0x09
F063: ED79    		out	(c),a 
F065: CDC4F1  		call	nf_busy
              		
              		; Reset sync flag
F068: AF      		xor	a
F069: 32B9F4  		ld	(nf_sync),a
              		
              		; Check to see if tracks match
F06C: 59      	nf_str0:ld	e,c
F06D: 0C      		inc	c
F06E: ED78    		in	a,(c)
F070: BA      		cp	d
F071: CAB2F1  		jp	z,nf_udsl	; They match, do nothing
              	
              		; Write a deferred block
F074: CDFAF0  		call	nf_wdef
              	
              		; Seek to track
F077: CDADF1  		call	nf_dvsc
F07A: 0C      		inc	c
F07B: 0C      		inc	c
F07C: ED51    		out	(c),d
F07E: 3E19    		ld	a,0x19
F080: 4B      		ld	c,e
F081: ED79    		out	(c),a 
F083: CDC4F1  		call	nf_busy	
              		
F086: C3B2F1  		jp	nf_udsl
              	
              	; Sets the sector of the selected block device
              	; bc = Sector, starts at 0
              	; hl = Call argument
              	;
              	; uses: all
F089: 79      	nf_ssec:ld	a,c
F08A: E607    		and	0x07
F08C: 32B8F4  		ld	(nf_subs),a
F08F: 79      		ld	a,c
              		
              		; Compute physical sector
F090: CB3F    		srl	a
F092: CB3F    		srl	a
F094: CB3F    		srl	a
F096: 3C      		inc	a
F097: 47      		ld	b,a	; b = Physical sector
F098: 3AB5F4  		ld	a,(nf_io)
F09B: 3C      		inc	a
F09C: 3C      		inc	a
F09D: 4F      		ld	c,a
F09E: ED78    		in	a,(c)
F0A0: B8      		cp	b
F0A1: C8      		ret	z	; Return if the same
              		
              		; Set FDC sector, after writing back if needed
F0A2: CDFAF0  		call	nf_wdef
F0A5: ED41    		out	(c),b
F0A7: C9      		ret
              		
              	; Ensure sector is in core, and set up for DMA transfer
              	;
              	; uses: all
F0A8: 3ABAF4  	nf_rdwr:ld	a,(nf_inco)
F0AB: B7      		or	a
F0AC: 2019    		jr	nz,nf_rdw0
              		
              		; Read in to cache
F0AE: CDADF1  		call	nf_dvsc
F0B1: 3AB5F4  		ld	a,(nf_io)
F0B4: 4F      		ld	c,a
F0B5: 21BCF4  		ld	hl,nf_cach
F0B8: CD8BF1  		call	nf_rphy
F0BB: 47      		ld	b,a
F0BC: CDB2F1  		call	nf_udsl
F0BF: 78      		ld	a,b
              		
              		; Error checking
F0C0: B7      		or	a
F0C1: 3E01    		ld	a,1
F0C3: C0      		ret	nz
F0C4: 32BAF4  		ld	(nf_inco),a
              		
              		; DMA subsector
F0C7: 2A4DEB  	nf_rdw0:ld	hl,(biodma)
F0CA: EB      		ex	de,hl
              	
F0CB: 3AB8F4  		ld	a,(nf_subs)
F0CE: 213CF4  		ld	hl,nf_cach-128
F0D1: 018000  		ld	bc,128
F0D4: 3C      		inc	a
F0D5: 09      	nf_rdw1:add	hl,bc
F0D6: 3D      		dec	a
F0D7: 20FC    		jr	nz,nf_rdw1
F0D9: C9      		ret
              	
              	; Reads a sector and DMA transfers it to memory
F0DA: CDA8F0  	nf_read:call	nf_rdwr
F0DD: B7      		or	a
F0DE: C0      		ret	nz
F0DF: EDB0    		ldir
F0E1: C9      		ret
              	
              	
              	; Write a sector from DMA, and defer it if possible
F0E2: C5      	nf_writ:push	bc
F0E3: CDA8F0  		call	nf_rdwr
F0E6: B7      		or	a
F0E7: C1      		pop	bc
F0E8: C0      		ret	nz
F0E9: 3E01    		ld	a,1
F0EB: 32BBF4  		ld	(nf_dirt),a
F0EE: 79      		ld	a,c
F0EF: 018000  		ld	bc,128
F0F2: EB      		ex	de,hl
F0F3: EDB0    		ldir
F0F5: FE01    		cp	1
F0F7: 3E00    		ld	a,0
F0F9: C0      		ret	nz
              		
              		; Drop down to defer read
              	
              	
              	; Checks to see if the cache needs to be written back
              	; after a deferred write.
              	;
              	; uses, af
F0FA: 3ABBF4  	nf_wdef:ld	a,(nf_dirt)
F0FD: B7      		or	a
F0FE: 283D    		jr	z,nf_wde4
              	
F100: C5      		push	bc
F101: D5      		push	de
F102: E5      		push	hl
              		
              		
              		; Write physical sector
F103: CDCFF1  		call	nf_dint
F106: CDADF1  		call	nf_dvsc
F109: 3AB5F4  		ld	a,(nf_io)
F10C: 4F      		ld	c,a
F10D: C603    		add	a,3
F10F: 57      		ld	d,a
F110: 59      		ld	e,c
F111: 3EA8    		ld	a,0xA8		; Write command
F113: ED79    		out	(c),a
F115: 21BCF4  		ld	hl,nf_cach
F118: ED78    	nf_wde1:in	a,(c)
F11A: 1F      		rra	
F11B: 3009    		jr	nc,nf_wde2
F11D: 1F      		rra
F11E: 30F8    		jr	nc,nf_wde1
F120: 4A      		ld	c,d
F121: EDA3    		outi 
F123: 4B      		ld	c,e
F124: 18F2    		jr	nf_wde1
F126: CDD8F1  	nf_wde2:call	nf_eint
F129: ED78    		in	a,(c)
              		
              		; Deselect drive
F12B: 47      		ld	b,a
F12C: CDB2F1  		call	nf_udsl
F12F: 78      		ld	a,b
              		
F130: E1      		pop	hl
F131: D1      		pop	de
F132: C1      		pop	bc
              		
              		; Error checking
F133: E6FC    		and	0xFC
F135: 2803    		jr	z,nf_wde3
              		
F137: 3E01    		ld	a,1
F139: C9      		ret
              		
              		; Cache is no longer dirty
F13A: 32BBF4  	nf_wde3:ld	(nf_dirt),a
              		
              		; Data no longer in core
F13D: AF      	nf_wde4:xor	a
F13E: 32BAF4  		ld	(nf_inco),a
              		
F141: C9      		ret
              		
              	; Loads the GRB into memory from sector 2-3
F142: 3E02    	nf_grb:	ld	a,2
F144: 32B6F4  		ld	(nf_r2ks),a
F147: 1805    		jr	nf_r2k
              		
              	; Loads the CCP into memory from sectors 4-5
F149: 3E04    	nf_ccp:	ld	a,4
F14B: 32B6F4  		ld	(nf_r2ks),a
              	
              	; Reads in a 2K bytes, starting at track 0, sector (nf_r2ks)
              	; This is placed into the cbase
F14E: 3E02    	nf_r2k: ld	a,nf_rdsk
F150: CDB3F1  		call	nf_dvsl
              		
              		; Restore to track 0
F153: 3AB5F4  		ld	a,(nf_io)
F156: 4F      		ld	c,a
F157: 3E09    		ld	a,0x09
F159: ED79    		out	(c),a 
F15B: CDC4F1  		call	nf_busy
              		
              		; Set sector # to 4
F15E: 3AB6F4  		ld	a,(nf_r2ks)
F161: 0C      		inc	c
F162: 0C      		inc	c
F163: ED79    		out	(c),a
F165: C5      		push	bc
F166: 0D      		dec	c
F167: 0D      		dec	c
              		
              		; Read into memory
F168: 2100D4  		ld	hl,cbase
F16B: CD8BF1  		call	nf_rphy
F16E: C1      		pop	bc
F16F: B7      		or	a
F170: 2805    		jr	z,nf_r2k0
F172: CDBCEF  		call	nf_init		; Error!
F175: 18D7    		jr	nf_r2k
              		
              		; Increment sector
F177: ED78    	nf_r2k0:in	a,(c)
F179: 3C      		inc	a
F17A: ED79    		out	(c),a
F17C: 0D      		dec	c
F17D: 0D      		dec	c
              		
              		; Read into memory again
F17E: CD8BF1  		call	nf_rphy
F181: B7      		or	a
F182: C8      		ret	z
F183: CDBCEF  		call	nf_init		; Error!
F186: 18C6    		jr	nf_r2k
              		
              		; De-select drive
F188: C3B2F1  		jp	nf_udsl
              	
              	; Reads a physical sector
              	; Track and sector should be set up
              	; c = FDC command address
              	; hl = memory location of result
              	;
              	; Returns a=0 if successful
              	; uses: af, bc, de, hl
F18B: CDCFF1  	nf_rphy:call	nf_dint
F18E: 51      		ld	d,c
F18F: 59      		ld	e,c
F190: 14      		inc	d
F191: 14      		inc	d
F192: 14      		inc	d
              		
              		; Read command
F193: 3E88    		ld	a,0x88
F195: ED79    		out	(c),a
F197: ED78    	nf_rph1:in	a,(c)
F199: 1F      		rra	
F19A: 3009    		jr	nc,nf_rph2
F19C: 1F      		rra
F19D: 30F8    		jr	nc,nf_rph1
F19F: 4A      		ld	c,d
F1A0: EDA2    		ini
F1A2: 4B      		ld	c,e
F1A3: 18F2    		jr	nf_rph1
F1A5: CDD8F1  	nf_rph2:call	nf_eint
F1A8: ED78    		in	a,(c)
F1AA: E6FC    		and	0xFC
F1AC: C9      		ret
              	
              	; Selects or deselects a drive
              	; a = Drive density / selection
              	;
              	; uses: af
F1AD: 3AB7F4  	nf_dvsc:ld	a,(nf_curd)	; Select current drive
F1B0: 1801    		jr	nf_dvsl
F1B2: AF      	nf_udsl:xor	a		; Unselects a drive
F1B3: C5      	nf_dvsl:push	bc
F1B4: 47      		ld	b,a
F1B5: 3AB5F4  		ld	a,(nf_io)
F1B8: C60F    		add	a,0x0F
F1BA: 4F      		ld	c,a
F1BB: ED41    		out	(c),b
F1BD: 06FF    		ld	b,0xFF
F1BF: CDCAF1  		call	nf_stal
F1C2: C1      		pop	bc
F1C3: C9      		ret
              		
              	
              	; Waits until FDC is not busy
              	; c = FDC command address
              	;
              	; uses: af
F1C4: ED78    	nf_busy:in	a,(c)
F1C6: 1F      		rra
F1C7: 38FB    		jr	c,nf_busy
F1C9: C9      		ret
              		
              	; Waits a little bit
              	;
              	; uses: b
F1CA: C5      	nf_stal:push	bc
F1CB: C1      		pop	bc
F1CC: 10FC    		djnz	nf_stal
F1CE: C9      		ret
              		
              	; Disables all interrupts while FDC operations occur
              	;
              	; uses: a
F1CF: 3E0E    	nf_dint:ld	a,0x0E
F1D1: D341    		out	(nf_atla),a	; AY register = 14
F1D3: 3E00    		ld	a,0x00
F1D5: D340    		out	(nf_ayda),a	
F1D7: C9      		ret
              		
              	; Enables interrupts again
              	;
              	; uses: a
F1D8: 3E0E    	nf_eint:ld	a,0x0E
F1DA: D341    		out	(nf_atla),a	; AY register = 14
F1DC: 3EB0    		ld	a,0xB0
F1DE: D340    		out	(nf_ayda),a
F1E0: C9      		ret
              	#include "../dev/nabu_prt.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   P A R A L L E L   O U T P U T
              	;*
              	;*      A simple output-only device driver for the NABU
              	;*      parellel printer port. 
              	;* 
              	;**************************************************************
              	;
              	.area	_TEXT
              	
0040:         	pr_ayda	equ	0x40		; AY-3-8910 data port
0041:         	pr_atla	equ	0x41		; AY-3-8910 latch port
00B0:         	pr_prnt	equ	0xB0		; Parallel output
0000:         	pr_ctrl	equ	0x00		; Device control register
              	
              	; Driver jump table 
F1E1: B7      	prtdev:	or	a
F1E2: 2808    		jr	z,pr_init
F1E4: 3D      		dec	a
F1E5: 2806    		jr	z,pr_stat
F1E7: 3D      		dec	a
F1E8: 2805    		jr	z,pr_read
F1EA: 1805    		jr	pr_writ
              		
              	; Device init
              	; Does nothing
              	;
              	; uses: none
F1EC: C9      	pr_init:ret
              	
              	; Device status 
              	; There are never any characters to read
              	;
              	; Returns a=0xFF if there is a character to read
              	; uses: af
F1ED: AF      	pr_stat:xor	a
F1EE: C9      		ret
              		
              	; Waits for a character to come in and returns it
              	; No characters to read, returns 0
              	;
              	; Returns ASCII key in A
              	; uses: af
F1EF: AF      	pr_read:xor	a
F1F0: C9      		ret
              		
              	; Writes a character to the device
              	; c = Character to write
              	;
              	; uses: af, bc
F1F1: 3E0F    	pr_writ:ld	a,0x0F
F1F3: D341    		out	(pr_atla),a	; AY register = 15
              		
F1F5: DB40    	pr_wri0:in	a,(pr_ayda)	; Wait for not busy
F1F7: E610    		and	0x10
F1F9: 20FA    		jr	nz,pr_wri0
              		
F1FB: 79      		ld	a,c
F1FC: D3B0    		out	(pr_prnt),a	; Write data
              		
F1FE: 3E05    		ld	a,0x05		; Strobe
F200: D300    		out	(pr_ctrl),a
              		
F202: 0620    		ld	b,32		
F204: 10FE    	pr_wri1:djnz	pr_wri1		; Wait a few cycles
              		
F206: 3E01    		ld	a,0x01		; Strobe off
F208: D300    		out	(pr_ctrl),a
              		
F20A: C9      		ret
              		
              	#include "../dev/nabu_sio.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   S E R I A L   O P T I O N   C A R D
              	;*
              	;*      This driver allows the NABU serial option card to be
              	;*      used as a bidirectional Ishkur serial device. It will
              	;*      automatically search for a serial card on init. Serial
              	;*      cards are numbered by order. The first serial card gets
              	;*      a minor # of 0, the second card gets a minor number of
              	;*      1, etc... Up to 4 serial cards are supported.
              	;* 
              	;**************************************************************
              	;
              	.area	_TEXT
              	
              	
              	
              	; Driver jump table 
F20B: B7      	siodev:	or	a
F20C: 2808    		jr	z,so_init
F20E: 3D      		dec	a
F20F: 2833    		jr	z,so_stat
F211: 3D      		dec	a
F212: 2841    		jr	z,so_read
F214: 1851    		jr	so_writ
              		
              	; Device init
              	; Tries to find the option card if it is installed
              	; hl = Device options
              	;
              	; uses: none
F216: 117BF2  	so_init:ld	de,so_atab
F219: 45      		ld	b,l
F21A: 04      		inc	b		; Slot 1,2,3,...
F21B: 19      		add	hl,de 		; Get address table entry
F21C: 0ECF    		ld	c,0xCF		; First slot
              		
F21E: ED78    	so_ini0:in	a,(c)
F220: FE08    		cp	0x08
F222: 2807    		jr	z,so_ini2
              		
F224: 3E10    	so_ini1:ld	a,0x10
F226: 81      		add	c
F227: F0      		ret	p		; Can't find, failure
F228: 4F      		ld	c,a
F229: 18F3    		jr	so_ini0
              		
F22B: 10F7    	so_ini2:djnz	so_ini1		; Repeat if looking for next card
F22D: 79      		ld	a,c
F22E: D60F    		sub	0x0F
F230: 4F      		ld	c,a
F231: 71      		ld	(hl),c
F232: 117FF2  		ld	de,so_conf
F235: 060D    		ld	b,13
              		
              		; Lets set up the serial card for 9600 8N1
              		; First we set up the 8253, then the 8251
F237: 1A      	so_ini3:ld	a,(de)
F238: 13      		inc	de
F239: 86      		add	a,(hl)
F23A: 4F      		ld	c,a
F23B: 1A      		ld	a,(de)
F23C: 13      		inc	de
F23D: ED79    		out	(c),a
F23F: E5      		push	hl
F240: E1      		pop	hl	; Small delay
F241: 10F4    		djnz	so_ini3
F243: C9      		ret
              	
              	; Device status 
              	; hl = Device options
              	;
              	; Returns a=0xFF if there is a character to read
              	; uses: af
F244: 117BF2  	so_stat:ld	de,so_atab
F247: 19      		add	hl,de
F248: AF      		xor	a
F249: BE      		cp	(hl)
F24A: C8      		ret	z	; No device, return 0
F24B: 4E      		ld	c,(hl)
F24C: 0C      		inc	c
F24D: ED78    	so_sta0:in	a,(c)	; Check status register
F24F: E602    		and	0x02
F251: C8      		ret	z
F252: 3EFF    		ld	a,0xFF
F254: C9      		ret
              		
              		
              	; Waits for a character to come in and returns it
              	; hl = Device options
              	;
              	; Returns ASCII key in A
              	; uses: af
F255: 117BF2  	so_read:ld	de,so_atab
F258: 19      		add	hl,de
F259: AF      		xor	a
F25A: BE      		cp	(hl)
F25B: C8      		ret	z	; No device, return 0
F25C: 4E      		ld	c,(hl)
F25D: 0C      		inc	c
F25E: CD4DF2  	so_rea0:call	so_sta0	; Wait for a character
F261: 28FB    		jr	z,so_rea0
F263: 0D      		dec	c
F264: ED78    		in	a,(c)
F266: C9      		ret
              		
              	; Writes a character to the device
              	; c = Character to write
              	; hl = Device options
              	;
              	; uses: af, bc
F267: 41      	so_writ:ld	b,c
F268: 117BF2  		ld	de,so_atab
F26B: 19      		add	hl,de
F26C: AF      		xor	a
F26D: BE      		cp	(hl)
F26E: C8      		ret	z	; No device, return 0
F26F: 4E      		ld	c,(hl)
F270: 0C      		inc	c
F271: ED78    	so_wri0:in	a,(c)
F273: E601    		and	0x01
F275: 28FA    		jr	z,so_wri0
F277: 0D      		dec	c
F278: ED41    		out	(c),b
F27A: C9      		ret
              		
              		
              	; Variables
              	; 4 possible slots
F27B: 00000000	so_atab:defb	0x00,0x00,0x00,0x00
              	
              	; Configuration string
              	; Sets up counters 1 and 2 on the 8523 timer
F27F: 0737    	so_conf:defb	0x07,0x37	; Counter 1 setup
F281: 0412    		defb	0x04,0x12
F283: 0400    		defb	0x04,0x00
F285: 0777    		defb	0x07,0x77	; Counter 2 setup
F287: 0512    		defb	0x05,0x12
F289: 0500    		defb	0x05,0x00
              		
F28B: 0100    		defb	0x01,0x00	; 8251 setup
F28D: 0100    		defb	0x01,0x00
F28F: 0100    		defb	0x01,0x00
F291: 0100    		defb	0x01,0x00
F293: 0140    		defb	0x01,0x40
F295: 014E    		defb	0x01,0x4E
F297: 0137    		defb	0x01,0x37
              	#include "../dev/nabu_ide.asm"
              	;
              	;**************************************************************
              	;*
              	;*          N A B U   I D E   D I S K   D R I V E R
              	;*
              	;*    Interfaces a generic IDE device to the NABU. Capacity
              	;*    of the drive must be at least 32MB, and cannot be ATAPI.
              	;*    At the moment, only usage of the master drive is supported,
              	;*    but the drive is split up into four 8MB "partitions" that
              	;*    act as seperate disks.
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
              	
F8BC: 00      	id_curd:defs	1	; Currently selected disk
F8BD: 00      	id_inco:defs	1	; Set if sector is in core already
F8BE: 00      	id_dirt:defs	1	; Set if cache is dirty
              	
F8BF: 00      	id_csec:defs	1	; Current sector (1b)
F8C0: 0000    	id_ctrk:defs	2	; Current track (2b)
              	
F8C2: 00000000	id_cach:defs	512	; Sector cache
F8C6: 00...   	
              	
              	.area	_NOINIT
              	
FB14: 00000000	id_alva:defs	128	; ALV #1 (128b)
FB18: 00...   	
FB94: 00000000	id_alvb:defs	128	; ALV #2 (128b)
FB98: 00...   	
FC14: 00000000	id_alvc:defs	128	; ALV #3 (128b)
FC18: 00...   	
FC94: 00000000	id_alvd:defs	128	; ALV #4 (128b)
FC98: 00...   	
              	
              	.area	_TEXT
              	
00E0:         	id_rdsk	equ	0xE0	; Defines which drives contains system
              				; resources (0xE0 = Master, 0xF0 = Slave)
              				
00C0:         	id_base	equ	0xC0
              	
0040:         	id_ayda	equ	0x40		; AY-3-8910 data port
0041:         	id_atla	equ	0x41		; AY-3-8910 latch port
              	;
              	;**************************************************************
              	;*
              	;*         D I S K   D R I V E   G E O M E T R Y
              	;* 
              	;**************************************************************
              	;
              	
              	; Disk A DPH
F299:         	id_dpha:
F299: 00000000		defw	0,0,0,0
F29D: 00000000	
F2A1: 10FF    		defw	dircbuf	; DIRBUF
F2A3: D9F2    		defw	id_dpb	; DPB
F2A5: 0000    		defw	0	; CSV
F2A7: 14FB    		defw	id_alva	; ALV
              	
              	; Disk B DPH
F2A9:         	id_dphb:
F2A9: 00000000		defw	0,0,0,0
F2AD: 00000000	
F2B1: 10FF    		defw	dircbuf	; DIRBUF
F2B3: D9F2    		defw	id_dpb	; DPB
F2B5: 0000    		defw	0	; CSV
F2B7: 94FB    		defw	id_alvb	; ALV
              		
              	; Disk C DPH
F2B9:         	id_dphc:
F2B9: 00000000		defw	0,0,0,0
F2BD: 00000000	
F2C1: 10FF    		defw	dircbuf	; DIRBUF
F2C3: D9F2    		defw	id_dpb	; DPB
F2C5: 0000    		defw	0	; CSV
F2C7: 14FC    		defw	id_alvc	; ALV
              		
              	; Disk D DPH
F2C9:         	id_dphd:
F2C9: 00000000		defw	0,0,0,0
F2CD: 00000000	
F2D1: 10FF    		defw	dircbuf	; DIRBUF
F2D3: D9F2    		defw	id_dpb	; DPB
F2D5: 0000    		defw	0	; CSV
F2D7: 94FC    		defw	id_alvd	; ALV
              	
              	; NSHD8 modifed format
F2D9: 4000    	id_dpb:	defw	64	; # sectors per track
F2DB: 06      		defb	6	; BSH
F2DC: 3F      		defb	63	; BLM
F2DD: 03      		defb	3	; EXM
F2DE: FC03    		defw	1020	; DSM
F2E0: FF03    		defw	1023	; DRM
F2E2: F0      		defb	0xF0	; AL0
F2E3: 00      		defb	0	; AL1
F2E4: 0000    		defw	0	; Size of directory check vector
F2E6: 0300    		defw	3	; Number of reserved tracks at the beginning of disk
              	
              	
              	; Driver entry point
              	; a = Command #
              	;
              	; uses: all
F2E8: B7      	idedev:	or	a
F2E9: 2815    		jr	z,id_init
F2EB: 3D      		dec	a
F2EC: 282B    		jr	z,id_home
F2EE: 3D      		dec	a
F2EF: 2834    		jr	z,id_sel
F2F1: 3D      		dec	a
F2F2: CA5CF3  		jp	z,id_strk
F2F5: 3D      		dec	a
F2F6: CA6CF3  		jp	z,id_ssec
F2F9: 3D      		dec	a
F2FA: CABCF3  		jp	z,id_read
F2FD: C3C4F3  		jp	id_writ
              		
              	; Initialize device
              	; There is a bug where interrupts need to be set up to use device
F300: 3E07    	id_init:ld	a,0x07
F302: D341    		out	(id_atla),a	; AY register = 7
F304: DB40    		in	a,(id_ayda)
F306: E63F    		and	0x3F
F308: F640    		or	0x40
F30A: D340    		out	(id_ayda),a	; Configure AY port I/O
              		
F30C: 3E0E    		ld	a,0x0E
F30E: D341    		out	(id_atla),a	; AY register = 14
F310: 3EB0    		ld	a,0xB0
F312: D340    		out	(id_ayda),a	; Enable HCCA receive and but not send, plus key and VDP
              		
F314: 3E0F    		ld	a,0x0F		
F316: D341    		out	(id_atla),a	; AY register = 15
              		
F318: C9      		ret
              	
              	; Sets "track" back to zero
              	;
              	; uses: hl
F319: CDDCF3  	id_home:call	id_wdef
F31C: 210000  		ld	hl,0
F31F: 22C0F8  		ld	(id_ctrk),hl
F322: C37AF3  		jp	id_sbno
              		
              	; Selects the drive
              	; c = Logging status
              	; hl = Call argument
              	;
              	; uses; all
F325: CDDCF3  	id_sel:	call	id_wdef		; Write back if needed
F328: 3EE0    		ld	a,0xE0
F32A: CB55    		bit	2,l
F32C: 2802    		jr	z,id_sel0
F32E: 3EF0    		ld	a,0xF0
              		
              		; Set either master or slave
F330: D3CC    	id_sel0:out	(id_base+0xC),a
F332: 060A    		ld	b,10
F334: CD84F4  		call	id_stal
              		
              		; Is there actually a disk here?
F337: 45      		ld	b,l
F338: 210000  		ld	hl,0
F33B: DBCC    		in	a,(id_base+0xC)
F33D: 3C      		inc	a
F33E: C8      		ret	z
              		
              		; What subdisk are we using?
F33F: 3E03    		ld	a,0x03
F341: A0      		and	b
F342: F5      		push	af
F343: 0F      		rrca
F344: 0F      		rrca
F345: 32BCF8  		ld	(id_curd),a
F348: F1      		pop	af
              		
              		; Upgrade this code to a jump table maybe?
F349: 2199F2  		ld	hl,id_dpha
F34C: B7      		or	a
F34D: C8      		ret	z
F34E: 21A9F2  		ld	hl,id_dphb
F351: 3D      		dec	a
F352: C8      		ret	z
F353: 21B9F2  		ld	hl,id_dphc
F356: 3D      		dec	a
F357: C8      		ret	z
F358: 21C9F2  		ld	hl,id_dphd
F35B: C9      		ret
              		
              	
              	; Sets the track of the selected block device
              	; bc = Track, starts at 0
              	; hl = Call argument
              	;
              	; uses: all
F35C: 2AC0F8  	id_strk:ld	hl,(id_ctrk)
F35F: B7      		or	a
F360: ED42    		sbc	hl,bc
F362: C8      		ret	z
F363: CDDCF3  		call	id_wdef
F366: ED43C0F8		ld	(id_ctrk),bc
F36A: 180E    		jr	id_sbno
              	
              	; Sets the sector of the selected block device
              	; bc = Sector, starts at 0
              	; hl = Call argument
              	;
              	; uses: all
F36C: 3ABFF8  	id_ssec:ld	a,(id_csec)
F36F: A9      		xor	c
F370: E6FC    		and	0xFC
F372: 79      		ld	a,c
F373: 32BFF8  		ld	(id_csec),a
F376: C8      		ret	z	; No effective change!
F377: CDDCF3  		call	id_wdef
              		;	Fall to id_gbno
              		
              	; Sets the IDE registers to point at the current geometric block
              	;
              	; Returns block # in de
              	; uses: af, de, hl 
F37A: 2AC0F8  	id_sbno:ld	hl,(id_ctrk)
F37D: 29      		add	hl,hl
F37E: 29      		add	hl,hl
F37F: 29      		add	hl,hl
F380: 29      		add	hl,hl
F381: 3ABFF8  		ld	a,(id_csec)
F384: CB3F    		srl	a
F386: CB3F    		srl	a
F388: B5      		or	l
F389: D3C6    		out	(id_base+0x6),a
F38B: 3ABCF8  		ld	a,(id_curd)
F38E: B4      		or	h
F38F: D3C8    		out	(id_base+0x8),a
F391: AF      		xor	a
F392: D3CA    		out	(id_base+0xA),a
F394: C9      		ret
              		
              	; Ensure sector is in core, and set up for DMA transfer
              	;
              	; uses: all
F395: 3ABDF8  	id_rdwr:ld	a,(id_inco)
F398: B7      		or	a
F399: 200C    		jr	nz,id_rdw0
              		
              		; Read in to cache
F39B: 21C2F8  		ld	hl,id_cach
F39E: CD21F4  		call	id_rphy
              		
              		; Error checking
F3A1: 3E01    		ld	a,1
F3A3: C0      		ret	nz
F3A4: 32BDF8  		ld	(id_inco),a
              		
              		; DMA subsector
F3A7: 2A4DEB  	id_rdw0:ld	hl,(biodma)
F3AA: EB      		ex	de,hl
              	
F3AB: 3ABFF8  		ld	a,(id_csec)
F3AE: E603    		and	0x03
F3B0: 2142F8  		ld	hl,id_cach-128
F3B3: 018000  		ld	bc,128
F3B6: 3C      		inc	a
F3B7: 09      	id_rdw1:add	hl,bc
F3B8: 3D      		dec	a
F3B9: 20FC    		jr	nz,id_rdw1
F3BB: C9      		ret
              	
              	; Reads a sector and DMA transfers it to memory
F3BC: CD95F3  	id_read:call	id_rdwr
F3BF: B7      		or	a
F3C0: C0      		ret	nz
F3C1: EDB0    		ldir
F3C3: C9      		ret
              	
              	
              	; Write a sector from DMA, and defer it if possible
F3C4: C5      	id_writ:push	bc
F3C5: CD95F3  		call	id_rdwr
F3C8: B7      		or	a
F3C9: C1      		pop	bc
F3CA: C0      		ret	nz
F3CB: 3E01    		ld	a,1
F3CD: 32BEF8  		ld	(id_dirt),a
F3D0: 79      		ld	a,c
F3D1: 018000  		ld	bc,128
F3D4: EB      		ex	de,hl
F3D5: EDB0    		ldir
F3D7: FE01    		cp	1
F3D9: 3E00    		ld	a,0
F3DB: C0      		ret	nz
              		
              		; Drop down to defer read
              	
              	
              	; Checks to see if the cache needs to be written back
              	; after a deferred write.
              	;
              	; uses, af
F3DC: 3ABEF8  	id_wdef:ld	a,(id_dirt)
F3DF: B7      		or	a
F3E0: 2815    		jr	z,id_wde1
              	
F3E2: C5      		push	bc
F3E3: D5      		push	de
F3E4: E5      		push	hl
              		
              		; Write physical sector
F3E5: 21C2F8  		ld	hl,id_cach
F3E8: CD41F4  		call	id_wphy
              		
F3EB: E1      		pop	hl
F3EC: D1      		pop	de
F3ED: C1      		pop	bc
              		
              		; Error checking
F3EE: 2803    		jr	z,id_wde0
              		
F3F0: 3E01    		ld	a,1
F3F2: C9      		ret
              		
              		; Cache is no longer dirty
F3F3: AF      	id_wde0:xor	a
F3F4: 32BEF8  		ld	(id_dirt),a
              		
              		; Data no longer in core
F3F7: AF      	id_wde1:xor	a
F3F8: 32BDF8  		ld	(id_inco),a
              		
F3FB: C9      		ret
              		
              	; Loads the GRB into memory from sector 2-3
F3FC: 0E01    	id_grb:	ld	c,1
F3FE: 1802    		jr	id_r2k
              		
              	; Loads the CCP into memory from sectors 4-5
F400: 0E05    	id_ccp:	ld	c,5
              	
              	; Reads in a 2K bytes, starting at track 0, sector (id_r2ks)
              	; This is placed into the cbase
F402: 3EE0    	id_r2k:	ld	a,0xE0
F404: D3CC    		out	(id_base+0xC),a
              		
F406: 060A    		ld	b,10
F408: CD84F4  		call	id_stal
              	
              		; Prepare to load 4 sectors into cbase
F40B: 2100D4  		ld	hl,cbase
F40E: 0604    		ld	b,4
F410: AF      		xor	a
F411: D3C8    		out	(id_base+0x8),a
F413: D3CA    		out	(id_base+0xA),a
              		
F415: 79      	id_r2k1:ld	a,c
F416: D3C6    		out	(id_base+0x6),a
F418: C5      		push	bc
F419: CD21F4  		call	id_rphy
F41C: C1      		pop	bc
F41D: 0C      		inc	c
F41E: 10F5    		djnz	id_r2k1
F420: C9      		ret
              	
              	
              	; Executes a read command
              	; hl = Destination of data
              	;
              	; Returns hl += 512
              	; uses: af, bc, d, hl
F421: 3E01    	id_rphy:ld	a,1
F423: D3C4    		out	(id_base+0x04),a
F425: CD77F4  		call	id_busy
F428: 3E20    		ld	a,0x20
F42A: CD6FF4  		call	id_comm
F42D: CD68F4  		call	id_wdrq
F430: 1600    		ld	d,0
F432: 0EC0    		ld	c,id_base
F434: EDA2    	id_rph0:ini
F436: 0C      		inc	c
F437: EDA2    		ini
F439: 0D      		dec	c
F43A: 15      		dec	d
F43B: 20F7    		jr	nz,id_rph0
F43D: CD77F4  		call	id_busy
F440: C9      		ret
              	
              	; Executes a write command
              	; hl = Source of data
              	;
              	; Returns hl += 512
              	; uses: af, bc, hl
F441: 3E01    	id_wphy:ld	a,1
F443: D3C4    		out	(id_base+0x04),a
F445: CD77F4  		call	id_busy
F448: 3E30    		ld	a,0x30
F44A: CD6FF4  		call	id_comm
F44D: CD68F4  		call	id_wdrq
F450: 0600    		ld	b,0
F452: 4E      	id_wph0:ld	c,(hl)
F453: 23      		inc	hl
F454: 7E      		ld	a,(hl)
F455: D3C1    		out	(id_base+1),a
F457: 23      		inc	hl
F458: 79      		ld	a,c
F459: D3C0    		out	(id_base),a
F45B: 10F5    		djnz	id_wph0
F45D: CD77F4  		call	id_busy
F460: F5      		push	af
F461: 3EE7    		ld	a,0xE7		; Flush cache, some drives expect this
F463: CD6FF4  		call	id_comm
F466: F1      		pop	af
F467: C9      		ret
              		
              	; Waits for a DRQ (Data Request)
              	;
              	; uses: af
F468: DBCE    	id_wdrq:in	a,(id_base+0xE)
F46A: CB5F    		bit	3,a
F46C: 28FA    		jr	z,id_wdrq
F46E: C9      		ret
              		
              	; Issues an IDE command
              	; a = Command to issue
              	;
              	; uses: af
F46F: F5      	id_comm:push	af
F470: CD77F4  		call	id_busy
F473: F1      		pop	af
F474: D3CE    		out	(id_base+0xE),a
F476: C9      		ret
              		
              		
              	; Waits for the IDE drive to no longer be busy
              	;
              	; Resets flag z on error
F477: DBCE    	id_busy:in	a,(id_base+0xE)
F479: CB77    		bit	6,a
F47B: 28FA    		jr	z,id_busy
F47D: CB7F    		bit	7,a
F47F: 20F6    		jr	nz,id_busy
F481: CB47    		bit	0,a
F483: C9      		ret
              	
              	
              	; Waits a little bit
              	;
              	; uses: b
F484: C5      	id_stal:push	bc
F485: C1      		pop	bc
F486: 10FC    		djnz	id_stal
F488: C9      		ret


; +++ segments +++

#CODE _TEXT        = $D400 = 54272,  size = $2089 =  8329
#DATA _BSS         = $F489 = 62601,  size = $0639 =  1593
#DATA _NOINIT      = $FAC2 = 64194,  size = $0252 =   594
#DATA _JUMP_TABLE  = $FF00 = 65280,  size = $0090 =   144

; +++ global symbols +++

ADDAH            = $D758 = 55128  _TEXT       zcpr1_ccp.asm:1311
ADVAN            = $D74B = 55115  _TEXT       zcpr1_ccp.asm:1294
BDOS             = $0005 =     5  _TEXT       zcpr1_ccp.asm:13
BDOSB            = $D609 = 54793  _TEXT       zcpr1_ccp.asm:985
BDOSJP           = $D635 = 54837  _TEXT       zcpr1_ccp.asm:1040
BEL              = $0007 =     7  _TEXT       zcpr1_ccp.asm:475
BREAK            = $D700 = 55040  _TEXT       zcpr1_ccp.asm:1224
BRKBK            = $D709 = 55049  _TEXT       zcpr1_ccp.asm:1229 (unused)
BUFLEN           = $0050 =    80  _TEXT       zcpr1_ccp.asm:555
CALLPROG         = $DB32 = 56114  _TEXT       zcpr1_ccp.asm:2219
CB1              = $D6EF = 55023  _TEXT       zcpr1_ccp.asm:1210
CB2              = $D6F7 = 55031  _TEXT       zcpr1_ccp.asm:1216 (unused)
CBUFF            = $D407 = 54279  _TEXT       zcpr1_ccp.asm:558
CHRCNT           = $D4BD = 54461  _TEXT       zcpr1_ccp.asm:635
CIBPTR           = $D459 = 54361  _TEXT       zcpr1_ccp.asm:577
CIBUF            = $D43E = 54334  _TEXT       zcpr1_ccp.asm:571
CIBUFF           = $D408 = 54280  _TEXT       zcpr1_ccp.asm:561
CIPTR            = $D45B = 54363  _TEXT       zcpr1_ccp.asm:579
CLEVEL3          = $00FF =   255  _TEXT       zcpr1_ccp.asm:442
CLOSE            = $D64B = 54859  _TEXT       zcpr1_ccp.asm:1068
CMDSER           = $D881 = 55425  _TEXT       zcpr1_ccp.asm:1595
CMDTBL           = $D565 = 54629  _TEXT       zcpr1_ccp.asm:817
CMS1             = $D886 = 55430  _TEXT       zcpr1_ccp.asm:1606
CMS2             = $D88B = 55435  _TEXT       zcpr1_ccp.asm:1609
CMS3             = $D899 = 55449  _TEXT       zcpr1_ccp.asm:1620
CMS4             = $D89C = 55452  _TEXT       zcpr1_ccp.asm:1623
CNVBUF           = $D6EA = 55018  _TEXT       zcpr1_ccp.asm:1206
COM              = $DAF1 = 56049  _TEXT       zcpr1_ccp.asm:2180
COM1             = $DB17 = 56087  _TEXT       zcpr1_ccp.asm:2201
COM4             = $DB60 = 56160  _TEXT       zcpr1_ccp.asm:2239
COM5             = $DB69 = 56169  _TEXT       zcpr1_ccp.asm:2249
COM6             = $DB6F = 56175  _TEXT       zcpr1_ccp.asm:2253
COM7             = $DB77 = 56183  _TEXT       zcpr1_ccp.asm:2264 (unused)
COMLOG           = $D7F8 = 55288  _TEXT       zcpr1_ccp.asm:1462
COMMSG           = $D477 = 54391  _TEXT       zcpr1_ccp.asm:588
CONIN            = $D5BB = 54715  _TEXT       zcpr1_ccp.asm:899
CONOUT           = $D5AE = 54702  _TEXT       zcpr1_ccp.asm:886
CPR              = $D4C3 = 54467  _TEXT       zcpr1_ccp.asm:684
CPR1             = $D4BF = 54463  _TEXT       zcpr1_ccp.asm:669
CPRDIR           = $00FF =   255  _TEXT       zcpr1_ccp.asm:356
CPRLST           = $00FF =   255  _TEXT       zcpr1_ccp.asm:355
CPRMPT           = $003E =    62  _TEXT       zcpr1_ccp.asm:462
CPRTYP           = $00FF =   255  _TEXT       zcpr1_ccp.asm:352
CR               = $000D =    13  _TEXT       zcpr1_ccp.asm:471
CRLF             = $D5A7 = 54695  _TEXT       zcpr1_ccp.asm:881
DEFDMA           = $D62C = 54828  _TEXT       zcpr1_ccp.asm:1032
DEFUSR           = $0000 =     0  _TEXT       zcpr1_ccp.asm:337
DELETE           = $D665 = 54885  _TEXT       zcpr1_ccp.asm:1092
DFU              = $DADF = 56031  _TEXT       zcpr1_ccp.asm:2133
DFUSR            = $DBB3 = 56243  _TEXT       zcpr1_ccp.asm:2359
DIR              = $D8A3 = 55459  _TEXT       zcpr1_ccp.asm:1645
DIR10            = $D940 = 55616  _TEXT       zcpr1_ccp.asm:1773
DIR11            = $D94A = 55626  _TEXT       zcpr1_ccp.asm:1778
DIR2             = $D8D2 = 55506  _TEXT       zcpr1_ccp.asm:1670
DIR2A            = $D8D3 = 55507  _TEXT       zcpr1_ccp.asm:1672 (unused)
DIR3             = $D8E1 = 55521  _TEXT       zcpr1_ccp.asm:1691
DIR4             = $D904 = 55556  _TEXT       zcpr1_ccp.asm:1726
DIR5             = $D90C = 55564  _TEXT       zcpr1_ccp.asm:1741
DIR6             = $D90E = 55566  _TEXT       zcpr1_ccp.asm:1743
DIR7             = $D929 = 55593  _TEXT       zcpr1_ccp.asm:1758
DIR8             = $D92B = 55595  _TEXT       zcpr1_ccp.asm:1760
DIR9             = $D93F = 55615  _TEXT       zcpr1_ccp.asm:1771
DIRPR            = $D8D3 = 55507  _TEXT       zcpr1_ccp.asm:1680
DIRPTR           = $D7DB = 55259  _TEXT       zcpr1_ccp.asm:1435
DLOG5            = $D7F5 = 55285  _TEXT       zcpr1_ccp.asm:1458
DLOGIN           = $D7EE = 55278  _TEXT       zcpr1_ccp.asm:1453
DMASET           = $D62F = 54831  _TEXT       zcpr1_ccp.asm:1034
DRUSER           = $00FF =   255  _TEXT       zcpr1_ccp.asm:348
ENTRY            = $D400 = 54272  _TEXT       zcpr1_ccp.asm:516
EPRMPT           = $0000 =     0  _TEXT       zcpr1_ccp.asm:350
ERA              = $D954 = 55636  _TEXT       zcpr1_ccp.asm:1801
ERA1             = $D96D = 55661  _TEXT       zcpr1_ccp.asm:1813
ERARJ            = $D967 = 55655  _TEXT       zcpr1_ccp.asm:1810 (unused)
ERR1             = $D724 = 55076  _TEXT       zcpr1_ccp.asm:1262
ERR2             = $D717 = 55063  _TEXT       zcpr1_ccp.asm:1253
ERRLOG           = $DBF6 = 56310  _TEXT       zcpr1_ccp.asm:2425
ERROR            = $D711 = 55057  _TEXT       zcpr1_ccp.asm:1250
EXECADR          = $DB85 = 56197  _TEXT       zcpr1_ccp.asm:2273
EXTEST           = $DA62 = 55906  _TEXT       zcpr1_ccp.asm:2032
FALSE            = $0000 =     0  _TEXT       zcpr1_ccp.asm:146
FCBCR            = $D4BB = 54459  _TEXT       zcpr1_ccp.asm:628
FCBDM            = $D4AB = 54443  _TEXT       zcpr1_ccp.asm:626
FCBDN            = $D49B = 54427  _TEXT       zcpr1_ccp.asm:617
FCBFN            = $D49C = 54428  _TEXT       zcpr1_ccp.asm:619
FCBFT            = $D4A4 = 54436  _TEXT       zcpr1_ccp.asm:621
FENCE            = $007C =   124  _TEXT       zcpr1_ccp.asm:449
FFEED            = $000C =    12  _TEXT       zcpr1_ccp.asm:474
FILLQ            = $D94C = 55628  _TEXT       zcpr1_ccp.asm:1784
FQLP             = $D94E = 55630  _TEXT       zcpr1_ccp.asm:1786
GET              = $DB93 = 56211  _TEXT       zcpr1_ccp.asm:2291
GETDRV           = $D628 = 54824  _TEXT       zcpr1_ccp.asm:1026
GETUSR           = $D66E = 54894  _TEXT       zcpr1_ccp.asm:1103
GO               = $DAEC = 56044  _TEXT       zcpr1_ccp.asm:2169
GOTSYS           = $D8C6 = 55494  _TEXT       zcpr1_ccp.asm:1662
GRBDOS           = $D646 = 54854  _TEXT       zcpr1_ccp.asm:1063
HEXNUM           = $D79B = 55195  _TEXT       zcpr1_ccp.asm:1381
HNUM0            = $D79E = 55198  _TEXT       zcpr1_ccp.asm:1383
HNUM1            = $D7A6 = 55206  _TEXT       zcpr1_ccp.asm:1387
HNUM2            = $D7BD = 55229  _TEXT       zcpr1_ccp.asm:1400
HNUM3            = $D7D8 = 55256  _TEXT       zcpr1_ccp.asm:1428
INPASS           = $0000 =     0  _TEXT       zcpr1_ccp.asm:346
JUMP             = $DAE7 = 56039  _TEXT       zcpr1_ccp.asm:2149
LC1              = $D5E2 = 54754  _TEXT       zcpr1_ccp.asm:941
LCOUT            = $D5D6 = 54742  _TEXT       zcpr1_ccp.asm:924
LF               = $000A =    10  _TEXT       zcpr1_ccp.asm:472
LIST             = $D97B = 55675  _TEXT       zcpr1_ccp.asm:1846
LOADADR          = $DBD1 = 56273  _TEXT       zcpr1_ccp.asm:2391
LOGIN            = $D638 = 54840  _TEXT       zcpr1_ccp.asm:1043
LSTOUT           = $D5DD = 54749  _TEXT       zcpr1_ccp.asm:937 (unused)
LTAB             = $D9EA = 55786  _TEXT       zcpr1_ccp.asm:1931
MAXDR            = $0001 =     1  _TEXT       zcpr1_ccp.asm:333 (unused)
MAXDRIV          = $0000 =     0  _TEXT       zcpr1_ccp.asm:330
MAXUSR           = $000F =    15  _TEXT       zcpr1_ccp.asm:326
MBUFF            = $D406 = 54278  _TEXT       zcpr1_ccp.asm:556
MEMLOAD          = $DB9E = 56222  _TEXT       zcpr1_ccp.asm:2308
ML2              = $DBD3 = 56275  _TEXT       zcpr1_ccp.asm:2393
ML3              = $DBEC = 56300  _TEXT       zcpr1_ccp.asm:2408
ML4              = $DBF0 = 56304  _TEXT       zcpr1_ccp.asm:2415
MLA              = $DBAA = 56234  _TEXT       zcpr1_ccp.asm:2318
MLA0             = $DBC1 = 56257  _TEXT       zcpr1_ccp.asm:2374
MLA1             = $DBD0 = 56272  _TEXT       zcpr1_ccp.asm:2390
MLERR            = $DBF3 = 56307  _TEXT       zcpr1_ccp.asm:2419
NCHARS           = $0004 =     4  _TEXT       zcpr1_ccp.asm:812
NCMNDS           = $000B =    11  _TEXT       zcpr1_ccp.asm:871
NLINES           = $0018 =    24  _TEXT       zcpr1_ccp.asm:447
NOBOP            = $D9FA = 55802  _TEXT       zcpr1_ccp.asm:1943
NOECHO           = $D5C9 = 54729  _TEXT       zcpr1_ccp.asm:913
NOHYPH           = $D9D2 = 55762  _TEXT       zcpr1_ccp.asm:1916
NOLOG            = $D4E4 = 54500  _TEXT       zcpr1_ccp.asm:711
NOSLAS           = $D996 = 55702  _TEXT       zcpr1_ccp.asm:1880
NRCMDS           = $0003 =     3  _TEXT       zcpr1_ccp.asm:839 (unused)
NUM0             = $D773 = 55155  _TEXT       zcpr1_ccp.asm:1341
NUM1             = $D779 = 55161  _TEXT       zcpr1_ccp.asm:1345
NUM2             = $D796 = 55190  _TEXT       zcpr1_ccp.asm:1369
NUMBASE          = $0048 =    72  _TEXT       zcpr1_ccp.asm:464
NUMBER           = $D75D = 55133  _TEXT       zcpr1_ccp.asm:1321
NUMERR           = $D798 = 55192  _TEXT       zcpr1_ccp.asm:1375
NUMS             = $D765 = 55141  _TEXT       zcpr1_ccp.asm:1328
NUMS1            = $D76F = 55151  _TEXT       zcpr1_ccp.asm:1335
OPEN             = $D644 = 54852  _TEXT       zcpr1_ccp.asm:1060
OPENF            = $D63D = 54845  _TEXT       zcpr1_ccp.asm:1055
OUTPUT           = $D5B1 = 54705  _TEXT       zcpr1_ccp.asm:889
PAGCNT           = $D4BC = 54460  _TEXT       zcpr1_ccp.asm:633
PGBAK            = $D602 = 54786  _TEXT       zcpr1_ccp.asm:973
PGDFLG           = $0050 =    80  _TEXT       zcpr1_ccp.asm:452
PGDFLT           = $0000 =     0  _TEXT       zcpr1_ccp.asm:451
PGFLG            = $D5F5 = 54773  _TEXT       zcpr1_ccp.asm:960
PRFLG            = $D5D8 = 54744  _TEXT       zcpr1_ccp.asm:929
PRIN1            = $D61D = 54813  _TEXT       zcpr1_ccp.asm:1011
PRINT            = $D615 = 54805  _TEXT       zcpr1_ccp.asm:1000
PRINTC           = $D610 = 54800  _TEXT       zcpr1_ccp.asm:995
PRNLE            = $DA58 = 55896  _TEXT       zcpr1_ccp.asm:2022
PRNNF            = $D55A = 54618  _TEXT       zcpr1_ccp.asm:804
PRT              = $D9F9 = 55801  _TEXT       zcpr1_ccp.asm:1942
QMCNT            = $D4BE = 54462  _TEXT       zcpr1_ccp.asm:637
RAS              = $0000 =     0  _TEXT       zcpr1_ccp.asm:315
RB1              = $D6D4 = 54996  _TEXT       zcpr1_ccp.asm:1185
RCPRNL           = $D549 = 54601  _TEXT       zcpr1_ccp.asm:793
READ             = $D607 = 54791  _TEXT       zcpr1_ccp.asm:980
READF            = $D604 = 54788  _TEXT       zcpr1_ccp.asm:978
REDBUF           = $D689 = 54921  _TEXT       zcpr1_ccp.asm:1140
REN              = $DA91 = 55953  _TEXT       zcpr1_ccp.asm:2063
REN0             = $DA98 = 55960  _TEXT       zcpr1_ccp.asm:2068 (unused)
REN1             = $DAAA = 55978  _TEXT       zcpr1_ccp.asm:2076 (unused)
REN2             = $DAC1 = 56001  _TEXT       zcpr1_ccp.asm:2091
REN3             = $DACF = 56015  _TEXT       zcpr1_ccp.asm:2099 (unused)
REN4             = $DAD2 = 56018  _TEXT       zcpr1_ccp.asm:2101
RESET            = $D633 = 54835  _TEXT       zcpr1_ccp.asm:1038
RESETUSR         = $D669 = 54889  _TEXT       zcpr1_ccp.asm:1098
RESTRT           = $D4F8 = 54520  _TEXT       zcpr1_ccp.asm:727
RNGSUB           = $D4E8 = 54504  _TEXT       zcpr1_ccp.asm:714
RS00             = $D516 = 54550  _TEXT       zcpr1_ccp.asm:750
RS000            = $D51B = 54555  _TEXT       zcpr1_ccp.asm:756 (unused)
RS1              = $D51E = 54558  _TEXT       zcpr1_ccp.asm:761
RSTCPR           = $D546 = 54598  _TEXT       zcpr1_ccp.asm:788
RSTJP            = $DADC = 56028  _TEXT       zcpr1_ccp.asm:2118
SAVE             = $DA0C = 55820  _TEXT       zcpr1_ccp.asm:1976
SAVE0            = $DA2C = 55852  _TEXT       zcpr1_ccp.asm:1994
SAVE1            = $DA33 = 55859  _TEXT       zcpr1_ccp.asm:1997
SAVE2            = $DA4F = 55887  _TEXT       zcpr1_ccp.asm:2014
SAVE3            = $DA5F = 55903  _TEXT       zcpr1_ccp.asm:2026
SBLANK           = $D74F = 55119  _TEXT       zcpr1_ccp.asm:1300
SCAN15           = $D83F = 55359  _TEXT       zcpr1_ccp.asm:1525
SCAN16           = $D842 = 55362  _TEXT       zcpr1_ccp.asm:1530
SCAN17           = $D844 = 55364  _TEXT       zcpr1_ccp.asm:1532
SCAN2            = $D81E = 55326  _TEXT       zcpr1_ccp.asm:1499
SCAN3            = $D824 = 55332  _TEXT       zcpr1_ccp.asm:1503
SCAN4            = $D82A = 55338  _TEXT       zcpr1_ccp.asm:1511
SCANER           = $D802 = 55298  _TEXT       zcpr1_ccp.asm:1482
SCANF            = $D852 = 55378  _TEXT       zcpr1_ccp.asm:1551
SCANF1           = $D863 = 55395  _TEXT       zcpr1_ccp.asm:1560
SCANF2           = $D86A = 55402  _TEXT       zcpr1_ccp.asm:1565
SCANF3           = $D86C = 55404  _TEXT       zcpr1_ccp.asm:1567
SCANF4           = $D873 = 55411  _TEXT       zcpr1_ccp.asm:1575
SCANX            = $D805 = 55301  _TEXT       zcpr1_ccp.asm:1484
SCQ              = $D879 = 55417  _TEXT       zcpr1_ccp.asm:1585
SDELM            = $D72E = 55086  _TEXT       zcpr1_ccp.asm:1270
SEAR1            = $D652 = 54866  _TEXT       zcpr1_ccp.asm:1074
SEARF            = $D64F = 54863  _TEXT       zcpr1_ccp.asm:1072
SEARN            = $D656 = 54870  _TEXT       zcpr1_ccp.asm:1078
SECTFLG          = $0053 =    83  _TEXT       zcpr1_ccp.asm:467
SECURE           = $0000 =     0  _TEXT       zcpr1_ccp.asm:335
SETTSE           = $DBB8 = 56248  _TEXT       zcpr1_ccp.asm:2366
SETU0D           = $D683 = 54915  _TEXT       zcpr1_ccp.asm:1130
SETUD            = $D674 = 54900  _TEXT       zcpr1_ccp.asm:1117
SETUSR           = $D670 = 54896  _TEXT       zcpr1_ccp.asm:1105
SLOGIN           = $D7E4 = 55268  _TEXT       zcpr1_ccp.asm:1444
SOFLG            = $0053 =    83  _TEXT       zcpr1_ccp.asm:457
SPRMPT           = $0024 =    36  _TEXT       zcpr1_ccp.asm:461
STACK            = $D477 = 54391  _TEXT       zcpr1_ccp.asm:584
SUBA             = $00FF =   255  _TEXT       zcpr1_ccp.asm:421
SUBFCB           = $D47A = 54394  _TEXT       zcpr1_ccp.asm:593
SUBFCR           = $D49A = 54426  _TEXT       zcpr1_ccp.asm:613
SUBFRC           = $D489 = 54409  _TEXT       zcpr1_ccp.asm:610
SUBFS2           = $D488 = 54408  _TEXT       zcpr1_ccp.asm:608
SUBKIL           = $D65A = 54874  _TEXT       zcpr1_ccp.asm:1084
SUPRES           = $0000 =     0  _TEXT       zcpr1_ccp.asm:459
SUSER            = $DAD9 = 56025  _TEXT       zcpr1_ccp.asm:2116
SYSFLG           = $0041 =    65  _TEXT       zcpr1_ccp.asm:455
SYSTST           = $D8F3 = 55539  _TEXT       zcpr1_ccp.asm:1704
TAB              = $0009 =     9  _TEXT       zcpr1_ccp.asm:473
TBUFF            = $0080 =   128  _TEXT       zcpr1_ccp.asm:16
TDRIVE           = $D684 = 54916  _TEXT       zcpr1_ccp.asm:1131
TEMPDR           = $D7F9 = 55289  _TEXT       zcpr1_ccp.asm:1463
TFCB             = $005C =    92  _TEXT       zcpr1_ccp.asm:15
TMPUSR           = $D66A = 54890  _TEXT       zcpr1_ccp.asm:1099
TPA              = $0100 =   256  _TEXT       zcpr1_ccp.asm:484
TRUE             = $00FF =   255  _TEXT       zcpr1_ccp.asm:147
TSELUSR          = $DBB5 = 56245  _TEXT       zcpr1_ccp.asm:2361
TWOCOL           = $0000 =     0  _TEXT       zcpr1_ccp.asm:377
TWOPOK           = $D8FB = 55547  _TEXT       zcpr1_ccp.asm:1718 (unused)
TYPE             = $D97F = 55679  _TEXT       zcpr1_ccp.asm:1859
TYPE0            = $D980 = 55680  _TEXT       zcpr1_ccp.asm:1867
TYPE1            = $D9AE = 55726  _TEXT       zcpr1_ccp.asm:1890
TYPE2            = $D9BF = 55743  _TEXT       zcpr1_ccp.asm:1901
TYPE2L           = $D9FD = 55805  _TEXT       zcpr1_ccp.asm:1948
TYPE3            = $DA07 = 55815  _TEXT       zcpr1_ccp.asm:1954
TYPE4            = $DA09 = 55817  _TEXT       zcpr1_ccp.asm:1957
UCASE            = $D5C0 = 54720  _TEXT       zcpr1_ccp.asm:905
UDFLAG           = $0004 =     4  _TEXT       zcpr1_ccp.asm:11
USER             = $DAD5 = 56021  _TEXT       zcpr1_ccp.asm:2113
USRMAX           = $0000 =     0  _TEXT       zcpr1_ccp.asm:319
USRNUM           = $D70B = 55051  _TEXT       zcpr1_ccp.asm:1235
WIDE             = $00FF =   255  _TEXT       zcpr1_ccp.asm:448
WSTYPE           = $00FF =   255  _TEXT       zcpr1_ccp.asm:353
YESCR            = $D9F7 = 55799  _TEXT       zcpr1_ccp.asm:1940
_BSS             = $F489 = 62601  _BSS        config_ide_fdc.asm:44 (unused)
_BSS_end         = $FAC2 = 64194  _BSS        config_ide_fdc.asm:44
_BSS_size        = $0639 =  1593  _BSS        config_ide_fdc.asm:44
_JUMP_TABLE      = $FF00 = 65280  _JUMP_TABLE config_ide_fdc.asm:46 (unused)
_JUMP_TABLE_end  = $FF90 = 65424  _JUMP_TABLE config_ide_fdc.asm:46 (unused)
_JUMP_TABLE_size = $0090 =   144  _JUMP_TABLE config_ide_fdc.asm:46 (unused)
_NOINIT          = $FAC2 = 64194  _NOINIT     config_ide_fdc.asm:45 (unused)
_NOINIT_end      = $FD14 = 64788  _NOINIT     config_ide_fdc.asm:45 (unused)
_NOINIT_size     = $0252 =   594  _NOINIT     config_ide_fdc.asm:45 (unused)
_TEXT            = $D400 = 54272  _TEXT       config_ide_fdc.asm:43 (unused)
_TEXT_end        = $F489 = 62601  _TEXT       config_ide_fdc.asm:43
_TEXT_size       = $2089 =  8329  _TEXT       config_ide_fdc.asm:43 (unused)
active           = $DF42 = 57154  _TEXT       bdos.asm:489
adda2hl          = $E164 = 57700  _TEXT       bdos.asm:918
alloc0           = $E9CA = 59850  _TEXT       bdos.asm:2466
alloc1           = $E9CC = 59852  _TEXT       bdos.asm:2467
alocvect         = $E9BF = 59839  _TEXT       bdos.asm:2456
auto             = $E9DE = 59870  _TEXT       bdos.asm:2481
autoflag         = $E9E0 = 59872  _TEXT       bdos.asm:2483
autosel          = $E851 = 59473  _TEXT       bdos.asm:2196
autosl1          = $E875 = 59509  _TEXT       bdos.asm:2212
backup           = $DDA4 = 56740  _TEXT       bdos.asm:249
backup1          = $DDAC = 56748  _TEXT       bdos.asm:252
badsctr          = $DC09 = 56329  _TEXT       bdos.asm:33
badsec           = $DCCA = 56522  _TEXT       bdos.asm:104
badsel           = $DCD5 = 56533  _TEXT       bdos.asm:105
badslct          = $DC0B = 56331  _TEXT       bdos.asm:34
batch            = $D4E8 = 54504  _TEXT       zcpr1_ccp.asm:713
bdevsw           = $EB6E = 60270  _TEXT       config_ide_fdc.asm:162
bdosdrv          = $DCC6 = 56518  _TEXT       bdos.asm:103
bdoserr          = $DCBA = 56506  _TEXT       bdos.asm:102
bigdisk          = $E9DD = 59869  _TEXT       bdos.asm:2480
biodma           = $EB4D = 60237  _TEXT       bios.asm:337
bitmap           = $E2A3 = 58019  _TEXT       bdos.asm:1211
bitmap1          = $E2B1 = 58033  _TEXT       bdos.asm:1226
bitmap2          = $E2D2 = 58066  _TEXT       bdos.asm:1247
bitmap3          = $E2F6 = 58102  _TEXT       bdos.asm:1264
blkmask          = $E9C4 = 59844  _TEXT       bdos.asm:2462
blknmbr          = $E9E5 = 59877  _TEXT       bdos.asm:2487
blkshft          = $E9C3 = 59843  _TEXT       bdos.asm:2461
boot             = $EA33 = 59955  _TEXT       bios.asm:42
bs               = $0008 =     8  _TEXT       zcpr1_ccp.asm:24
bshook           = $EB18 = 60184  _TEXT       bios.asm:288
callbd           = $EAF6 = 60150  _TEXT       bios.asm:230
callmj           = $EB4A = 60234  _TEXT       bios.asm:331
cbase            = $D400 = 54272  _TEXT       zcpr1_ccp.asm:515
cbinit           = $EB5E = 60254  _TEXT       config_ide_fdc.asm:93
cdevsw           = $EBAE = 60334  _TEXT       config_ide_fdc.asm:201
cdindi0          = $EB22 = 60194  _TEXT       bios.asm:296
cdindi1          = $EB28 = 60200  _TEXT       bios.asm:300
cdindir          = $EB1E = 60190  _TEXT       bios.asm:294
cfirq            = $EB64 = 60260  _TEXT       config_ide_fdc.asm:109 (unused)
charbuf          = $DF0E = 57102  _TEXT       bdos.asm:478
checkdir         = $E19E = 57758  _TEXT       bdos.asm:991
checksum         = $E0F7 = 57591  _TEXT       bdos.asm:830
chgnam1          = $E427 = 58407  _TEXT       bdos.asm:1503
chgnames         = $E416 = 58390  _TEXT       bdos.asm:1495
chkblk           = $E084 = 57476  _TEXT       bdos.asm:737
chkchar          = $DD14 = 56596  _TEXT       bdos.asm:146
chkdir1          = $E1C4 = 57796  _TEXT       bdos.asm:1011
chknmbr          = $E18C = 57740  _TEXT       bdos.asm:964
chkrofl          = $E144 = 57668  _TEXT       bdos.asm:894
chksum1          = $E0FD = 57597  _TEXT       bdos.asm:833
chkvect          = $E9BD = 59837  _TEXT       bdos.asm:2455
chkwprt          = $E154 = 57684  _TEXT       bdos.asm:905
chrout           = $EAB9 = 60089  _TEXT       bios.asm:171
ckbitmap         = $E235 = 57909  _TEXT       bdos.asm:1105
ckbmap1          = $E256 = 57942  _TEXT       bdos.asm:1140
ckcon1           = $DD42 = 56642  _TEXT       bdos.asm:176
ckcon2           = $DD45 = 56645  _TEXT       bdos.asm:177
ckconsol         = $DD23 = 56611  _TEXT       bdos.asm:162
ckfilpos         = $E1F5 = 57845  _TEXT       bdos.asm:1054
ckrof1           = $E147 = 57671  _TEXT       bdos.asm:895
cksumtbl         = $E9EC = 59884  _TEXT       bdos.asm:2495
clears2          = $E172 = 57714  _TEXT       bdos.asm:935
closefil         = $E8A5 = 59557  _TEXT       bdos.asm:2243
closeflg         = $E9D2 = 59858  _TEXT       bdos.asm:2472
closeit          = $E4A2 = 58530  _TEXT       bdos.asm:1589
closeit1         = $E4CD = 58573  _TEXT       bdos.asm:1609
closeit2         = $E4DB = 58587  _TEXT       bdos.asm:1617
closeit3         = $E4E1 = 58593  _TEXT       bdos.asm:1621
closeit4         = $E4E8 = 58600  _TEXT       bdos.asm:1624
closeit5         = $E4FD = 58621  _TEXT       bdos.asm:1637
closeit6         = $E517 = 58647  _TEXT       bdos.asm:1655
closeit7         = $E51F = 58655  _TEXT       bdos.asm:1658
cntrlc           = $0003 =     3  _TEXT       zcpr1_ccp.asm:22
cntrle           = $0005 =     5  _TEXT       zcpr1_ccp.asm:23
cntrlp           = $0010 =    16  _TEXT       zcpr1_ccp.asm:29
cntrlr           = $0012 =    18  _TEXT       zcpr1_ccp.asm:30
cntrls           = $0013 =    19  _TEXT       zcpr1_ccp.asm:31
cntrlu           = $0015 =    21  _TEXT       zcpr1_ccp.asm:32
cntrlx           = $0018 =    24  _TEXT       zcpr1_ccp.asm:33
cntrlz           = $001A =    26  _TEXT       zcpr1_ccp.asm:34 (unused)
comblk           = $E077 = 57463  _TEXT       bdos.asm:728
comprand         = $E7A5 = 59301  _TEXT       bdos.asm:2062
conin            = $EAAB = 60075  _TEXT       bios.asm:158
conout           = $EAB7 = 60087  _TEXT       bios.asm:170
const            = $EAA0 = 60064  _TEXT       bios.asm:146
counter          = $E9D8 = 59864  _TEXT       bdos.asm:2478
cpmlow           = $EA98 = 60056  _TEXT       bios.asm:135
cr               = $000D =    13  _TEXT       zcpr1_ccp.asm:28
curpos           = $DF0C = 57100  _TEXT       bdos.asm:476
de2hl            = $DF4F = 57167  _TEXT       bdos.asm:507
de2hl1           = $DF50 = 57168  _TEXT       bdos.asm:508
default          = $0000 =     0              config_ide_fdc.asm:19
defdma           = $E1DA = 57818  _TEXT       bdos.asm:1029
del              = $007F =   127  _TEXT       zcpr1_ccp.asm:35
delfile          = $E8D7 = 59607  _TEXT       bdos.asm:2274
dirbuf           = $E9B9 = 59833  _TEXT       bdos.asm:2453
dirc1            = $DEE0 = 57056  _TEXT       bdos.asm:434
dircbuf          = $FF10 = 65296  _JUMP_TABLE config_ide_fdc.asm:48
dircio           = $DED4 = 57044  _TEXT       bdos.asm:428
dirdma           = $E1E0 = 57824  _TEXT       bdos.asm:1034
dirdma1          = $E1E3 = 57827  _TEXT       bdos.asm:1039
dirread          = $E1D4 = 57812  _TEXT       bdos.asm:1024
dirsize          = $E9C8 = 59848  _TEXT       bdos.asm:2465
dirwrite         = $E1C6 = 57798  _TEXT       bdos.asm:1016
diskpb           = $E9BB = 59835  _TEXT       bdos.asm:2454
diskro           = $DCE1 = 56545  _TEXT       bdos.asm:107
doread           = $DFB2 = 57266  _TEXT       bdos.asm:578
dowrite          = $DFB8 = 57272  _TEXT       bdos.asm:583
dsksize          = $E9C6 = 59846  _TEXT       bdos.asm:2464
eboot            = $EA41 = 59969  _TEXT       bios.asm:57
emptyfcb         = $E9AC = 59820  _TEXT       bdos.asm:2440
entry            = $0005 =     5  _TEXT       zcpr1_ccp.asm:12 (unused)
eparam           = $E9D6 = 59862  _TEXT       bdos.asm:2476
erafil1          = $E3A4 = 58276  _TEXT       bdos.asm:1381
erafile          = $E39C = 58268  _TEXT       bdos.asm:1378
error1           = $DC99 = 56473  _TEXT       bdos.asm:85
error2           = $DCA5 = 56485  _TEXT       bdos.asm:91
error3           = $DCAB = 56491  _TEXT       bdos.asm:94
error4           = $DCB1 = 56497  _TEXT       bdos.asm:97
error5           = $DCB4 = 56500  _TEXT       bdos.asm:99
extblk           = $E05E = 57438  _TEXT       bdos.asm:709
extblk1          = $E071 = 57457  _TEXT       bdos.asm:719
extmask          = $E9C5 = 59845  _TEXT       bdos.asm:2463
fbase            = $DC06 = 56326  _TEXT       bdos.asm:29
fbase1           = $DC11 = 56337  _TEXT       bdos.asm:41
fcb2hl           = $E15E = 57694  _TEXT       bdos.asm:913
fcbpos           = $E9E9 = 59881  _TEXT       bdos.asm:2489
fcbset           = $E3FD = 58365  _TEXT       bdos.asm:1473
fcreate          = $E8EC = 59628  _TEXT       bdos.asm:2291
ff               = $000C =    12  _TEXT       zcpr1_ccp.asm:27 (unused)
filepos          = $E9EA = 59882  _TEXT       bdos.asm:2490
filero           = $DCDC = 56540  _TEXT       bdos.asm:106
filesize         = $E94D = 59725  _TEXT       bdos.asm:2365
findfst          = $E318 = 58136  _TEXT       bdos.asm:1298
findnxt          = $E32D = 58157  _TEXT       bdos.asm:1311
fndnxt1          = $E34A = 58186  _TEXT       bdos.asm:1324
fndnxt2          = $E353 = 58195  _TEXT       bdos.asm:1328
fndnxt3          = $E373 = 58227  _TEXT       bdos.asm:1344
fndnxt4          = $E37C = 58236  _TEXT       bdos.asm:1353
fndnxt5          = $E383 = 58243  _TEXT       bdos.asm:1358
fndnxt6          = $E394 = 58260  _TEXT       bdos.asm:1371
fndspa1          = $E3C0 = 58304  _TEXT       bdos.asm:1411
fndspa2          = $E3D1 = 58321  _TEXT       bdos.asm:1434
fndspa3          = $E3EC = 58348  _TEXT       bdos.asm:1455
fndspa4          = $E3F4 = 58356  _TEXT       bdos.asm:1465
fndspace         = $E3BE = 58302  _TEXT       bdos.asm:1405
fndstat          = $E9D4 = 59860  _TEXT       bdos.asm:2474
functns          = $DC47 = 56391  _TEXT       bdos.asm:76
getaloc          = $E911 = 59665  _TEXT       bdos.asm:2319
getblk1          = $E045 = 57413  _TEXT       bdos.asm:687
getblk2          = $E053 = 57427  _TEXT       bdos.asm:696
getblk3          = $E05C = 57436  _TEXT       bdos.asm:701
getblock         = $E03E = 57406  _TEXT       bdos.asm:684
getchar          = $DCFB = 56571  _TEXT       bdos.asm:124
getcon           = $DEC8 = 57032  _TEXT       bdos.asm:416
getcrnt          = $E904 = 59652  _TEXT       bdos.asm:2308
getcsts          = $DEFE = 57086  _TEXT       bdos.asm:461
getecho          = $DD06 = 56582  _TEXT       bdos.asm:133
getempty         = $E524 = 58660  _TEXT       bdos.asm:1665
getfst           = $E8AB = 59563  _TEXT       bdos.asm:2250
getfst1          = $E8C2 = 59586  _TEXT       bdos.asm:2261
getiob           = $DEED = 57069  _TEXT       bdos.asm:442
getlog           = $E8FE = 59646  _TEXT       bdos.asm:2303
getmt1           = $E546 = 58694  _TEXT       bdos.asm:1681
getnext          = $E55A = 58714  _TEXT       bdos.asm:1695
getnxt           = $E8C8 = 59592  _TEXT       bdos.asm:2266
getparm          = $E926 = 59686  _TEXT       bdos.asm:2336
getprm1          = $E929 = 59689  _TEXT       bdos.asm:2337
getrdr           = $DECE = 57038  _TEXT       bdos.asm:421
getrov           = $E917 = 59671  _TEXT       bdos.asm:2324
gets2            = $E169 = 57705  _TEXT       bdos.asm:927
getuser          = $E92D = 59693  _TEXT       bdos.asm:2344
getver           = $E87E = 59518  _TEXT       bdos.asm:2220
getwprt          = $E11E = 57630  _TEXT       bdos.asm:867
goback           = $E974 = 59764  _TEXT       bdos.asm:2400
goback1          = $E991 = 59793  _TEXT       bdos.asm:2412
gtnext1          = $E583 = 58755  _TEXT       bdos.asm:1715
gtnext2          = $E58E = 58766  _TEXT       bdos.asm:1724
gtnext3          = $E5AC = 58796  _TEXT       bdos.asm:1735
gtnext4          = $E5AF = 58799  _TEXT       bdos.asm:1736
gtnext5          = $E5B6 = 58806  _TEXT       bdos.asm:1743
home             = $EAD9 = 60121  _TEXT       bios.asm:204
homedrv          = $DFA1 = 57249  _TEXT       bdos.asm:564
id_alva          = $FB14 = 64276  _NOINIT     nabu_ide.asm:28
id_alvb          = $FB94 = 64404  _NOINIT     nabu_ide.asm:29
id_alvc          = $FC14 = 64532  _NOINIT     nabu_ide.asm:30
id_alvd          = $FC94 = 64660  _NOINIT     nabu_ide.asm:31
id_atla          = $0041 =    65  _TEXT       nabu_ide.asm:41
id_ayda          = $0040 =    64  _TEXT       nabu_ide.asm:40
id_base          = $00C0 =   192  _TEXT       nabu_ide.asm:38
id_busy          = $F477 = 62583  _TEXT       nabu_ide.asm:430
id_cach          = $F8C2 = 63682  _BSS        nabu_ide.asm:24
id_ccp           = $F400 = 62464  _TEXT       nabu_ide.asm:332
id_comm          = $F46F = 62575  _TEXT       nabu_ide.asm:420
id_csec          = $F8BF = 63679  _BSS        nabu_ide.asm:21
id_ctrk          = $F8C0 = 63680  _BSS        nabu_ide.asm:22
id_curd          = $F8BC = 63676  _BSS        nabu_ide.asm:17
id_dirt          = $F8BE = 63678  _BSS        nabu_ide.asm:19
id_dpb           = $F2D9 = 62169  _TEXT       nabu_ide.asm:83
id_dpha          = $F299 = 62105  _TEXT       nabu_ide.asm:51
id_dphb          = $F2A9 = 62121  _TEXT       nabu_ide.asm:59
id_dphc          = $F2B9 = 62137  _TEXT       nabu_ide.asm:67
id_dphd          = $F2C9 = 62153  _TEXT       nabu_ide.asm:75
id_grb           = $F3FC = 62460  _TEXT       nabu_ide.asm:328
id_home          = $F319 = 62233  _TEXT       nabu_ide.asm:135
id_inco          = $F8BD = 63677  _BSS        nabu_ide.asm:18
id_init          = $F300 = 62208  _TEXT       nabu_ide.asm:115
id_r2k           = $F402 = 62466  _TEXT       nabu_ide.asm:336
id_r2k1          = $F415 = 62485  _TEXT       nabu_ide.asm:349
id_rdsk          = $00E0 =   224  _TEXT       nabu_ide.asm:35 (unused)
id_rdw0          = $F3A7 = 62375  _TEXT       nabu_ide.asm:251
id_rdw1          = $F3B7 = 62391  _TEXT       nabu_ide.asm:259
id_rdwr          = $F395 = 62357  _TEXT       nabu_ide.asm:237
id_read          = $F3BC = 62396  _TEXT       nabu_ide.asm:265
id_rph0          = $F434 = 62516  _TEXT       nabu_ide.asm:372
id_rphy          = $F421 = 62497  _TEXT       nabu_ide.asm:364
id_sbno          = $F37A = 62330  _TEXT       nabu_ide.asm:217
id_sel           = $F325 = 62245  _TEXT       nabu_ide.asm:145
id_sel0          = $F330 = 62256  _TEXT       nabu_ide.asm:152
id_ssec          = $F36C = 62316  _TEXT       nabu_ide.asm:204
id_stal          = $F484 = 62596  _TEXT       nabu_ide.asm:442
id_strk          = $F35C = 62300  _TEXT       nabu_ide.asm:191
id_wde0          = $F3F3 = 62451  _TEXT       nabu_ide.asm:318
id_wde1          = $F3F7 = 62455  _TEXT       nabu_ide.asm:322
id_wdef          = $F3DC = 62428  _TEXT       nabu_ide.asm:295
id_wdrq          = $F468 = 62568  _TEXT       nabu_ide.asm:411
id_wph0          = $F452 = 62546  _TEXT       nabu_ide.asm:393
id_wphy          = $F441 = 62529  _TEXT       nabu_ide.asm:386
id_writ          = $F3C4 = 62404  _TEXT       nabu_ide.asm:273
idedev           = $F2E8 = 62184  _TEXT       nabu_ide.asm:99
inbuff           = $D406 = 54278  _TEXT       zcpr1_ccp.asm:554
intvec           = $FF00 = 65280  _JUMP_TABLE config_ide_fdc.asm:47
iobyte           = $0003 =     3  _TEXT       zcpr1_ccp.asm:9
ioerr1           = $DF05 = 57093  _TEXT       bdos.asm:471
ioret            = $DFBB = 57275  _TEXT       bdos.asm:584
jumphl           = $DF4A = 57162  _TEXT       bdos.asm:499
lf               = $000A =    10  _TEXT       zcpr1_ccp.asm:26
list             = $EAC3 = 60099  _TEXT       bios.asm:181
logical          = $E08A = 57482  _TEXT       bdos.asm:748
logicl1          = $E090 = 57488  _TEXT       bdos.asm:750
login            = $E9AF = 59823  _TEXT       bdos.asm:2442
logindrv         = $E821 = 59425  _TEXT       bdos.asm:2164
logoff           = $E953 = 59731  _TEXT       bdos.asm:2374
logsect          = $E9E7 = 59879  _TEXT       bdos.asm:2488
mem              = $0035 =    53              config_ide_fdc.asm:38
mode             = $E9D5 = 59861  _TEXT       bdos.asm:2475
morefls          = $E17F = 57727  _TEXT       bdos.asm:951
movedir          = $E1E9 = 57833  _TEXT       bdos.asm:1046
moveword         = $E494 = 58516  _TEXT       bdos.asm:1572
newline          = $DDB1 = 56753  _TEXT       bdos.asm:258
newln1           = $DDB9 = 56761  _TEXT       bdos.asm:261
nf_asva          = $FAC2 = 64194  _NOINIT     nabu_fdc.asm:38
nf_asvb          = $FADC = 64220  _NOINIT     nabu_fdc.asm:39
nf_atla          = $0041 =    65  _TEXT       nabu_fdc.asm:49
nf_ayda          = $0040 =    64  _TEXT       nabu_fdc.asm:48
nf_busy          = $F1C4 = 61892  _TEXT       nabu_fdc.asm:535
nf_cach          = $F4BC = 62652  _BSS        nabu_fdc.asm:34
nf_ccp           = $F149 = 61769  _TEXT       nabu_fdc.asm:431 (unused)
nf_csva          = $FAF6 = 64246  _NOINIT     nabu_fdc.asm:40
nf_csvb          = $FB05 = 64261  _NOINIT     nabu_fdc.asm:41
nf_curd          = $F4B7 = 62647  _BSS        nabu_fdc.asm:28
nf_dint          = $F1CF = 61903  _TEXT       nabu_fdc.asm:551
nf_dirt          = $F4BB = 62651  _BSS        nabu_fdc.asm:32
nf_dpb           = $EF95 = 61333  _TEXT       nabu_fdc.asm:76
nf_dpha          = $EF75 = 61301  _TEXT       nabu_fdc.asm:60
nf_dphb          = $EF85 = 61317  _TEXT       nabu_fdc.asm:68
nf_dvsc          = $F1AD = 61869  _TEXT       nabu_fdc.asm:516
nf_dvsl          = $F1B3 = 61875  _TEXT       nabu_fdc.asm:519
nf_eint          = $F1D8 = 61912  _TEXT       nabu_fdc.asm:560
nf_grb           = $F142 = 61762  _TEXT       nabu_fdc.asm:426 (unused)
nf_home          = $EFE7 = 61415  _TEXT       nabu_fdc.asm:150
nf_inco          = $F4BA = 62650  _BSS        nabu_fdc.asm:31
nf_ini1          = $EFC2 = 61378  _TEXT       nabu_fdc.asm:114
nf_ini2          = $EFD0 = 61392  _TEXT       nabu_fdc.asm:125
nf_init          = $EFBC = 61372  _TEXT       nabu_fdc.asm:109
nf_io            = $F4B5 = 62645  _BSS        nabu_fdc.asm:25
nf_r2k           = $F14E = 61774  _TEXT       nabu_fdc.asm:436
nf_r2k0          = $F177 = 61815  _TEXT       nabu_fdc.asm:465
nf_r2ks          = $F4B6 = 62646  _BSS        nabu_fdc.asm:26
nf_rdsk          = $0002 =     2  _TEXT       nabu_fdc.asm:45
nf_rdw0          = $F0C7 = 61639  _TEXT       nabu_fdc.asm:325
nf_rdw1          = $F0D5 = 61653  _TEXT       nabu_fdc.asm:332
nf_rdwr          = $F0A8 = 61608  _TEXT       nabu_fdc.asm:304
nf_read          = $F0DA = 61658  _TEXT       nabu_fdc.asm:338
nf_rph1          = $F197 = 61847  _TEXT       nabu_fdc.asm:498
nf_rph2          = $F1A5 = 61861  _TEXT       nabu_fdc.asm:507
nf_rphy          = $F18B = 61835  _TEXT       nabu_fdc.asm:488
nf_sel           = $EFFF = 61439  _TEXT       nabu_fdc.asm:173
nf_sel0          = $F019 = 61465  _TEXT       nabu_fdc.asm:192
nf_sel1          = $F033 = 61491  _TEXT       nabu_fdc.asm:206
nf_sel2          = $F045 = 61509  _TEXT       nabu_fdc.asm:219
nf_selc          = $F026 = 61478  _TEXT       nabu_fdc.asm:200 (unused)
nf_seld          = $F00A = 61450  _TEXT       nabu_fdc.asm:181
nf_ssec          = $F089 = 61577  _TEXT       nabu_fdc.asm:277
nf_stal          = $F1CA = 61898  _TEXT       nabu_fdc.asm:543
nf_str0          = $F06C = 61548  _TEXT       nabu_fdc.asm:251
nf_strk          = $F053 = 61523  _TEXT       nabu_fdc.asm:232
nf_subs          = $F4B8 = 62648  _BSS        nabu_fdc.asm:29
nf_sync          = $F4B9 = 62649  _BSS        nabu_fdc.asm:30
nf_udsl          = $F1B2 = 61874  _TEXT       nabu_fdc.asm:518
nf_wde1          = $F118 = 61720  _TEXT       nabu_fdc.asm:388
nf_wde2          = $F126 = 61734  _TEXT       nabu_fdc.asm:397
nf_wde3          = $F13A = 61754  _TEXT       nabu_fdc.asm:417
nf_wde4          = $F13D = 61757  _TEXT       nabu_fdc.asm:420
nf_wdef          = $F0FA = 61690  _TEXT       nabu_fdc.asm:368
nf_writ          = $F0E2 = 61666  _TEXT       nabu_fdc.asm:346
nfddev           = $EFA4 = 61348  _TEXT       nabu_fdc.asm:93
nfuncts          = $0029 =    41  _TEXT       bdos.asm:74
nulldev          = $EB49 = 60233  _TEXT       bios.asm:328 (unused)
nxent1           = $E219 = 57881  _TEXT       bdos.asm:1084
nxent2           = $E220 = 57888  _TEXT       bdos.asm:1087
nxentry          = $E205 = 57861  _TEXT       bdos.asm:1076
offset           = $E9CE = 59854  _TEXT       bdos.asm:2468
olddrv           = $E9DF = 59871  _TEXT       bdos.asm:2482
openfil          = $E89C = 59548  _TEXT       bdos.asm:2237
openit           = $E451 = 58449  _TEXT       bdos.asm:1529
openit1          = $E45A = 58458  _TEXT       bdos.asm:1533
openit2          = $E48B = 58507  _TEXT       bdos.asm:1561
outchar          = $DD48 = 56648  _TEXT       bdos.asm:184
outchr1          = $DD62 = 56674  _TEXT       bdos.asm:198
outchr2          = $DD79 = 56697  _TEXT       bdos.asm:214
outcon           = $DD90 = 56720  _TEXT       bdos.asm:235
outcon1          = $DD96 = 56726  _TEXT       bdos.asm:238
outcrlf          = $DDC9 = 56777  _TEXT       bdos.asm:271
outflag          = $DF0A = 57098  _TEXT       bdos.asm:474
params           = $DF43 = 57155  _TEXT       bdos.asm:490
pattrn2          = $DC00 = 56320  _TEXT       bdos.asm:21 (unused)
position         = $E703 = 59139  _TEXT       bdos.asm:1939
positn1          = $E707 = 59143  _TEXT       bdos.asm:1944
positn2          = $E747 = 59207  _TEXT       bdos.asm:1990
positn3          = $E77F = 59263  _TEXT       bdos.asm:2022
positn4          = $E784 = 59268  _TEXT       bdos.asm:2028
positn5          = $E78B = 59275  _TEXT       bdos.asm:2035
pr_atla          = $0041 =    65  _TEXT       nabu_prt.asm:14
pr_ayda          = $0040 =    64  _TEXT       nabu_prt.asm:13
pr_ctrl          = $0000 =     0  _TEXT       nabu_prt.asm:16
pr_init          = $F1EC = 61932  _TEXT       nabu_prt.asm:31
pr_prnt          = $00B0 =   176  _TEXT       nabu_prt.asm:15
pr_read          = $F1EF = 61935  _TEXT       nabu_prt.asm:46
pr_stat          = $F1ED = 61933  _TEXT       nabu_prt.asm:38
pr_wri0          = $F1F5 = 61941  _TEXT       nabu_prt.asm:56
pr_wri1          = $F204 = 61956  _TEXT       nabu_prt.asm:67
pr_writ          = $F1F1 = 61937  _TEXT       nabu_prt.asm:53
prstat           = $EB12 = 60178  _TEXT       bios.asm:276
prtdev           = $F1E1 = 61921  _TEXT       nabu_prt.asm:19
prterr           = $DCE5 = 56549  _TEXT       bdos.asm:111
prtflag          = $DF0D = 57101  _TEXT       bdos.asm:477
prtmesg          = $DDD3 = 56787  _TEXT       bdos.asm:278
prtstr           = $DEF8 = 57080  _TEXT       bdos.asm:454
punch            = $EAC7 = 60103  _TEXT       bios.asm:187
putdma           = $E90A = 59658  _TEXT       bdos.asm:2313
ransiz1          = $E7E4 = 59364  _TEXT       bdos.asm:2118
ransiz2          = $E806 = 59398  _TEXT       bdos.asm:2140
ransiz3          = $E80C = 59404  _TEXT       bdos.asm:2142
ransize          = $E7D2 = 59346  _TEXT       bdos.asm:2107
rdbuf1           = $DDEF = 56815  _TEXT       bdos.asm:297
rdbuf10          = $DE70 = 56944  _TEXT       bdos.asm:359
rdbuf11          = $DE78 = 56952  _TEXT       bdos.asm:365
rdbuf12          = $DE8A = 56970  _TEXT       bdos.asm:377
rdbuf13          = $DE99 = 56985  _TEXT       bdos.asm:384
rdbuf14          = $DEA6 = 56998  _TEXT       bdos.asm:392
rdbuf15          = $DEA9 = 57001  _TEXT       bdos.asm:395
rdbuf16          = $DEBD = 57021  _TEXT       bdos.asm:407
rdbuf17          = $DEC1 = 57025  _TEXT       bdos.asm:409
rdbuf2           = $DDF1 = 56817  _TEXT       bdos.asm:299
rdbuf3           = $DE16 = 56854  _TEXT       bdos.asm:316
rdbuf4           = $DE26 = 56870  _TEXT       bdos.asm:325
rdbuf5           = $DE37 = 56887  _TEXT       bdos.asm:333
rdbuf6           = $DE48 = 56904  _TEXT       bdos.asm:342
rdbuf7           = $DE4E = 56910  _TEXT       bdos.asm:345
rdbuf8           = $DE5F = 56927  _TEXT       bdos.asm:352
rdbuf9           = $DE6B = 56939  _TEXT       bdos.asm:357
rdbuff           = $DDE1 = 56801  _TEXT       bdos.asm:290
rdrandom         = $E941 = 59713  _TEXT       bdos.asm:2355
rdseq            = $E5BC = 58812  _TEXT       bdos.asm:1748
rdseq1           = $E5C1 = 58817  _TEXT       bdos.asm:1750
rdseq2           = $E5E6 = 58854  _TEXT       bdos.asm:1765
rdseq3           = $E5FB = 58875  _TEXT       bdos.asm:1775
rdwrtflg         = $E9D3 = 59859  _TEXT       bdos.asm:2473
read             = $EB0A = 60170  _TEXT       bios.asm:261
reader           = $EACB = 60107  _TEXT       bios.asm:193
readran          = $E793 = 59283  _TEXT       bdos.asm:2042
readseq          = $E8E0 = 59616  _TEXT       bdos.asm:2281
relblock         = $E9D7 = 59863  _TEXT       bdos.asm:2477
renfile          = $E8F5 = 59637  _TEXT       bdos.asm:2297
resccp           = $EB68 = 60264  _TEXT       config_ide_fdc.asm:151
resgrb           = $EB6B = 60267  _TEXT       config_ide_fdc.asm:157
rodisk           = $DC0D = 56333  _TEXT       bdos.asm:35
rofile           = $DC0F = 56335  _TEXT       bdos.asm:36
rstdsk           = $E883 = 59523  _TEXT       bdos.asm:2225
rtn              = $DF04 = 57092  _TEXT       bdos.asm:467
samext           = $E307 = 58119  _TEXT       bdos.asm:1279
savatr1          = $E440 = 58432  _TEXT       bdos.asm:1519
saveattr         = $E43B = 58427  _TEXT       bdos.asm:1517
savefcb          = $E9D9 = 59865  _TEXT       bdos.asm:2479
savext           = $E9E2 = 59874  _TEXT       bdos.asm:2485
savnrec          = $E9E3 = 59875  _TEXT       bdos.asm:2486
savnxt           = $E9E1 = 59873  _TEXT       bdos.asm:2484
scratch1         = $E9B3 = 59827  _TEXT       bdos.asm:2447
scratch2         = $E9B5 = 59829  _TEXT       bdos.asm:2448
scratch3         = $E9B7 = 59831  _TEXT       bdos.asm:2449
sectors          = $E9C1 = 59841  _TEXT       bdos.asm:2460
sectrn           = $EB15 = 60181  _TEXT       bios.asm:281
seldsk           = $EADE = 60126  _TEXT       bios.asm:213
select           = $DF59 = 57177  _TEXT       bdos.asm:518
select1          = $DF9D = 57245  _TEXT       bdos.asm:558
setattr          = $E91D = 59677  _TEXT       bdos.asm:2329
setbit           = $E10B = 57611  _TEXT       bdos.asm:850
setdir           = $E19C = 57756  _TEXT       bdos.asm:984
setdma           = $EB04 = 60164  _TEXT       bios.asm:253
setdsk           = $E845 = 59461  _TEXT       bdos.asm:2185
setext           = $E0A6 = 57510  _TEXT       bdos.asm:765
setfile          = $E26B = 57963  _TEXT       bdos.asm:1169
setfl1           = $E275 = 57973  _TEXT       bdos.asm:1174
setfl2           = $E288 = 57992  _TEXT       bdos.asm:1186
setfl3           = $E28E = 57998  _TEXT       bdos.asm:1192
setfl4           = $E29D = 58013  _TEXT       bdos.asm:1201
sethlde          = $E0AE = 57518  _TEXT       bdos.asm:773
setiob           = $DEF3 = 57075  _TEXT       bdos.asm:447
setnrec          = $E0D2 = 57554  _TEXT       bdos.asm:799
setran           = $E80E = 59406  _TEXT       bdos.asm:2148
sets2b7          = $E178 = 57720  _TEXT       bdos.asm:941
setsec           = $EB00 = 60160  _TEXT       bios.asm:246
setstat          = $DF01 = 57089  _TEXT       bdos.asm:466
settrk           = $EAFC = 60156  _TEXT       bios.asm:239
setuser          = $E93B = 59707  _TEXT       bdos.asm:2349
shiftl           = $E104 = 57604  _TEXT       bdos.asm:841
shiftl1          = $E105 = 57605  _TEXT       bdos.asm:842
shiftr           = $E0EA = 57578  _TEXT       bdos.asm:815
shiftr1          = $E0EB = 57579  _TEXT       bdos.asm:816
showit           = $DD7F = 56703  _TEXT       bdos.asm:222
siodev           = $F20B = 61963  _TEXT       nabu_sio.asm:20
slcterr          = $DF47 = 57159  _TEXT       bdos.asm:495
so_atab          = $F27B = 62075  _TEXT       nabu_sio.asm:131
so_conf          = $F27F = 62079  _TEXT       nabu_sio.asm:135
so_ini0          = $F21E = 61982  _TEXT       nabu_sio.asm:39
so_ini1          = $F224 = 61988  _TEXT       nabu_sio.asm:43
so_ini2          = $F22B = 61995  _TEXT       nabu_sio.asm:49
so_ini3          = $F237 = 62007  _TEXT       nabu_sio.asm:59
so_init          = $F216 = 61974  _TEXT       nabu_sio.asm:33
so_rea0          = $F25E = 62046  _TEXT       nabu_sio.asm:102
so_read          = $F255 = 62037  _TEXT       nabu_sio.asm:95
so_sta0          = $F24D = 62029  _TEXT       nabu_sio.asm:83
so_stat          = $F244 = 62020  _TEXT       nabu_sio.asm:76
so_wri0          = $F271 = 62065  _TEXT       nabu_sio.asm:121
so_writ          = $F267 = 62055  _TEXT       nabu_sio.asm:113
starting         = $DF0B = 57099  _TEXT       bdos.asm:475
status           = $DF45 = 57157  _TEXT       bdos.asm:491
stbitmap         = $E25C = 57948  _TEXT       bdos.asm:1149
stbmap1          = $E264 = 57956  _TEXT       bdos.asm:1160
stfilpos         = $E1FE = 57854  _TEXT       bdos.asm:1064
stkarea          = $DF41 = 57153  _TEXT       bdos.asm:486
stnrec1          = $E0DE = 57566  _TEXT       bdos.asm:804
strdata          = $E0BB = 57531  _TEXT       bdos.asm:783
ststatus         = $E301 = 58113  _TEXT       bdos.asm:1271
subhl            = $E195 = 57749  _TEXT       bdos.asm:974
swindi0          = $EB31 = 60209  _TEXT       bios.asm:311
swindi1          = $EB37 = 60215  _TEXT       bios.asm:315
swindir          = $EB2D = 60205  _TEXT       bios.asm:309
syshook          = $EB67 = 60263  _TEXT       config_ide_fdc.asm:129
tab              = $0009 =     9  _TEXT       zcpr1_ccp.asm:25
tbase            = $0100 =   256  _TEXT       zcpr1_ccp.asm:18 (unused)
tbuff            = $0080 =   128  _TEXT       zcpr1_ccp.asm:17
tdrive           = $0004 =     4  _TEXT       zcpr1_ccp.asm:10
tfcb             = $005C =    92  _TEXT       zcpr1_ccp.asm:14 (unused)
tm_40c           = $EDF9 = 60921  _TEXT       nabu_vdp.asm:464
tm_80c           = $EE06 = 60934  _TEXT       nabu_vdp.asm:471
tm_addh          = $EF3F = 61247  _TEXT       nabu_vdp.asm:730
tm_addr          = $EF41 = 61249  _TEXT       nabu_vdp.asm:732
tm_ayda          = $0040 =    64  _TEXT       nabu_vdp.asm:36
tm_ayla          = $0041 =    65  _TEXT       nabu_vdp.asm:37
tm_bell          = $EE19 = 60953  _TEXT       nabu_vdp.asm:486
tm_bs            = $ED4A = 60746  _TEXT       nabu_vdp.asm:348
tm_cbuf          = $F48D = 62605  _BSS        nabu_vdp.asm:26
tm_cha0          = $EEE2 = 61154  _TEXT       nabu_vdp.asm:652
tm_chat          = $EEDC = 61148  _TEXT       nabu_vdp.asm:647
tm_cle0          = $EDE5 = 60901  _TEXT       nabu_vdp.asm:449
tm_clea          = $EDD6 = 60886  _TEXT       nabu_vdp.asm:440
tm_cles          = $EDD4 = 60884  _TEXT       nabu_vdp.asm:439
tm_cloc          = $EC5B = 60507  _TEXT       nabu_vdp.asm:172
tm_cls           = $EF23 = 61219  _TEXT       nabu_vdp.asm:706
tm_cls0          = $EF2C = 61228  _TEXT       nabu_vdp.asm:709
tm_cold          = $EF74 = 61300  _TEXT       nabu_vdp.asm:777
tm_colr          = $EF6F = 61295  _TEXT       nabu_vdp.asm:772
tm_cr            = $ED47 = 60743  _TEXT       nabu_vdp.asm:345
tm_cshm          = $ED59 = 60761  _TEXT       nabu_vdp.asm:362
tm_cupd          = $EDFD = 60925  _TEXT       nabu_vdp.asm:466
tm_curx          = $EF72 = 61298  _TEXT       nabu_vdp.asm:775
tm_cury          = $EF73 = 61299  _TEXT       nabu_vdp.asm:776
tm_data          = $00A0 =   160  _TEXT       nabu_vdp.asm:30
tm_dint          = $EF52 = 61266  _TEXT       nabu_vdp.asm:751
tm_dsc0          = $EE4D = 61005  _TEXT       nabu_vdp.asm:517
tm_dsco          = $EE3A = 60986  _TEXT       nabu_vdp.asm:510
tm_eint          = $EF62 = 61282  _TEXT       nabu_vdp.asm:763
tm_esc           = $ED93 = 60819  _TEXT       nabu_vdp.asm:396
tm_esc0          = $EDA4 = 60836  _TEXT       nabu_vdp.asm:407
tm_esc1          = $EDBE = 60862  _TEXT       nabu_vdp.asm:422
tm_esc2          = $EDC9 = 60873  _TEXT       nabu_vdp.asm:429
tm_escd          = $ED9F = 60831  _TEXT       nabu_vdp.asm:404
tm_esci          = $EDB8 = 60856  _TEXT       nabu_vdp.asm:419
tm_escr          = $EDA0 = 60832  _TEXT       nabu_vdp.asm:405
tm_escs          = $F48B = 62603  _BSS        nabu_vdp.asm:24
tm_get0          = $EE76 = 61046  _TEXT       nabu_vdp.asm:552
tm_getc          = $EE60 = 61024  _TEXT       nabu_vdp.asm:538
tm_home          = $ED5C = 60764  _TEXT       nabu_vdp.asm:363
tm_inb           = $EF70 = 61296  _TEXT       nabu_vdp.asm:773
tm_inf           = $EF71 = 61297  _TEXT       nabu_vdp.asm:774
tm_ini0          = $EC2E = 60462  _TEXT       nabu_vdp.asm:140
tm_ini1          = $EC4E = 60494  _TEXT       nabu_vdp.asm:161
tm_inir          = $EBD4 = 60372  _TEXT       nabu_vdp.asm:79
tm_init          = $EC06 = 60422  _TEXT       nabu_vdp.asm:116
tm_inr0          = $EBD5 = 60373  _TEXT       nabu_vdp.asm:80
tm_keyd          = $0090 =   144  _TEXT       nabu_vdp.asm:33
tm_keys          = $0091 =   145  _TEXT       nabu_vdp.asm:34
tm_kirq          = $EE7E = 61054  _TEXT       nabu_vdp.asm:561
tm_last          = $F48C = 62604  _BSS        nabu_vdp.asm:25
tm_latc          = $00A1 =   161  _TEXT       nabu_vdp.asm:31
tm_lf            = $ED3B = 60731  _TEXT       nabu_vdp.asm:336
tm_map           = $EE8C = 61068  _TEXT       nabu_vdp.asm:576
tm_map0          = $EE90 = 61072  _TEXT       nabu_vdp.asm:580
tm_map2          = $EE9C = 61084  _TEXT       nabu_vdp.asm:593
tm_mapt          = $EEA3 = 61091  _TEXT       nabu_vdp.asm:600
tm_mode          = $EF6D = 61293  _TEXT       nabu_vdp.asm:771
tm_oti0          = $EBCC = 60364  _TEXT       nabu_vdp.asm:66
tm_otir          = $EBCB = 60363  _TEXT       nabu_vdp.asm:65
tm_outc          = $F489 = 62601  _BSS        nabu_vdp.asm:22
tm_putc          = $EEB8 = 61112  _TEXT       nabu_vdp.asm:618
tm_putf          = $EEC6 = 61126  _TEXT       nabu_vdp.asm:626 (unused)
tm_rea0          = $ECB4 = 60596  _TEXT       nabu_vdp.asm:237
tm_rea1          = $ECCA = 60618  _TEXT       nabu_vdp.asm:249
tm_rea2          = $ECDF = 60639  _TEXT       nabu_vdp.asm:262
tm_rea3          = $ECEF = 60655  _TEXT       nabu_vdp.asm:272
tm_read          = $ECA8 = 60584  _TEXT       nabu_vdp.asm:231
tm_ri            = $ED34 = 60724  _TEXT       nabu_vdp.asm:330
tm_sclf          = $EC73 = 60531  _TEXT       nabu_vdp.asm:188
tm_scol          = $EE0C = 60940  _TEXT       nabu_vdp.asm:476
tm_scr0          = $EC6B = 60523  _TEXT       nabu_vdp.asm:185
tm_scr1          = $EC71 = 60529  _TEXT       nabu_vdp.asm:187
tm_scri          = $EC61 = 60513  _TEXT       nabu_vdp.asm:180
tm_scro          = $F48A = 62602  _BSS        nabu_vdp.asm:23
tm_setp          = $EC7D = 60541  _TEXT       nabu_vdp.asm:198
tm_sta0          = $EBE9 = 60393  _TEXT       nabu_vdp.asm:98
tm_sta1          = $EBF4 = 60404  _TEXT       nabu_vdp.asm:103
tm_sta2          = $ED00 = 60672  _TEXT       nabu_vdp.asm:286
tm_stal          = $ECFD = 60669  _TEXT       nabu_vdp.asm:284
tm_stat          = $EBDD = 60381  _TEXT       nabu_vdp.asm:92
tm_up            = $ED54 = 60756  _TEXT       nabu_vdp.asm:357
tm_updc          = $EE10 = 60944  _TEXT       nabu_vdp.asm:480
tm_usc0          = $EF0F = 61199  _TEXT       nabu_vdp.asm:685
tm_usco          = $EF00 = 61184  _TEXT       nabu_vdp.asm:678
tm_vcpy          = $EEE8 = 61160  _TEXT       nabu_vdp.asm:664
tm_virq          = $EF4C = 61260  _TEXT       nabu_vdp.asm:741
tm_wri0          = $ED21 = 60705  _TEXT       nabu_vdp.asm:318
tm_wri1          = $ED60 = 60768  _TEXT       nabu_vdp.asm:368
tm_writ          = $ED06 = 60678  _TEXT       nabu_vdp.asm:298
trksec           = $DFC3 = 57283  _TEXT       bdos.asm:592
trksec1          = $DFD1 = 57297  _TEXT       bdos.asm:601
trksec2          = $DFE4 = 57316  _TEXT       bdos.asm:614
trksec3          = $DFFA = 57338  _TEXT       bdos.asm:630
trksec4          = $E00F = 57359  _TEXT       bdos.asm:647
update           = $E401 = 58369  _TEXT       bdos.asm:1480
update1          = $E410 = 58384  _TEXT       bdos.asm:1488
userdma          = $E9B1 = 59825  _TEXT       bdos.asm:2443
userno           = $DF41 = 57153  _TEXT       bdos.asm:488
usrstack         = $DF0F = 57103  _TEXT       bdos.asm:482
vdpdev           = $EBBE = 60350  _TEXT       nabu_vdp.asm:51
wbinit           = $EB4F = 60239  _TEXT       config_ide_fdc.asm:67
wboot            = $EA46 = 59974  _TEXT       bios.asm:62
wboot0           = $EA6D = 60013  _TEXT       bios.asm:99
wbootin          = $EA03 = 59907  _TEXT       bios.asm:22
wbootr           = $EA5D = 59997  _TEXT       bios.asm:87
write            = $EB0E = 60174  _TEXT       bios.asm:268
writeran         = $E79C = 59292  _TEXT       bdos.asm:2049
wrtprt           = $E9AD = 59821  _TEXT       bdos.asm:2441
wrtprtd          = $E12C = 57644  _TEXT       bdos.asm:877
wrtseq           = $E8E6 = 59622  _TEXT       bdos.asm:2286
wtrandom         = $E947 = 59719  _TEXT       bdos.asm:2360
wtseq            = $E5FE = 58878  _TEXT       bdos.asm:1779
wtseq1           = $E603 = 58883  _TEXT       bdos.asm:1781
wtseq10          = $E6D2 = 59090  _TEXT       bdos.asm:1896
wtseq11          = $E6FE = 59134  _TEXT       bdos.asm:1920
wtseq12          = $E700 = 59136  _TEXT       bdos.asm:1921
wtseq2           = $E63B = 58939  _TEXT       bdos.asm:1804
wtseq3           = $E648 = 58952  _TEXT       bdos.asm:1810
wtseq4           = $E664 = 58980  _TEXT       bdos.asm:1822
wtseq5           = $E66C = 58988  _TEXT       bdos.asm:1829
wtseq6           = $E66E = 58990  _TEXT       bdos.asm:1830
wtseq7           = $E68C = 59020  _TEXT       bdos.asm:1853
wtseq8           = $E69A = 59034  _TEXT       bdos.asm:1860
wtseq9           = $E6BB = 59067  _TEXT       bdos.asm:1880
wtseq99          = $E6DF = 59103  _TEXT       bdos.asm:1907 (unused)
wtspecl          = $E99B = 59803  _TEXT       bdos.asm:2426
xlate            = $E9D0 = 59856  _TEXT       bdos.asm:2469


total time: 0.0914 sec.
no errors
