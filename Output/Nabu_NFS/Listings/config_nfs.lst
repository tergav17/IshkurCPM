              	; --------------------------------------
              	; zasm: assemble "config_nfs.asm"
              	; date: 2024-09-01 20:40:22
              	; --------------------------------------


              	;
              	;**************************************************************
              	;*
              	;*          I S H K U R   S Y S T E M   C O N F I G
              	;*
              	;*      This file contains points that should be modifed
              	;*      if new devices are to be added to IshkurCP/M. At
              	;*      a mimumum, they need to be included at the bottom
              	;*      of the file, and added to their appropriate dev
              	;*      switch. Some devices may need additional config
              	;*      directly in their source files
              	;*       
              	;*
              	;**************************************************************
              	;
              	;   Set default drive / user
              	;   (uuuudddd) where 'uuuu' is the user number and 'dddd' is the drive number.
              	;
0000:         	default	equ	0
              	
              	;
              	;**************************************************************
              	;*
              	;*                M E M O R Y   C O N F I G
              	;*
              	;*        CP/M memory will start at mem*1024. For example,
              	;*        if memory is configured to be 40, then the image
              	;*        will start at 40kb. The higher memory is configured
              	;*        to, the more memory user programs will have. If memory
              	;*        is configured to be too high, then the core image and
              	;*        BSS space will not fit.
              	;*
              	;**************************************************************
              	;
              	;
              	;   Set memory base here. 
              	;
0036:         	mem	equ	54		; CP/M image starts at mem*1024
              	
              	
              	
              	#target	BIN			; Set up memory segments
D800:         	#code	_TEXT,(mem)*1024
FAFE:         	#data	_BSS,_TEXT_end
FB77:         	#data	_NOINIT,_BSS_end
FF00:         	#data	_JUMP_TABLE,0xFF00
FF00: 00000000	intvec:	defs	16
FF04: 00...   	
FF10: 00000000	dircbuf:defs	128
FF14: 00...   	
              	.area	_TEXT
              	
              	; Include CP/M and BIOS
              	#include "../zcpr1_ccp_nfs.asm"
              	;**************************************************************
              	;*
              	;*         Z C P R 1   C O M M A N D   P R O C E S S O R
              	;*
              	;*          Adapted to work with Ishkur by snhirsch
              	;*
              	;**************************************************************
              	
0003:         	iobyte	equ	3		;i/o definition byte.
0004:         	tdrive	equ	4		;current drive name and user number.
0004:         	UDFLAG  equ     4
0005:         	entry	equ	5		;entry point for the cp/m bdos.
0005:         	BDOS    equ     5
005C:         	tfcb	equ	5ch		;default file control block.
005C:         	TFCB    equ     5ch
0080:         	TBUFF   equ     80h
0080:         	tbuff	equ	80h		;i/o buffer and command line storage.
0100:         	tbase	equ	100h		;transiant program storage area.
              	;
              	;   set control character equates.
              	;
0003:         	cntrlc	equ	3		;control-c
0005:         	cntrle	equ	05h		;control-e
0008:         	bs	equ	08h		;backspace
0009:         	tab	equ	09h		;tab
000A:         	lf	equ	0ah		;line feed
000C:         	ff	equ	0ch		;form feed
000D:         	cr	equ	0dh		;carriage return
0010:         	cntrlp	equ	10h		;control-p
0012:         	cntrlr	equ	12h		;control-r
0013:         	cntrls	equ	13h		;control-s
0015:         	cntrlu	equ	15h		;control-u
0018:         	cntrlx	equ	18h		;control-x
001A:         	cntrlz	equ	1ah		;control-z (end-of-file mark)
007F:         	del	equ	7fh		;rubout
              	
              	;================================================================
              	
              	;	.Z80
              	;	TITLE	'NZCPR V 1.6Z OF 01/07/84'
              	;  This is ZCPR Version 1.6 changed to Zilog mnemonics and put in a
              	;form suitable for the Microsoft M80 assembler. Note that the file uses
              	;the PHASE option to create the memory offset. The COM file should be 
              	;created using L80 with the /P:100 switch option. The COM file can be
              	;loaded into the sysgen program using the methods described in the ZCPR
              	;documentation.
              	;		MMA - Murray Arnow
              	;
              	;  CP/M Z80 Command Processor Replacement (CPR) Version 1.6 in
              	; the NZCPR line.
              	;
              	;	CCPZ CREATED AND CUSTOMIZED FOR ARIES-II BY RLC
              	;	ZCPR VERSION 1.0 CREATED FROM CCPZ VERSION 4.0 BY RLC IN
              	;		A COORDINATED EFFORT WITH CCP-GROUP
              	;
              	;	ZCPR is a group effort by CCP-GROUP, whose active membership involved
              	; in this project consists of the following:
              	;		RLC - Richard Conn
              	;		RGF - Ron Fowler
              	;		KBP - Keith Peterson
              	;		FJW - Frank Wancho
              	;	The following individuals also provided a contribution:
              	;		SBB - Steve Bogolub
              	;
              	;  Since RLC has decided that ZCPR V1.0 is the last official version
              	; sanctioned by the CCPZ group, changes beyond that point are being
              	; called by consensus of a group of new changers "NZCPR Vx.x". The
              	; following individuals have put in their code or opinions:
              	;
              	;		SBB - Steve Bogolub
              	;		PST - Paul Traina
              	;		HLB - Howard Booker
              	;		CAF - Chuck Forsberg
              	;		RAF - Bob Fischer
              	;		BB  - Ben Bronson
              	;		PRG - Paul Grupp
              	;		PJH - Paul Homchick
              	;		HEW - Hal Walchli
              	;
              	;   In an attempt to maintain a link to the past, changes between the
              	; current version of NZCPR are provided as both a difference file
              	; between NZCPR's (NZ14-16.DIF) and as a difference between the current
              	; version and the "official" ZCPR V1.0 (NZCPR-16.DIF).  These changes
              	; are made and supported by individuals in contact with each other through
              	; the Hyde Park RCPM in Chicago. Make comments or complaints there, to
              	; SBB or PST or anyone else interested.
              	;
              	;   The most obvious differences between NZCPR and ZCPR are the security
              	; features, controlled by additional conditional assembly flags. Such
              	; features restrict access to ZCPR intrinsic commands, add additional
              	; levels of .COM file searching, and prevent access to higher drives
              	; or user levels, with either internal or external password control of
              	; these features. Less obvious differences involve code optimization to
              	; gain space, and some minor bug fixes in the TYPE command.
              	;
              	;******** Structure Notes ********
              	;
              	;	This CPR is divided into a number of major sections.  The following
              	; is an outline of these sections and the names of the major routines
              	; located therein.
              	;
              	; Section	Function/Routines
              	; -------	-----------------
              	;
              	;   --		Opening Comments, Equates, and Macro Definitions
              	;
              	;    0		JMP Table into CPR
              	;
              	;    1		Buffers
              	;
              	;    2		CPR Starting Modules
              	;			CPR1	CPR	RESTRT	RSTCPR	RCPRNL
              	;			PRNNF	CMDTBL
              	;
              	;    3		Utilities
              	;			CRLF	CONOUT	CONIN	LCOUT	LSTOUT
              	;			READF	READ	BDOSB	PRINTC	PRINT
              	;			GETDRV	DEFDMA	DMASET	RESET	BDOSJP
              	;			LOGIN	OPENF	OPEN	GRBDOS	CLOSE
              	;			SEARF	SEAR1	SEARN	SUBKIL	DELETE
              	;			RESETUSR GETUSR	SETUSR	PAGER	UCASE
              	;			NOECHO
              	;
              	;     4		CPR Utilities
              	;			SETUD	SETU0D	REDBUF	CNVBUF	CMDSER
              	;			BREAK	USRNUM	ERROR	SDELM	ADVAN
              	;			SBLANK	ADDAH	NUMBER	NUMERR	HEXNUM
              	;			DIRPTR	SLOGIN	DLOGIN	COMLOG	SCANER
              	;
              	;     5		CPR-Resident Commands and Functions
              	;     5A		DIR	DIRPR	FILLQ
              	;     5B		ERA
              	;     5C		LIST
              	;     5D		TYPE
              	;     5E		SAVE
              	;     5F		REN
              	;     5G		USER
              	;     5H		DFU
              	;     5I		JUMP
              	;     5J		GO
              	;     5K		COM	CALLPROG	ERRLOG	ERRJMP
              	;     5L		GET	MEMLOAD	PRNLE
              	;     5M		PASS	NORM
              	;
              	;
0000:         	FALSE	EQU	0
00FF:         	TRUE	EQU	0FFh
              	;
              	;  CUSTOMIZATION EQUATES
              	;
              	;  The following equates may be used to customize this CPR for the user's
              	;    system and integration technique.  The following constants are provided:
              	;
              	;    REL - TRUE if integration is to be done via MOVCPM
              	;        - FALSE if integration is to be done via DDT and SYSGEN
              	;
              	;    SECURE -  TRUE to conditionally disable potentially-harmful
              	;	       commands (GO, ERA, SAVE, REN, DFU, GET, JUMP). Under
              	;	       SECURE, if WHEEL contains RESTRCT, do not accept those
              	;	       commands, and search for COM files under current user
              	;	       then user "DEFUSR" only. If WHEEL does not contain
              	;	       RESTRCT (presumably from passworded change), allow
              	;	       all commands, and search current user, then last user
              	;	       set by DFU (originally "RESUSR"), then user "DEFUSR"
              	;	       for COM files, giving access with password to an
              	;	       additional level of COM files.
              	;
              	;	       (Note: WHEEL must point to a safe place in memory that
              	;		won't be overlayed)
              	;
              	;	If you have chosen a SECURE system,  all resident commands may be
              	; activated by entering:  PASS <password> <cr>  Where <password> is a sequence
              	; of characters placed at PASSID (if INPASS is true, otherwise, see
              	; documentation in PST's PASS.ASM).  If the password is incorrect. the system
              	; will come back with PASS? as if it was looking for a COM file.
              	;	NORM is the reverse of PASS, it will disable the WHEEL mode.
              	;
              	;    INPASS -  If in the SECURE mode, you wish to use a program similar
              	;	       to PST's PASS.ASM, set this false, otherwise, ZCPR will
              	;	       handle the PASSword coding with a built in command.
              	;
              	;    DRUSER -  Set this EQU false if you wish to disable RAF's neat hack
              	;	       that allows you the type B: 7 to move to drive B: user area
              	;	       seven.  This also removes the USER command.  Basically, set
              	;	       this equate false if you want to use USERPW or some other pgm.
              	;
              	;    RAS    -  Remote-Access System; setting this equate to TRUE disables
              	;	       certain CPR commands that are considered harmful in a Remote-
              	;	       Access environment; use under Remote-Access Systems (RBBS) for
              	;	       security purposes.  Note: SECURE is the direct enemy of RAS,
              	;	       DON'T define both equates or you will be VERY sorry.
              	;	       The advantage SECURE has over RAS is that by saying a magic
              	;	       word, all of the normal commands pop into existance.
              	;
              	;    MAXDRIV - Maximum legal drive number stored in this location.
              	;	       (0 means only A:, etc.)  0000H disables this feature.
              	;	       The value MAXDR is stuffed into MAXDRIV at cold boot,
              	;	       and presumably will be changed later by a passworded
              	;	       program if desired.
              	;
              	;	       (This code is in addition to BIOS checks. It's needed here
              	;	       because X: can hang if X: is off line in some BIOS
              	;	       implementations. Personally, I think CAF and others should fix
              	;	       their BIOS instead. Mine works right...SBB).
              	;
              	;    USRMAX -  Maximum legal user # + 1 stored in this location. 0000H
              	;	       disables this feature, and uses the value of MAXUSR+1 instead.
              	;
              	;    BASE - Base Address of user's CP/M system (normally 0 for DR version)
              	;           This equate allows easy modification by non-standard CP/M (eg,H89)
              	;
              	;    CPRLOC - Base Page Address of CPR; this value can be obtained by running
              	;	      the BDOSLOC program on your system, or by setting the
              	;	      MSIZE and BIOSEX equates to the system memory size in
              	;	      K-bytes and the "extra" memory required by your BIOS
              	;	      in K-bytes. BIOSEX is zero if your BIOS is normal size,
              	;	      and can be negative if your BIOS is in PROM or in
              	;	      non-contiguous memory.
              	;
              	;    EPRMPT - Set TRUE to be prompted "OK?" after seeing what files will
              	;	      be erased. No, this is NOT for individual file prompting,
              	;	      it is just to confirm deletion of all selected files at once.
              	;
              	;  Various individuals keep trying to yank out the TYPE, LIST, and DIR
              	; commands, either to use the space for other options or just because
              	; they prefer replacement COM files. To these individuals, I (SBB) say
              	; keep your paws off these commands. For compatibility with the stock
              	; CCP, intrinsic DIR and TYPE commands are required. And many users in
              	; MY neighborhood find it more convenient to use the intrinsic LIST
              	; command than to have a LIST/PRINT program on every disk. If you want
              	; to call a transient program by an intrinsic, then CHANGE THE INTRINSIC
              	; NAME IN THE TABLE. Even setting the name to blanks is fine to get
              	; rid of it. The point is, don't remove features others may want, just
              	; because you disagree, then throw it back in our laps. For those who
              	; simply MUST be rid of these commands, the following symbols control
              	; generation of the code in a CLEAN ACCEPTABLE fashion that allows
              	; others to have these features:
              	;
              	;    CPRTYP -	Set to TRUE to generate code for intrinsic TYPE command.
              	;
              	;    WSTYPE -	Set to TRUE to generate an extra three lines of code
              	;		to correctly interpret the WordStar (tm) internal
              	;		end of line hyphen for display, which is the ASCII
              	;		NEWLINE code (1FH) and normally non-printing or
              	;		troublemaking -- thanks to PJH for this one. CPRTYP
              	;		must be TRUE, or this symbol will be ignored.
              	;
              	;    CPRLST -	Set to TRUE to generate code for intrinsic LIST command.
              	;		Since almost all of the LIST code is common to the
              	;		TYPE code, CPRTYP must be set TRUE as well, or this
              	;		symbol will be ignored.
              	;
              	;    CPRDIR -	Set to TRUE to generate code for intrinsic DIR command.
              	;		Note that unlike the various directory programs, a
              	;		restricted DIR command here allows displaying the names
              	;		of SYS file ONLY, so many RCPM operators WANT this code.
              	;
              	;  Remember, you only get a total of 2048 (0800H) bytes of space for
              	; ALL of the generated code, or many other areas of your system
              	; generation will be affected. For example, to be fully SECURE, you
              	; would set SECURE to TRUE, and define MAXDRIV and USRMAX, and maybe
              	; use the internal password by setting INPASS to TRUE (external is
              	; MUCH recommended for easier modification). Those options absolutely
              	; generate too much code unless either CPRTYP or CPRDIR or both are
              	; set FALSE. A system with SECURE set to FALSE is right on the edge,
              	; and requires a give and take on options to fit, i.e. you can have
              	; MAXDRIV and USRMAX with DIR and TYPE if you leave out LIST and
              	; querying on ERASE, and so on.
              	;
              	;***************************************************************************
              	;** Be careful when playing with different combinations of these equates. **
              	;** You might not have enough memory to some combinations.  Check this    **
              	;** if you have problems, if they still persist, gripe to me (PST).       **
              	;***************************************************************************
              	;
              	;REL	EQU	TRUE		;SET TO TRUE FOR MOVCPM INTEGRATION
              	;
              	;BASE	EQU	0		;BASE OF CP/M SYSTEM (SET FOR STANDARD CP/M)
              	;
              	;; 	IF	REL
              	;; CPRLOC	EQU	0		;MOVCPM IMAGE
              	;; 	ELSE
              	;; ;
              	;; ; If REL is FALSE, the value of CPRLOC may be set in one
              	;; ; of two ways.  The first way is to set MSIZE and BIOSEX
              	;; ; as described above using the following three lines:
              	;; ;
              	;; ;MSIZE	EQU	56		;SIZE OF MEM IN K-BYTES
              	;; ;BIOSEX	EQU	2		;EXTRA # K-BYTES IN BIOS
              	;; ;CPRLOC	EQU	3400H+(MSIZE-20-BIOSEX)*1024	;CPR ORIGIN
              	;; ;
              	;; ; The second way is to obtain the origin of your current
              	;; ; CPR using BDSLOC or its equivalent, then merely set CPRLOC
              	;; ; to that value as in the following line:
              	;; ;
              	;; CPRLOC	EQU	0C400H		;FILL IN WITH BDOSLOC SUPPLIED VALUE
              	;; ;
              	;; ; Note that you should only use one method or the other.
              	;; ; Do NOT define CPRLOC twice!
              	;; ;
              	;; ; The following gives the required offset to load the CPR into the
              	;; ; CP/M SYSGEN Image through DDT (the Roffset command); Note that this
              	;; ; value conforms with the standard value presented in the CP/M reference
              	;; ; manuals, but it may not necessarily conform with the location of the
              	;; ; CCP in YOUR CP/M system; several systems (Morrow Designs, P&T, Heath
              	;; ; Org-0 to name a few) have the CCP located at a non-standard address in
              	;; ; the SYSGEN Image
              	;; ;
              	;; CPRR	EQU	0E00H-CPRLOC	;DDT LOAD OFFSET FOR APPLE SOFTCARD 56K
              	;; ;CPRR	EQU	0980H-CPRLOC	;DDT LOAD OFFSET
              	;; ;CPRR	EQU	1600H-CPRLOC	;DDT LOAD OFFSET FOR COMPUPRO DISK-1
              	;; ;CPRR	EQU	1100H-CPRLOC	;DDT LOAD OFFSET FOR MORROW DESIGNS
              	;; 	ENDIF
              	;
0000:         	RAS	EQU	FALSE		;SET TO TRUE IF CPR IS FOR A REMOTE-ACCESS
              					; SYSTEM AND YOU DON'T WANT TO RUN SECURE
              					; (FOO...)
              	;
0000:         	USRMAX	EQU	0000H		;LOCATION OF BYTE IN MEMORY CONTAINING
              					; NUMBER OF HIGHEST ALLOWABLE USER CODE + 1
              					; THIS VALUE IS SET BY CPR ON COLD BOOT,
              					; AND PRESUMABLY CONTROLLED AFTER THAT
              					; BY A PASSWORD PROGRAM. IF USRMAX=0, THEN
              					; MAXUSR BELOW IS USED FOR CHECKING ONLY.
              					; 03FH IS RECOMMENDED IF USED  ***
0013:         	MAXUSR	EQU	19		;MAX ALLOWED USER NUMBER, THIS + 1 IS STUFFED
              					; INTO USRMAX ON COLD BOOT, OR USED DIRECTLY
              					; IF USRMAX=0
              	;
0000:         	MAXDRIV	EQU	0000H		;LOCATION THAT HAS MAX LEGAL DRIVE #
              					;SET IT TO ZERO TO DISABLE THIS CHECK
              					;03DH IS RECOMMENDED IF USED ***
0001:         	MAXDR	EQU	1		;MAX DRIVE # TO SET INTO MAXDRIV ON COLD BOOT
              	;
0000:         	SECURE	EQU	FALSE		;SET TRUE FOR SECURE ENVIRONMENT...
              	;
0000:         	DEFUSR	EQU	0		;DEFAULT USER FOR UNRESTRICTED COM FILES
              	;
              		IF	SECURE
              	WHEEL	EQU	3EH		;SET TO "RESTRCT" FOR LIMITED ACCESS
              	RESTRCT EQU	0		;WHEN (WHEEL)==RESTRCT, LIMIT COMMANDS
              	RESUSR	EQU	15		;CHECK HERE FOR RESTRICTED ACCESS COM FILES
              					; (LIKE PIP) UNTIL CHANGED BY DFU OR WARM BOOT
              		ENDIF			;SECURE
              	;
0000:         	INPASS	EQU	FALSE		;SET TRUE IF RUNNING SECURE AND NOT PASS.COM
              	;
00FF:         	DRUSER	EQU	TRUE		;TRUE TO ALLOW USER COMMAND AND DRIVE/USER HACK
              	;
0000:         	EPRMPT	EQU	FALSE		;TRUE TO PROMPT BEFORE ERASING ALL FILES
              	;
00FF:         	CPRTYP	EQU	TRUE		;TRUE TO GENERATE TYPE CODE
00FF:         	WSTYPE	EQU	TRUE		;TRUE TO GENERATE WORDSTAR HYPHEN CHECK (CPRTYP
              					; MUST BE TRUE TOO)
00FF:         	CPRLST	EQU	TRUE		;TRUE TO GENERATE LIST CODE (CPRTYP MUST BETRUE TOO)
00FF:         	CPRDIR	EQU	TRUE		;TRUE TO GENERATE DIR CODE
              	;
              	;  ***  Note to Apple Softcard Users  ***
              	;
              	;  In their infinite (?) wisdom (???), Microsoft decided that the way to
              	; get a two-column directory display instead of four-column (narrow 40-col
              	; screen, remember) was to have their BIOS poke CCP every time it was
              	; loaded, if there was no terminal interface card in I/O slot 3.
              	; Naturally, that will turn into a random poke on any non-standard
              	; CCP, like this one.  The best way to get this CPR up on the Apple is to
              	; load it into CPM56.COM, at location 0E00H in the image.  The BIOS code
              	; that pokes the CPR can also be modified at that time.  The poke is done
              	; by "STA 0C8B2H", found at 24FEH in the CPM56 image.  To keep this
              	; feature, change the 0C8B2H address in that instruction by hand to
              	; the value generated for the symbol TWOPOK in the DIR routine.  If
              	; you have assembled out the DIR code by setting CPRDIR to FALSE, then
              	; disable this feature by changing the "STA" to "LDA", i.e. set the
              	; contents of location 24FEH from 32H to 3AH. If you wish to force
              	; a two-column display in all cases, set the TWOCOL switch below to a
              	; value of TRUE, and disable the poke.
              	;
0000:         	TWOCOL	EQU	FALSE		;TRUE IF TWO COL DIR INSTEAD OF FOUR
              	;
              	; The following is presented as an option, but is not generally user-customiz-
              	; able.  A basic design choice had to be made in the design of ZCPR concerning
              	; the execution of SUBMIT files.  The original CCP had a problem in this sense
              	; in that it ALWAYS looked for the SUBMIT file from drive A: and the SUBMIT
              	; program itself (SUBMIT.COM) would place the $$$.SUB file on the currently
              	; logged-in drive, so when the user was logged into B: and he issued a SUBMIT
              	; command, the $$$.SUB was placed on B: and did not execute because the CCP
              	; looked for it on A: and never found it.
              	;
              	;	After much debate it was decided to have ZCPR perform the same type of
              	; function as CCP (look for the $$$.SUB file on A:), but the problem with
              	; SUBMIT.COM still exists.  Hence, RGF designed SuperSUB and RLC took his
              	; SuperSUB and designed SUB from it; both programs are set up to allow the
              	; selection at assembly time of creating the $$$.SUB on the logged-in drive
              	; or on drive A:.
              	;
              	;	A final definition of the Indirect Command File ($$$.SUB or SUBMIT
              	; File) is presented as follows:
              	;
              	;		"An Indirect Command File is one which contains
              	;		 a series of commands exactly as they would be
              	;		 entered from a CP/M Console.  The SUBMIT Command
              	;		 (or SUB Command) reads this files and transforms
              	;		 it for processing by the ZCPR (the $$$.SUB File).
              	;		 ZCPR will then execute the commands indicated
              	;		 EXACTLY as if they were typed at the Console."
              	;
              	;	Hence, to permit this to happen, the $$$.SUB file must always
              	; be present on a specific drive, and A: is the choice for said drive.
              	; With this facility engaged as such, Indirect Command Files like:
              	;
              	;		DIR
              	;		A:
              	;		DIR
              	;
              	; can be executed, even though the currently logged-in drive is changed
              	; during execution.  If the $$$.SUB file was present on the currently
              	; logged-in drive, the above series of commands would not work since the
              	; ZCPR would be looking for $$$.SUB on the logged-in drive, and switching
              	; logged-in drives without moving the $$$.SUB file as well would cause
              	; processing to abort.
              	;
00FF:         	SUBA	EQU	TRUE 		;Set to TRUE to have $$$.SUB always on A:
              					;Set to FALSE to have $$$.SUB on the
              					; logged-in drive
              	;
              	;   The following flag enables extended processing for user-program supplied
              	; command lines.  This is for Command Level 3 of ZCPR.  Under the current
              	; ZCPR philosophy, three command levels exist:
              	;
              	;	(1) that command issued by the user from his console at the '>' prompt
              	;	(2) that command issued by a $$$.SUB file at the '$' prompt
              	;	(3) that command issued by a user program by placing the command into
              	;	    CIBUFF and setting the character count in CBUFF
              	;
              	;   Setting CLEVEL3 to TRUE enables extended processing of the third level of
              	; ZCPR command.  All the user program need do is to store the command line and
              	; set the character count; ZCPR will initialize the pointers properly, store
              	; the ending zero properly, and capitalize the command line for processing.
              	; Once the command line is properly stored, the user executes the command line
              	; by reentering the ZCPR through CPRLOC [NOTE:  The C register MUST contain
              	; a valid User/Disk Flag (see location 4) at this time.]
              	;
00FF:         	CLEVEL3	EQU	TRUE		;ENABLE COMMAND LEVEL 3 PROCESSING
              	;
              	;
              	;*** TERMINAL AND 'TYPE' CUSTOMIZATION EQUATES
              	;
0018:         	NLINES	EQU	24		;NUMBER OF LINES ON CRT SCREEN
00FF:         	WIDE	EQU	TRUE		;TRUE IF WIDE DIR DISPLAY
007C:         	FENCE	EQU	'|'		;SEP CHAR BETWEEN DIR FILES
              	;
0000:         	PGDFLT	EQU	FALSE 		;SET TO FALSE TO DISABLE PAGING BY DEFAULT
0050:         	PGDFLG	EQU	'P'		;FOR TYPE COMMAND: PAGE OR NOT (DEP ON PGDFLT)
              					;  THIS FLAG REVERSES THE DEFAULT EFFECT
              	;
0041:         	SYSFLG	EQU	'A' 		;FOR DIR COMMAND: LIST $SYS AND $DIR
              	;
0053:         	SOFLG	EQU	'S'		;FOR DIR COMMAND: LIST $SYS FILES ONLY
              	;
0000:         	SUPRES	EQU	FALSE		;SUPRESSES USER # REPORT FOR USER 0
              	;
0024:         	SPRMPT	EQU	'$'		;CPR PROMPT INDICATING SUBMIT COMMAND
003E:         	CPRMPT	EQU	'>'		;CPR PROMPT INDICATING USER COMMAND
              	;
0048:         	NUMBASE	EQU	'H'		;CHARACTER USED TO SWITCH FROM DEFAULT
              					; NUMBER BASE
              	;
0053:         	SECTFLG	EQU	'S'		;OPTION CHAR FOR SAVE COMMAND TO SAVE SECTORS
              	;
              	; END OF CUSTOMIZATION SECTION
              	;
000D:         	CR	EQU	0DH
000A:         	LF	EQU	0AH
0009:         	TAB	EQU	09H
000C:         	FFEED	EQU	0CH
0007:         	BEL	EQU	07H
              	;
              	;; WBOOT	EQU	BASE+0000H		;CP/M WARM BOOT ADDRESS
              	;; UDFLAG	EQU	BASE+0004H		;USER NUM IN HIGH NYBBLE, DISK IN LOW
              	;; BDOS	EQU	BASE+0005H		;BDOS FUNCTION CALL ENTRY PT
              	;; TFCB	EQU	BASE+005CH		;DEFAULT FCB BUFFER
              	;; TBUFF	EQU	BASE+0080H		;DEFAULT DISK I/O BUFFER
              	;; TPA	EQU	BASE+0100H		;BASE OF TPA
              	
0100:         	TPA    EQU     100H
              	
              	;
              	;**** Section 0 ****
              	;
              	;	ORG	0100H
              	;	.PHASE	CPRLOC
              	;
              	;  ENTRY POINTS INTO ZCPR
              	;
              	;    If the ZCPR is entered at location CPRLOC (at the JMP to CPR), then
              	; the default command in CIBUFF will be processed.  If the ZCPR is entered
              	; at location CPRLOC+3 (at the JMP to CPR1), then the default command in
              	; CIBUFF will NOT be processed.
              	;
              	;    NOTE:  Entry into ZCPR in this way is permitted under this version,
              	; but in order for this to work, CIBUFF and CBUFF MUST be initialized properly
              	; AND the C register MUST contain a valid User/Disk Flag (see Location 4: the
              	; most significant nybble contains the User Number and the least significant
              	; nybble contains the Disk Number).
              	;
              	;    Some user programs (such as SYNONYM3) attempt to use the default
              	; command facility.  Under the original CCP, it was necessary to initialize
              	; the pointer after the reserved space for the command buffer to point to
              	; the first byte of the command buffer.  Under current versions, this is
              	; no longer the case.  The CIBPTR (Command Input Buffer PoinTeR) is located
              	; to be compatible with such programs (provided they determine the buffer
              	; length from the byte at MBUFF [CPRLOC + 6]), but under ZCPR this is
              	; no longer necessary, since this buffer pointer is automatically
              	; initialized in all cases.
              	;
D800:         	cbase:  
D800:         	ENTRY:
D800: C3C0D8  		JP	CPR		; Process potential default command, and set
              					; USRMAX to MAXUSR default
              	;	JP	CPR1		; Do NOT process potential default command
              	;	
              	;**** Section 1 ****
              	; BUFFERS ET AL
              	;
              	; INPUT COMMAND LINE AND DEFAULT COMMAND
              	;
              	;   The command line to be executed is stored here.  This command line
              	; is generated in one of three ways:
              	;
              	;	(1) by the user entering it through the BDOS READLN function at
              	;	    the du> prompt [user input from keyboard]
              	;	(2) by the SUBMIT File Facility placing it there from a $$$.SUB
              	;	    file
              	;	(3) by an external program or user placing the required command
              	;	    into this buffer
              	;
              	;   In all cases, the command line is placed into the buffer starting at
              	; CIBUFF.  This command line is terminated by the last character (NOT Carriage
              	; Return), and a character count of all characters in the command line
              	; up to and including the last character is placed into location CBUFF
              	; (immediately before the command line at CIBUFF).  The placed command line
              	; is then parsed, interpreted, and the indicated command is executed.
              	; If CLEVEL3 is permitted, a terminating zero is placed after the command
              	; (otherwise the user program has to place this zero) and the CIBPTR is
              	; properly initialized (otherwise the user program has to init this ptr).
              	; If the command is placed by a user program, entering at CPRLOC is enough
              	; to have the command processed.  Again, under the current ZCPR, it is not
              	; necessary to store the pointer to CIBUFF in CIBPTR; ZCPR will do this for
              	; the calling program if CLEVEL3 is made TRUE.
              	;
              	;   WARNING:  The command line must NOT exceed BUFLEN characters in length.
              	; For user programs which load this command, the value of BUFLEN can be
              	; obtained by examining the byte at MBUFF (CPRLOC + 6).
              	;
D803:         	inbuff: 
0050:         	BUFLEN	EQU	80		;MAXIMUM BUFFER LENGTH
D803:         	MBUFF:
D803: 50      		DEFB	BUFLEN		;MAXIMUM BUFFER LENGTH
D804:         	CBUFF:
D804: 00      		DEFB	0		;NUMBER OF VALID CHARS IN COMMAND LINE
              	
D805:         	CIBUFF:
D805: 494E4954	 	DEFM	'INIT '
D809: 20      	
D80A: FF      	        DEFB    255
D80B: 20202020	        DEFM    '        ';DEFAULT (COLD BOOT) COMMAND
D80F: 20202020	
              	;
              	;  The copyright notice from Digital Research is genned into the
              	; stock CCP at this location. It should be maintained in ZCPR,
              	; since Digital Research grants permission for ZCPR to exist.
              	;
D813: 2020434F		DEFM	'  COPYRIGHT (C) 1979, DIGITAL RESEARCH  '
D817: 50595249	
D81B: 47485420	
D81F: 28432920	
D823: 31393739	
D827: 2C204449	
D82B: 47495441	
D82F: 4C205245	
D833: 53454152	
D837: 43482020	
D83B:         	CIBUF:
D83B: 00      		DEFB	0		;COMMAND STRING TERMINATOR
D83C: 4E5A4350		DEFM	'NZCPR V 1.6 of'
D840: 52205620	
D844: 312E3620	
D848: 6F66    	
D84A: 2030382F		DEFM	' 08/03/82 '	;ZCPR ID FOR DISK DUMP
D84E: 30332F38	
D852: 3220    	
D854: 0000    	 	DEFS	BUFLEN-($-CIBUFF)+1	;TOTAL IS 'BUFLEN' BYTES
              	;
D856:         	CIBPTR:
D856: 05D8    		DEFW	CIBUFF		;POINTER TO COMMAND INPUT BUFFER
D858:         	CIPTR:
D858: 3BD8    		DEFW	CIBUF		;POINTER TO CURR COMMAND FOR
              					; ERROR REPORTING
              	;
D85A: 00000000		DEFS	26		;STACK AREA
D85E: 00...   	
D874:         	STACK	EQU	$		;TOP OF STACK
              	;
              	; FILE TYPE FOR COMMAND
              	;
D874:         	COMMSG:
D874: 434F4D  		DEFM	'COM'
              	;
              	; SUBMIT FILE CONTROL BLOCK
              	;
D877:         	SUBFCB:
              		IF	SUBA		;IF $$$.SUB ON A:
D877: 01      		DEFB	1		;DISK NAME SET TO DEFAULT TO DRIVE A:
              	;	ENDIF
              	;
              	;	IF	NOT SUBA	;IF $$$.SUB ON CURRENT DRIVE
              	        ELSE
              		DEFB	0		;DISK NAME SET TO DEFAULT TO CURRENT DRIVE
              		ENDIF
              	;
D878: 242424  		DEFM	'$$$'		;FILE NAME
D87B: 20202020		DEFM	'     '
D87F: 20      	
D880: 535542  		DEFM	'SUB'		;FILE TYPE
D883: 00      		DEFB	0		;EXTENT NUMBER
D884: 00      		DEFB	0		;S1
D885:         	SUBFS2:
D885: 00      		DEFS	1		;S2
D886:         	SUBFRC:
D886: 00      		DEFS	1		;RECORD COUNT
D887: 00000000		DEFS	16		;DISK GROUP MAP
D88B: 00...   	
D897:         	SUBFCR:
D897: 00      		DEFS	1		;CURRENT RECORD NUMBER
              	; COMMAND FILE CONTROL BLOCK
              	;
D898:         	FCBDN:
D898: 00      		DEFS	1		;DISK NAME
D899:         	FCBFN:
D899: 00000000		DEFS	8		;FILE NAME
D89D: 00000000	
D8A1:         	FCBFT:
D8A1: 000000  		DEFS	3		;FILE TYPE
D8A4: 00      		DEFS	1		;EXTENT NUMBER
D8A5: 0000    		DEFS	2		;S1 AND S2
D8A7: 00      		DEFS	1		;RECORD COUNT
D8A8:         	FCBDM:
D8A8: 00000000		DEFS	16		;DISK GROUP MAP
D8AC: 00...   	
D8B8:         	FCBCR:
D8B8: 00      		DEFS	1		;CURRENT RECORD NUMBER
              	;
              	; OTHER BUFFERS
              	;
D8B9:         	PAGCNT:
D8B9: 16      		DEFB	NLINES-2	;LINES LEFT ON PAGE
D8BA:         	CHRCNT:
D8BA: 00      		DEFB	0		;CHAR COUNT FOR TYPE
D8BB:         	QMCNT:
D8BB: 00      		DEFB	0		;QUESTION MARK COUNT FOR FCB TOKEN SCANNER
              	;
              	;
              	;**** Section 2 ****
              	; CPR STARTING POINTS.  NOTE THAT SOME CP/M IMPLEMENTATIONS
              	; REQUIRE THE COLD START ADDRESS TO BE IN THE STARTING PAGE
              	; OF THE CPR, FOR DYNAMIC CCP LOADING.  CMDTBL WAS MOVED FOR
              	; THIS REASON.
              	;
              	; SET USRMAX AND/OR MAXDRIV TO DEFAULT VALUES ON COLD BOOT
              	; IF REQUIRED. NOTE THAT SOME BIOS IMPLEMENTATIONS WILL END
              	; UP HERE INSTEAD OF AT THE WARM BOOT, DEFEATING PASSWORDING
              	; OF THESE OPTIONS. RECOMMEND SUCH A BIOS BE FIXED.
              	;
              		IF	USRMAX OR MAXDRIV
              	CPR:
              		IF	USRMAX
              		LD	A,MAXUSR+1	;SET USRMAX ON COLD BOOT
              		LD	(USRMAX),A
              		ENDIF			;USRMAX
              	;
              		IF	MAXDRIV
              		LD	A,MAXDR		;SET MAXDRIV ON COLD BOOT
              		LD	(MAXDRIV),A
              		ENDIF			;MAXDRIV
              	;
              		JR	CPR2		; THEN PROCEED
              		ENDIF			;USRMAX OR MAXDRIV
              	;
              	; START CPR AND DON'T PROCESS DEFAULT COMMAND STORED
              	;
D8BC:         	CPR1:
D8BC: AF      		XOR	A		;SET NO DEFAULT COMMAND
D8BD: 3204D8  		LD	(CBUFF),A
              	;
              	; START CPR AND POSSIBLY PROCESS DEFAULT COMMAND
              	;
              	; NOTE ON MODIFICATION BY RGF: BDOS RETURNS 0FFH IN
              	; ACCUMULATOR WHENEVER IT LOGS IN A DIRECTORY, IF ANY
              	; FILE NAME CONTAINS A '$' IN IT.  THIS IS NOW USED AS
              	; A CLUE TO DETERMINE WHETHER OR NOT TO DO A SEARCH
              	; FOR SUBMIT FILE, IN ORDER TO ELIMINATE WASTEFUL SEARCHES.
              	;
              		IF	USRMAX OR MAXDRIV
              	CPR2:
              		ELSE
D8C0:         	CPR:
              		ENDIF			;USRMAX OR MAXDRIV
              	;
D8C0: 3174D8  		LD	SP,STACK	;RESET STACK
D8C3: C5      		PUSH	BC
D8C4: 79      		LD	A,C		;C=USER/DISK NUMBER (SEE LOC 4)
D8C5: 1F      		RRA			;EXTRACT USER NUMBER
D8C6: 1F      		RRA
D8C7: 1F      		RRA
D8C8: 1F      		RRA
D8C9: E60F    		AND	0FH
D8CB: 5F      		LD	E,A		;SET USER NUMBER
D8CC: CD6ADA  		CALL	SETUSR
D8CF: CD2DDA  		CALL	RESET		;RESET DISK SYSTEM
              		;LD	(RNGSUB),A	;SAVE SUBMIT CLUE FROM DRIVE A:
D8D2: C1      		POP	BC
D8D3: 79      		LD	A,C		;C=USER/DISK NUMBER (SEE LOC 4)
D8D4: E60F    		AND	0FH		;EXTRACT DEFAULT DISK DRIVE
D8D6: 327EDA  		LD	(TDRIVE),A	;SET IT
D8D9: 2803    		JR	Z,NOLOG		;SKIP IF 0...ALREADY LOGGED
D8DB: CD32DA  		CALL	LOGIN		;LOG IN DEFAULT DISK
              	;
              		IF	SUBA	;IF $$$.SUB IS ON CURRENT DRIVE
              	        ELSE
              		LD	(RNGSUB),A	;BDOS '$' CLUE
              		ENDIF
              	;
D8DE:         	NOLOG:
D8DE: 1177D8  		LD	DE,SUBFCB	;CHECK FOR $$$.SUB ON CURRENT DISK
D8E2:         	batch:  EQU     $+1
D8E2:         	RNGSUB:	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
D8E1: 3E00    	        LD	A,0	        ;2ND BYTE (IMMEDIATE ARG) IS THE RNGSUB FLAG
D8E3: B7      		OR	A		;SET FLAGS ON CLUE
D8E4: 2F      		CPL			;PREPARE FOR COMING 'CPL'
D8E5: C44CDA  		CALL	NZ,SEAR1
D8E8: 2F      		CPL			;0FFH IS RETURNED IF NO $$$.SUB, SO COMPLEMENT
D8E9: 32E2D8  		LD	(RNGSUB),A	;SET FLAG (0=NO $$$.SUB)
D8EC: 3A04D8  		LD	A,(CBUFF)	;EXECUTE DEFAULT COMMAND?
D8EF: B7      		OR	A		;0=NO
D8F0: 2026    		JR	NZ,RS1
              	;
              	; PROMPT USER AND INPUT COMMAND LINE FROM HIM
              	;
D8F2:         	RESTRT:
D8F2: 3174D8  		LD	SP,STACK	;RESET STACK
              	;
              	; PRINT PROMPT (DU>)
              	;
D8F5: CDA1D9  		CALL	CRLF		;PRINT PROMPT
D8F8: CD22DA  		CALL	GETDRV		;CURRENT DRIVE IS PART OF PROMPT
D8FB: C641    		ADD	A,'A'		;CONVERT TO ASCII A-P
D8FD: CDA8D9  		CALL	CONOUT
D900: CD68DA  		CALL	GETUSR		;GET USER NUMBER
              	;
              		IF	SUPRES		;IF SUPPRESSING USR # REPORT FOR USR 0
              		OR	A
              		JR	Z,RS000
              		ENDIF
              	;
D903: FE0A    		CP	10		;USER < 10?
D905: 3809    		JR	C,RS00
D907: D60A    		SUB	10		;SUBTRACT 10 FROM IT
D909: F5      		PUSH	AF		;SAVE IT
D90A: 3E31    		LD	A,'1'		;OUTPUT 10'S DIGIT
D90C: CDA8D9  		CALL	CONOUT
D90F: F1      		POP	AF
D910:         	RS00:
D910: C630    		ADD	A,'0'		;OUTPUT 1'S DIGIT (CONVERT TO ASCII)
D912: CDA8D9  		CALL	CONOUT
              	;
              	; READ INPUT LINE FROM USER OR $$$.SUB
              	;
D915:         	RS000:
D915: CD83DA  		CALL	REDBUF		;INPUT COMMAND LINE FROM USER (OR $$$.SUB)
              	;
              	; PROCESS INPUT LINE
              	;
D918:         	RS1:
              	;
              		IF	CLEVEL3		;IF THIRD COMMAND LEVEL IS PERMITTED
D918: CDF0DA  		CALL	CNVBUF		;CAPITALIZE COMMAND LINE, PLACE ENDING 0,
              					; AND SET CIBPTR VALUE
              		ENDIF
              	;
D91B: CD26DA  		CALL	DEFDMA		;SET TBUFF TO DMA ADDRESS
D91E: CD22DA  		CALL	GETDRV		;GET DEFAULT DRIVE NUMBER
D921: 327EDA  		LD	(TDRIVE),A	;SET IT
D924: CD08DC  		CALL	SCANER		;PARSE COMMAND NAME FROM COMMAND LINE
D927: C417DB  		CALL	NZ,ERROR	;ERROR IF COMMAND NAME CONTAINS A '?'
D92A: 1140D9  		LD	DE,RSTCPR	;PUT RETURN ADDRESS OF COMMAND
D92D: D5      		PUSH	DE		;ON THE STACK
D92E: 3AFFDB  		LD	A,(TEMPDR)	;IS COMMAND OF FORM 'D:COMMAND'?
D931: B7      		OR	A		;NZ=YES
D932: C2F7DE  		JP	NZ,COM		; IMMEDIATELY
D935: CD87DC  		CALL	CMDSER		;SCAN FOR CPR-RESIDENT COMMAND
D938: C2F7DE  		JP	NZ,COM		;NOT CPR-RESIDENT
D93B: 7E      		LD	A,(HL)		;FOUND IT:  GET LOW-ORDER PART
D93C: 23      		INC	HL		;GET HIGH-ORDER PART
D93D: 66      		LD	H,(HL)		;STORE HIGH
D93E: 6F      		LD	L,A		;STORE LOW
D93F: E9      		JP	(HL)		;EXECUTE CPR ROUTINE
              	;
              	; ENTRY POINT FOR RESTARTING CPR AND LOGGING IN DEFAULT DRIVE
              	;
D940:         	RSTCPR:
D940: CDF4DB  		CALL	DLOGIN		;LOG IN DEFAULT DRIVE
              	;
              	; ENTRY POINT FOR RESTARTING CPR WITHOUT LOGGING IN DEFAULT DRIVE
              	;
D943:         	RCPRNL:
D943: CD08DC  		CALL	SCANER		;EXTRACT NEXT TOKEN FROM COMMAND LINE
D946: 3A99D8  		LD	A,(FCBFN)	;GET FIRST CHAR OF TOKEN
D949: D620    		SUB	' '		;ANY CHAR?
D94B: 21FFDB  		LD	HL,TEMPDR
D94E: B6      		OR	(HL)
D94F: C217DB  		JP	NZ,ERROR
D952: 189E    		JR	RESTRT
              	;
              	; No File Error Message
              	;
D954:         	PRNNF:
D954: CD0ADA  		CALL	PRINTC		;NO FILE MESSAGE
D957: 4E6F2046		DEFM	'No Fil'
D95B: 696C    	
D95D: E5      		DEFB	'e'+80H
D95E: C9      		RET
              	;
              	; CPR BUILT-IN COMMAND TABLE
              	;
0004:         	NCHARS	EQU	4		;NUMBER OF CHARS/COMMAND
              	;
              	; CPR COMMAND NAME TABLE
              	;   EACH TABLE ENTRY IS COMPOSED OF THE 4-BYTE COMMAND AND 2-BYTE ADDRESS
              	;
D95F:         	CMDTBL:
              	;
              		IF	INPASS AND SECURE
              		DEFM	'PASS'		;ENABLE WHEEL (SYSOP) MODE
              		DEFW	PASS
              		ENDIF			;INPASS AND SECURE
              	;
              		IF	DRUSER
D95F: 55534552		DEFM	'USER'		;CHANGE USER AREAS
D963: DBDE    		DEFW	USER
              		ENDIF			;DRUSER
              	;
              		IF	CPRTYP
D965: 54595045		DEFM	'TYPE'		;TYPE A FILE TO CON:
D969: 85DD    		DEFW	TYPE
              		ENDIF			;CPRTYP
              	;
              		IF	CPRDIR
D96B: 44495220		DEFM	'DIR '		;PULL A DIRECTORY OF DISK FILES
D96F: A9DC    		DEFW	DIR
              		ENDIF			;CPRDIR
              	
0003:         	NRCMDS	EQU	($-CMDTBL)/(NCHARS+2)
              					;PUT ANY COMMANDS THAT ARE OK TO
              					;RUN WHEN NOT UNDER WHEEL MODE
              					;IN FRONT OF THIS LABEL
              		IF	CPRLST AND CPRTYP
D971: 4C495354		DEFM	'LIST'		;LIST FILE TO PRINTER
D975: 81DD    		DEFW	LIST
              		ENDIF			;CPRLST AND CPRTYP
              	;
              		IF	INPASS AND SECURE
              		DEFM	'NORM'		;DISABLE WHEEL MODE
              		DEFW	NORM
              		ENDIF			;INPASS AND SECURE
              	;
              		IF	RAS		;FOR NON-RAS
              	        ELSE
D977: 474F2020		DEFM	'GO  '		;JUMP TO 100H
D97B: F2DE    		DEFW	GO
D97D: 45524120		DEFM	'ERA '		;ERASE FILE
D981: 5ADD    		DEFW	ERA
D983: 53415645		DEFM	'SAVE'		;SAVE MEMORY IMAGE TO DISK
D987: 12DE    		DEFW	SAVE
D989: 52454E20		DEFM	'REN '		;RENAME FILE
D98D: 97DE    		DEFW	REN
D98F: 44465520		DEFM	'DFU '		;SET DEFAULT USER
D993: E5DE    		DEFW	DFU
D995: 47455420		DEFM	'GET '		;LOAD FILE INTO MEMORY
D999: 97DF    		DEFW	GET
D99B: 4A554D50		DEFM	'JUMP'		;JUMP TO LOCATION IN MEMORY
D99F: EDDE    		DEFW	JUMP
              		ENDIF			;RAS
              	;
000B:         	NCMNDS	EQU	($-CMDTBL)/(NCHARS+2)
              	;
              	;**** Section 3 ****
              	; I/O UTILITIES
              	;
              	; OUTPUT CHAR IN REG A TO CONSOLE AND DON'T CHANGE BC
              	;
              	;
              	; OUTPUT <CRLF>
              	;
D9A1:         	CRLF:
D9A1: 3E0D    		LD	A,CR
D9A3: CDA8D9  		CALL	CONOUT
D9A6: 3E0A    		LD	A,LF		;FALL THRU TO CONOUT
              	;
D9A8:         	CONOUT:
D9A8: C5      		PUSH	BC
D9A9: 0E02    		LD	C,02H
D9AB:         	OUTPUT:
D9AB: E67F    		AND	7FH		;PREVENT INADVERTANT GRAPHIC OUTPUT
              					; TO EPSON-TYPE PRINTERS
D9AD: 5F      		LD	E,A
D9AE: E5      		PUSH	HL
D9AF: CD0500  		CALL	BDOS
D9B2: E1      		POP	HL
D9B3: C1      		POP	BC
D9B4: C9      		RET
              	;
D9B5:         	CONIN:
D9B5: 0E01    		LD	C,01H		;GET CHAR FROM CON: WITH ECHO
D9B7: CD03DA  		CALL	BDOSB
              	;
              	; CONVERT CHAR IN A TO UPPER CASE
              	;
D9BA:         	UCASE:
D9BA: FE61    		CP	61H		;LOWER-CASE A
D9BC: D8      		RET	C
D9BD: FE7B    		CP	7BH		;GREATER THAN LOWER-CASE Z?
D9BF: D0      		RET	NC
D9C0: E65F    		AND	5FH		;CAPITALIZE
D9C2: C9      		RET
              	;
D9C3:         	NOECHO:
D9C3: D5      		PUSH	DE		;SAVE D
D9C4: 0E06    		LD	C,6		;DIRECT CONSOLE I/O
D9C6: 1EFF    		LD	E,0FFH		;INPUT
D9C8: CD03DA  		CALL	BDOSB
D9CB: D1      		POP	DE
D9CC: B7      		OR	A		;DID WE GET A CHAR?
D9CD: 28F4    		JR	Z,NOECHO	;WAIT FOR IT IF NOT, IT'S EXPECTED
D9CF: C9      		RET
              	;
              		IF	CPRTYP
D9D0:         	LCOUT:
              		ENDIF			;CPRTYP
              	;
              		IF	CPRTYP AND CPRLST
D9D0: F5      		PUSH	AF		;OUTPUT CHAR TO CON: OR LST: DEP ON PRFLG
D9D2:         	PRFLG	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
D9D1: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS THE PRINT FLAG
D9D3: B7      		OR	A		;0=TYPE
D9D4: 2806    		JR	Z,LC1
D9D6: F1      		POP	AF		;GET CHAR
              	;
              	; OUTPUT CHAR IN REG A TO LIST DEVICE
              	;
D9D7:         	LSTOUT:
D9D7: C5      		PUSH	BC
D9D8: 0E05    		LD	C,05H
D9DA: 18CF    		JR	OUTPUT
D9DC:         	LC1:
D9DC: F1      		POP	AF		;GET CHAR
              		ENDIF			;CPRTYP AND CPRLST
              	;
              		IF	CPRTYP
D9DD: F5      		PUSH	AF
D9DE: CDA8D9  		CALL	CONOUT		;OUTPUT TO CON:
D9E1: F1      		POP	AF
D9E2: FE0A    		CP	LF		;CHECK FOR PAGING
D9E4: C0      		RET	NZ		;DONE IF NOT EOL YET
              	;
              	;  COUNT DOWN LINES AND PAUSE FOR INPUT (DIRECT) IF COUNT EXPIRES
              	;
D9E5: E5      		PUSH	HL
D9E6: 21B9D8  		LD	HL,PAGCNT	;COUNT DOWN
D9E9: 35      		DEC	(HL)
D9EA: 2010    		JR	NZ,PGBAK	;JUMP IF NOT END OF PAGE
D9EC: 3616    		LD	(HL),NLINES-2	;REFILL COUNTER
              	;
D9EF:         	PGFLG	EQU	$+1		;POINTER TO IN-THE-CODE BUFFER PGFLG
D9EE: 3E00    		LD	A,0		;0 MAY BE CHANGED BY PGFLG EQUATE
D9F0: FE50    		CP	PGDFLG		;PAGE DEFAULT OVERRIDE OPTION WANTED?
              	;
              		IF	PGDFLT		;IF PAGING IS DEFAULT
              		JR	Z,PGBAK		;  PGDFLG MEANS NO PAGING, PLEASE
              		ELSE			;IF PAGING NOT DEFAULT
D9F2: 2008    		JR	NZ,PGBAK	;  PGDFLG MEANS PLEASE PAGINATE
              		ENDIF
              	;
D9F4: CDC3D9  		CALL	NOECHO		;GET CHAR BUT DON'T ECHO TO SCREEN
D9F7: FE03    		CP	'C'-'@' 	;^C
D9F9: CA40D9  		JP	Z,RSTCPR	;RESTART CPR
D9FC:         	PGBAK:
D9FC: E1      		POP	HL		;RESTORE HL
D9FD: C9      		RET
              		ENDIF			;CPRTYP
              	;
D9FE:         	READF:
D9FE: 1198D8  		LD	DE,FCBDN 	;FALL THRU TO READ
DA01:         	READ:
DA01: 0E14    		LD	C,14H		;FALL THRU TO BDOSB
              	;
              	; CALL BDOS AND SAVE BC
              	;
DA03:         	BDOSB:
DA03: C5      		PUSH	BC
DA04: CD0500  		CALL	BDOS
DA07: C1      		POP	BC
DA08: B7      		OR	A
DA09: C9      		RET
              	;
              	; PRINT STRING ENDING WITH ZERO BYTE OR CHAR WITH HIGH BIT SET
              	; PT'ED TO BY RET ADDR, START WITH <CR><LF>
              	;
DA0A:         	PRINTC:
DA0A: F5      		PUSH	AF		;SAVE FLAGS
DA0B: CDA1D9  		CALL	CRLF		;NEW LINE
DA0E: F1      		POP	AF
              	;
DA0F:         	PRINT:
DA0F: E3      		EX	(SP),HL		;GET PTR TO STRING
DA10: F5      		PUSH	AF		;SAVE FLAGS
DA11: CD17DA  		CALL	PRIN1		;PRINT STRING
DA14: F1      		POP	AF		;GET FLAGS
DA15: E3      		EX	(SP),HL		;RESTORE HL AND RET ADR
DA16: C9      		RET
              	;
              	; PRINT STRING ENDING WITH ZERO BYTE OR CHAR WITH HIGH BIT SET
              	; PT'ED TO BY HL
              	;
DA17:         	PRIN1:
DA17: 7E      		LD	A,(HL)		;GET NEXT BYTE
DA18: CDA8D9  		CALL	CONOUT		;PRINT CHAR
DA1B: 7E      		LD	A,(HL)		;GET NEXT BYTE AGAIN FOR TEST
DA1C: 23      		INC	HL		;PT TO NEXT BYTE
DA1D: B7      		OR	A		;SET FLAGS
DA1E: C8      		RET	Z		;DONE IF ZERO
DA1F: F8      		RET	M		;DONE IF MSB SET
DA20: 18F5    		JR	PRIN1
              	;
              	; BDOS FUNCTION ROUTINES
              	;
              	;
              	; RETURN NUMBER OF CURRENT DISK IN A
              	;
DA22:         	GETDRV:
DA22: 0E19    		LD	C,19H
DA24: 1809    		JR	BDOSJP
              	;
              	; SET 80H AS DMA ADDRESS
              	;
DA26:         	DEFDMA:
DA26: 118000  		LD	DE,TBUFF 	;80H=TBUFF
DA29:         	DMASET:
DA29: 0E1A    		LD	C,1AH
DA2B: 1802    		JR	BDOSJP
              	;
DA2D:         	RESET:
DA2D: 0E0D    		LD	C,0DH
DA2F:         	BDOSJP:
DA2F: C30500  		JP	BDOS
              	;
DA32:         	LOGIN:
DA32: 5F      		LD	E,A		;MOVE DESIRED # TO BDOS REG
              	;
              		IF	MAXDRIV
              		LD	A,(MAXDRIV)	;CHECK FOR LEGAL DRIVE #
              		CP	E
              		JP	C,ERROR		;DON'T DO IT IF TOO HIGH
              		ENDIF			;MAXDRIV
              	;
DA33: 0E0E    		LD	C,0EH
DA35: 18F8    		JR	BDOSJP		;SAVE SOME CODE SPACE
              	;
DA37:         	OPENF:
DA37: AF      		XOR	A
DA38: 32B8D8  		LD	(FCBCR),A
DA3B: 1198D8  		LD	DE,FCBDN 	;FALL THRU TO OPEN
              	;
DA3E:         	OPEN:
DA3E: 0E0F    		LD	C,0FH		;FALL THRU TO GRBDOS
              	;
DA40:         	GRBDOS:
DA40: CD0500  		CALL	BDOS
DA43: 3C      		INC	A		;SET ZERO FLAG FOR ERROR RETURN
DA44: C9      		RET
              	;
DA45:         	CLOSE:
DA45: 0E10    		LD	C,10H
DA47: 18F7    		JR	GRBDOS
              	;
DA49:         	SEARF:
DA49: 1198D8  		LD	DE,FCBDN 	;SPECIFY FCB
DA4C:         	SEAR1:
DA4C: 0E11    		LD	C,11H
DA4E: 18F0    		JR	GRBDOS
              	;
DA50:         	SEARN:
DA50: 0E12    		LD	C,12H
DA52: 18EC    		JR	GRBDOS
              	;
              	; CHECK FOR SUBMIT FILE IN EXECUTION AND ABORT IT IF SO
              	;
DA54:         	SUBKIL:
DA54: 21E2D8  		LD	HL,RNGSUB	;CHECK FOR SUBMIT FILE IN EXECUTION
DA57: 7E      		LD	A,(HL)
DA58: B7      		OR	A		;0=NO
DA59: C8      		RET	Z
DA5A: 3600    		LD	(HL),0		;ABORT SUBMIT FILE
DA5C: 1177D8  		LD	DE,SUBFCB	;DELETE $$$.SUB
              	;
DA5F:         	DELETE:
DA5F: 0E13    		LD	C,13H
DA61: 18CC    		JR	BDOSJP		;SAVE MORE SPACE
              	;
              	; RESET USER NUMBER IF CHANGED
              	;
DA63:         	RESETUSR:
DA64:         	TMPUSR	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
DA63: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS TMPUSR
DA65: 5F      		LD	E,A		;PLACE IN E
DA66: 1802    		JR	SETUSR		;THEN GO SET USER
DA68:         	GETUSR:
DA68: 1EFF    		LD	E,0FFH		;GET CURRENT USER NUMBER
DA6A:         	SETUSR:
DA6A: 0E20    		LD	C,20H		;SET USER NUMBER TO VALUE IN E (GET IF E=FFH)
DA6C: 18C1    		JR	BDOSJP		;MORE SPACE SAVING
              	;
              	; END OF BDOS FUNCTIONS
              	;
              	;
              	;**** Section 4 ****
              	; CPR UTILITIES
              	;
              	; SET USER/DISK FLAG TO CURRENT USER AND DEFAULT DISK
              	;
DA6E:         	SETUD:
DA6E: CD68DA  		CALL	GETUSR		;GET NUMBER OF CURRENT USER
DA71: 87      		ADD	A,A		;PLACE IT IN HIGH NYBBLE
DA72: 87      		ADD	A,A
DA73: 87      		ADD	A,A
DA74: 87      		ADD	A,A
DA75: 217EDA  		LD	HL,TDRIVE	;MASK IN DEFAULT DRIVE NUMBER (LOW NYBBLE)
DA78: B6      		OR	(HL)		;MASK IN
DA79: 320400  		LD	(UDFLAG),A	;SET USER/DISK NUMBER
DA7C: C9      		RET
              	;
              	; SET USER/DISK FLAG TO USER 0 AND DEFAULT DISK
              	;
DA7D:         	SETU0D:
DA7E:         	TDRIVE	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
DA7D: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS TDRIVE
DA7F: 320400  		LD	(UDFLAG),A	;SET USER/DISK NUMBER
DA82: C9      		RET
              	;
              	; INPUT NEXT COMMAND TO CPR
              	;	This routine determines if a SUBMIT file is being processed
              	; and extracts the command line from it if so or from the user's console
              	;
DA83:         	REDBUF:
DA83: 3AE2D8  		LD	A,(RNGSUB)	;SUBMIT FILE CURRENTLY IN EXECUTION?
DA86: B7      		OR	A		;0=NO
DA87: 2851    		JR	Z,RB1		;GET LINE FROM CONSOLE IF NOT
DA89: 1177D8  		LD	DE,SUBFCB	;OPEN $$$.SUB
DA8C: CD3EDA  		CALL	OPEN
DA8F: 2849    		JR	Z,RB1		;ERASE $$$.SUB IF END OF FILE AND GET CMND
DA91: 3A86D8  		LD	A,(SUBFRC)	;GET VALUE OF LAST RECORD IN FILE
DA94: 1177D8  	REDBUF0:LD	DE,SUBFCB
DA97: 3D      		DEC	A		;PT TO NEXT TO LAST RECORD
DA98: 3297D8  		LD	(SUBFCR),A	;SAVE NEW VALUE OF LAST RECORD IN $$$.SUB
DA9B: F5      		PUSH	AF
DA9C: CD01DA  		CALL	READ		;DE=SUBFCB
DA9F: C1      		POP	BC
DAA0: 2038    		JR	NZ,RB1		;ABORT $$$.SUB IF ERROR IN READING LAST REC
DAA2: 218000  		LD	HL,TBUFF
DAA5: AF      		XOR	A
DAA6: BE      		CP	(HL)
DAA7: 78      		LD	A,B
DAA8: 28EA    		JR	Z,REDBUF0
DAAA: 1104D8  		LD	DE,CBUFF 	;COPY LAST RECORD (NEXT SUBMIT CMND) TO CBUFF FROM TBUFF
DAAD: E5      		PUSH	HL
DAAE: 015000  		LD	BC,BUFLEN	;NUMBER OF BYTES
DAB1: EDB0    		LDIR
DAB3: E1      		POP	HL
DAB4: 71      		LD	(HL),C
DAB5: 2197D8  		LD	HL,SUBFCR
DAB8: 35      		DEC	(HL)
DAB9: 1177D8  		LD	DE,SUBFCB	
DABC: D5      		PUSH	DE
DABD: 0E15    		LD	C,15H
DABF: CD0500  		CALL	BDOS		; SCRATCH OFF COMMAND
DAC2: D1      		POP	DE
DAC3: CD45DA  		CALL	CLOSE		;CLOSE $$$.SUB
              	;	JR	Z,RB1		;ABORT $$$.SUB IF ERROR (PROBABLY NOT GOING TO HIT THIS ONE)
DAC6: 3E24    		LD	A,SPRMPT	;PRINT SUBMIT PROMPT
DAC8: CDA8D9  		CALL	CONOUT
DACB: 2105D8  		LD	HL,CIBUFF	;PRINT COMMAND LINE FROM $$$.SUB
DACE: CD17DA  		CALL	PRIN1
DAD1: CD06DB  		CALL	BREAK		;CHECK FOR ABORT (ANY CHAR)
              	;
              		IF	CLEVEL3		;IF THIRD COMMAND LEVEL IS PERMITTED
DAD4: C8      		RET	Z		;IF <NULL> (NO ABORT), RETURN TO CALLER AND RUN
              		ENDIF
              	;
              		IF	CLEVEL3	;IF THIRD COMMAND LEVEL IS NOT PERMITTED
              	        ELSE
              		JR	Z,CNVBUF	;IF <NULL> (NO ABORT), CAPITALIZE COMMAND
              		ENDIF
              	;
DAD5: CD54DA  		CALL	SUBKIL		;KILL $$$.SUB IF ABORT
DAD8: 1857    		JR	RESTTMP		;RESTART CPR
              	;
              	; INPUT COMMAND LINE FROM USER CONSOLE
              	;
DADA:         	RB1:
DADA: CD54DA  		CALL	SUBKIL		;ERASE $$$.SUB IF PRESENT
DADD: CD6EDA  		CALL	SETUD		;SET USER AND DISK
DAE0: 3E3E    		LD	A,CPRMPT	;PRINT PROMPT
DAE2: CDA8D9  		CALL	CONOUT
DAE5: 0E0A    		LD	C,0AH		;READ COMMAND LINE FROM USER
DAE7: 1103D8  		LD	DE,MBUFF
DAEA: CD0500  		CALL	BDOS
              	;
              		IF	CLEVEL3		;IF THIRD COMMAND LEVEL IS PERMITTED
DAED: C37DDA  		JP	SETU0D		;SET CURRENT DISK NUMBER IN LOWER PARAMS
              		ENDIF
              	;
              		IF	CLEVEL3	;IF THIRD COMMAND LEVEL IS NOT PERMITTED
              	        ELSE
              		CALL	SETU0D		;SET CURRENT DISK NUMBER IF LOWER PARAMS
              					; AND FALL THRU TO CNVBUF
              		ENDIF
              	;
              	; CAPITALIZE STRING (ENDING IN 0) IN CBUFF AND SET PTR FOR PARSING
              	;
DAF0:         	CNVBUF:
DAF0: 2104D8  		LD	HL,CBUFF 	;PT TO USER'S COMMAND
DAF3: 46      		LD	B,(HL)		;CHAR COUNT IN B
DAF4: 04      		INC	B		;ADD 1 IN CASE OF ZERO
DAF5:         	CB1:
DAF5: 23      		INC	HL		;PT TO 1ST VALID CHAR
DAF6: 7E      		LD	A,(HL)		;CAPITALIZE COMMAND CHAR
DAF7: CDBAD9  		CALL	UCASE
DAFA: 77      		LD	(HL),A
DAFB: 10F8    		DJNZ	CB1		;CONTINUE TO END OF COMMAND LINE
DAFD:         	CB2:
DAFD: 3600    		LD	(HL),0		;STORE ENDING <NULL>
DAFF: 2105D8  		LD	HL,CIBUFF	;SET COMMAND LINE PTR TO 1ST CHAR
DB02: 2256D8  		LD	(CIBPTR),HL
DB05: C9      		RET
              	;
              	; CHECK FOR ANY CHAR FROM USER CONSOLE;RET W/ZERO SET IF NONE
              	;
DB06:         	BREAK:
DB06: D5      		PUSH	DE		;SAVE DE
DB07: 0E0B    		LD	C,11		;CSTS CHECK
DB09: CD03DA  		CALL	BDOSB
DB0C: C4B5D9  		CALL	NZ,CONIN	;GET INPUT CHAR
DB0F:         	BRKBK:
DB0F: D1      		POP	DE
DB10: C9      		RET
              	;
              	; GET THE REQUESTED USER NUMBER FROM THE COMMAND LINE AND VALIDATE IT.
              	;
DB11:         	USRNUM:		
DB11: CD63DB  		CALL	NUMBER
              	;
              		IF	USRMAX
              		LD	HL,USRMAX 	;PT TO MAXUSR + 1
              		CP	(HL)		;NEW VALUE ALLOWED?
              		ELSE
DB14: FE14    		CP	MAXUSR+1 	;NEW VALUE ALLOWED?
              		ENDIF			;USRMAX
              	;
DB16: D8      		RET	C		;RETURN TO CALLER IF SO,
              					; ELSE FLAG AS ERROR
              	;
              	; INVALID COMMAND -- PRINT IT
              	;
DB17:         	ERROR:
DB17: CDA1D9  		CALL	CRLF		;NEW LINE
DB1A: 2A58D8  		LD	HL,(CIPTR)	;PT TO BEGINNING OF COMMAND LINE
DB1D:         	ERR2:
DB1D: 7E      		LD	A,(HL)		;GET CHAR
DB1E: FE21    		CP	' '+1		;SIMPLE '?' IF <SP> OR LESS
DB20: 3808    		JR	C,ERR1
DB22: E5      		PUSH	HL		;SAVE PTR TO ERROR COMMAND CHAR
DB23: CDA8D9  		CALL	CONOUT		;PRINT COMMAND CHAR
DB26: E1      		POP	HL		;GET PTR
DB27: 23      		INC	HL		;PT TO NEXT
DB28: 18F3    		JR	ERR2		;CONTINUE
DB2A:         	ERR1:
DB2A: CD0FDA  		CALL	PRINT		;PRINT '?'
DB2D: BF      		DEFB	'?'+80H
DB2E: CD54DA  		CALL	SUBKIL		;TERMINATE ACTIVE $$$.SUB IF ANY
DB31: C3F2D8  	RESTTMP:JP	RESTRT		;RESTART CPR
              	;
              	; CHECK TO SEE IF DE PTS TO DELIMITER; IF SO, RET W/ZERO FLAG SET
              	;
DB34:         	SDELM:
DB34: 1A      		LD	A,(DE)
DB35: B7      		OR	A		;0=DELIMITER
DB36: C8      		RET	Z
DB37: FE20    		CP	' '		;ERROR IF < <SP>
DB39: 38DC    		JR	C,ERROR
DB3B: C8      		RET	Z			;<SP>=DELIMITER
DB3C: FE3D    		CP	'='		;'='=DELIMITER
DB3E: C8      		RET	Z
DB3F: FE5F    		CP	5FH		;UNDERSCORE=DELIMITER
DB41: C8      		RET	Z
DB42: FE2E    		CP	'.'		;'.'=DELIMITER
DB44: C8      		RET	Z
DB45: FE3A    		CP	':'		;':'=DELIMITER
DB47: C8      		RET	Z
DB48: FE3B    		CP	';'		;';'=DELIMITER
DB4A: C8      		RET	Z
DB4B: FE3C    		CP	'<'		;'<'=DELIMITER
DB4D: C8      		RET	Z
DB4E: FE3E    		CP	'>'		;'>'=DELIMITER
DB50: C9      		RET
              	;
              	; ADVANCE INPUT PTR TO FIRST NON-BLANK AND FALL THROUGH TO SBLANK
              	;
DB51:         	ADVAN:
DB51: ED5B56D8		LD	DE,(CIBPTR)
              	;
              	; SKIP STRING PTED TO BY DE (STRING ENDS IN 0) UNTIL END OF STRING
              	;   OR NON-BLANK ENCOUNTERED (BEGINNING OF TOKEN)
              	;
DB55:         	SBLANK:
DB55: 1A      		LD	A,(DE)
DB56: B7      		OR	A
DB57: C8      		RET	Z
DB58: FE20    		CP	' '
DB5A: C0      		RET	NZ
DB5B: 13      		INC	DE
DB5C: 18F7    		JR	SBLANK
              	;
              	; ADD A TO HL (HL=HL+A)
              	;
DB5E:         	ADDAH:
DB5E: 85      		ADD	A,L
DB5F: 6F      		LD	L,A
DB60: D0      		RET	NC
DB61: 24      		INC	H
DB62: C9      		RET
              	;
              	; EXTRACT DECIMAL NUMBER FROM COMMAND LINE
              	;   RETURN WITH VALUE IN REG A;ALL REGISTERS MAY BE AFFECTED
              	;
DB63:         	NUMBER:
DB63: CD08DC  		CALL	SCANER		;PARSE NUMBER AND PLACE IN FCBFN
DB66: 21A3D8  		LD	HL,FCBFN+10 	;PT TO END OF TOKEN FOR CONVERSION
DB69: 060B    		LD	B,11		;11 CHARS MAX
              	;
              	; CHECK FOR SUFFIX FOR HEXADECIMAL NUMBER
              	;
DB6B:         	NUMS:
DB6B: 7E      		LD	A,(HL)		;GET CHARS FROM END, SEARCHING FOR SUFFIX
DB6C: 2B      		DEC	HL		;BACK UP
DB6D: FE20    		CP	' '		;SPACE?
DB6F: 2004    		JR	NZ,NUMS1	;CHECK FOR SUFFIX
DB71: 10F8    		DJNZ	NUMS		;COUNT DOWN
DB73: 1804    		JR	NUM0		;BY DEFAULT, PROCESS
DB75:         	NUMS1:
DB75: FE48    		CP	NUMBASE		;CHECK AGAINST BASE SWITCH FLAG
DB77: 282B    		JR	Z,HNUM0
              	;
              	; PROCESS DECIMAL NUMBER
              	;
DB79:         	NUM0:
DB79: 2199D8  		LD	HL,FCBFN	;PT TO BEGINNING OF TOKEN
DB7C: 010011  		LD	BC,1100H	;C=ACCUMULATED VALUE, B=CHAR COUNT
              					; (C=0, B=11)
DB7F:         	NUM1:
DB7F: 7E      		LD	A,(HL)		;GET CHAR
DB80: FE20    		CP	' '		;DONE IF <SP>
DB82: 2818    		JR	Z,NUM2
DB84: 23      		INC	HL		;PT TO NEXT CHAR
DB85: D630    		SUB	'0'		;CONVERT TO BINARY (ASCII 0-9 TO BINARY)
DB87: FE0A    		CP	10		;ERROR IF >= 10
DB89: 3013    		JR	NC,NUMERR
DB8B: 57      		LD	D,A		;DIGIT IN D
DB8C: 79      		LD	A,C		;NEW VALUE = OLD VALUE * 10
DB8D: 07      		RLCA
DB8E: 07      		RLCA
DB8F: 07      		RLCA
DB90: 81      		ADD	A,C		;CHECK FOR RANGE ERROR
DB91: 380B    		JR	C,NUMERR
DB93: 81      		ADD	A,C		;CHECK FOR RANGE ERROR
DB94: 3808    		JR	C,NUMERR
DB96: 82      		ADD	A,D		;NEW VALUE = OLD VALUE * 10 + DIGIT
DB97: 3805    		JR	C,NUMERR	;CHECK FOR RANGE ERROR
DB99: 4F      		LD	C,A		;SET NEW VALUE
DB9A: 10E3    		DJNZ	NUM1		;COUNT DOWN
              	;
              	; RETURN FROM NUMBER
              	;
DB9C:         	NUM2:
DB9C: 79      		LD	A,C		;GET ACCUMULATED VALUE
DB9D: C9      		RET
              	;
              	; NUMBER ERROR ROUTINE FOR SPACE CONSERVATION
              	;
DB9E:         	NUMERR:
DB9E: C317DB  		JP	ERROR		;USE ERROR ROUTINE - THIS IS RELATIVE PT
              	;
              	; EXTRACT HEXADECIMAL NUMBER FROM COMMAND LINE
              	;   RETURN WITH VALUE IN REG A; ALL REGISTERS MAY BE AFFECTED
              	;
DBA1:         	HEXNUM:
DBA1: CD08DC  		CALL	SCANER		;PARSE NUMBER AND PLACE IN FCBFN
DBA4:         	HNUM0:
DBA4: 2199D8  		LD	HL,FCBFN	;PT TO TOKEN FOR CONVERSION
DBA7: 110000  		LD	DE,0		;DE=ACCUMULATED VALUE
DBAA: 060B    		LD	B,11		;B=CHAR COUNT
DBAC:         	HNUM1:
DBAC: 7E      		LD	A,(HL)		;GET CHAR
DBAD: FE20    		CP	' '		;DONE?
DBAF: 282D    		JR	Z,HNUM3		;RETURN IF SO
DBB1: FE48    		CP	NUMBASE		;DONE IF NUMBASE SUFFIX
DBB3: 2829    		JR	Z,HNUM3
DBB5: D630    		SUB	'0'		;CONVERT TO BINARY
DBB7: 38E5    		JR	C,NUMERR	;RETURN AND DONE IF ERROR
DBB9: FE0A    		CP	10		;0-9?
DBBB: 3806    		JR	C,HNUM2
DBBD: D607    		SUB	7		;A-F?
DBBF: FE10    		CP	10H		;ERROR?
DBC1: 30DB    		JR	NC,NUMERR
DBC3:         	HNUM2:
DBC3: 23      		INC	HL		;PT TO NEXT CHAR
DBC4: 4F      		LD	C,A		;DIGIT IN C
DBC5: 7A      		LD	A,D		;GET ACCUMULATED VALUE
DBC6: 07      		RLCA			;EXCHANGE NYBBLES
DBC7: 07      		RLCA
DBC8: 07      		RLCA
DBC9: 07      		RLCA
DBCA: E6F0    		AND	0F0H		;MASK OUT LOW NYBBLE
DBCC: 57      		LD	D,A
DBCD: 7B      		LD	A,E		;SWITCH LOW-ORDER NYBBLES
DBCE: 07      		RLCA
DBCF: 07      		RLCA
DBD0: 07      		RLCA
DBD1: 07      		RLCA
DBD2: 5F      		LD	E,A		;HIGH NYBBLE OF E=NEW HIGH OF E,
              					;  LOW NYBBLE OF E=NEW LOW OF D
DBD3: E60F    		AND	0FH		;GET NEW LOW OF D
DBD5: B2      		OR	D		;MASK IN HIGH OF D
DBD6: 57      		LD	D,A		;NEW HIGH BYTE IN D
DBD7: 7B      		LD	A,E
DBD8: E6F0    		AND	0F0H		;MASK OUT LOW OF E
DBDA: B1      		OR	C		;MASK IN NEW LOW
DBDB: 5F      		LD	E,A		;NEW LOW BYTE IN E
DBDC: 10CE    		DJNZ	HNUM1		;COUNT DOWN
              	;
              	; RETURN FROM HEXNUM
              	;
DBDE:         	HNUM3:
DBDE: EB      		EX	DE,HL		;RETURNED VALUE IN HL
DBDF: 7D      		LD	A,L		;LOW-ORDER BYTE IN A
DBE0: C9      		RET
              	;
              	; PT TO DIRECTORY ENTRY IN TBUFF WHOSE OFFSET IS SPECIFIED BY A AND C
              	;
DBE1:         	DIRPTR:
DBE1: 218000  		LD	HL,TBUFF 	;PT TO TEMP BUFFER
DBE4: 81      		ADD	A,C		;PT TO 1ST BYTE OF DIR ENTRY
DBE5: CD5EDB  		CALL	ADDAH		;PT TO DESIRED BYTE IN DIR ENTRY
DBE8: 7E      		LD	A,(HL)		;GET DESIRED BYTE
DBE9: C9      		RET
              	;
              	; CHECK FOR SPECIFIED DRIVE AND LOG IT IN IF NOT DEFAULT
              	;
DBEA:         	SLOGIN:
DBEA: AF      		XOR	A		;SET FCBDN FOR DEFAULT DRIVE
DBEB: 3298D8  		LD	(FCBDN),A
DBEE: CDFEDB  		CALL	COMLOG		;CHECK DRIVE
DBF1: C8      		RET	Z
DBF2: 1807    		JR	DLOG5		;DO LOGIN OTHERWISE
              	;
              	; CHECK FOR SPECIFIED DRIVE AND LOG IN DEFAULT DRIVE IF SPECIFIED<>DEFAULT
              	;
DBF4:         	DLOGIN:
DBF4: CDFEDB  		CALL	COMLOG		;CHECK DRIVE
DBF7: C8      		RET	Z		;ABORT IF SAME
DBF8: 3A7EDA  		LD	A,(TDRIVE)	;LOG IN DEFAULT DRIVE
              	;
DBFB: C332DA  	DLOG5:	JP	LOGIN
              	;
              	; ROUTINE COMMON TO BOTH LOGIN ROUTINES; ON EXIT, Z SET MEANS ABORT
              	;
DBFE:         	COMLOG:
DBFF:         	TEMPDR	EQU	$+1		;POINTER FOR IN-THE-CODE MODIFICATION
DBFE: 3E00    		LD	A,0		;2ND BYTE (IMMEDIATE ARG) IS TEMPDR
DC00: B7      		OR	A		;0=NO
DC01: C8      		RET	Z
DC02: 3D      		DEC	A		;COMPARE IT AGAINST DEFAULT
DC03: 217EDA  		LD	HL,TDRIVE
DC06: BE      		CP	(HL)
DC07: C9      		RET			;ABORT IF SAME
              	;
              	; EXTRACT TOKEN FROM COMMAND LINE AND PLACE IT INTO FCBDN;
              	;   FORMAT FCBDN FCB IF TOKEN RESEMBLES FILE NAME AND TYPE (FILENAME.TYP);
              	;   ON INPUT, CIBPTR PTS TO CHAR AT WHICH TO START SCAN;
              	;   ON OUTPUT, CIBPTR PTS TO CHAR AT WHICH TO CONTINUE AND ZERO FLAG IS RESET
              	;     IF '?' IS IN TOKEN
              	;
              	; ENTRY POINTS:
              	;	SCANER - LOAD TOKEN INTO FIRST FCB
              	;	SCANX - LOAD TOKEN INTO FCB PTED TO BY HL
              	;
DC08:         	SCANER:
DC08: 2198D8  		LD	HL,FCBDN 	;POINT TO FCBDN
DC0B:         	SCANX:
DC0B: AF      		XOR	A		;SET TEMPORRY DRIVE NUMBER TO DEFAULT
DC0C: 32FFDB  		LD	(TEMPDR),A
DC0F: CD51DB  		CALL	ADVAN		;SKIP TO NON-BLANK OR END OF LINE
DC12: ED5358D8		LD	(CIPTR),DE	;SET PTR TO NON-BLANK OR END OF LINE
DC16: 1A      		LD	A,(DE)		;END OF LINE?
DC17: B7      		OR	A		;0=YES
DC18: 280A    		JR	Z,SCAN2
DC1A: DE40    		SBC	A,'A'-1		;CONVERT POSSIBLE DRIVE SPEC TO NUMBER
DC1C: 47      		LD	B,A		;STORE NUMBER (A:=0, B:=1, ETC) IN B
DC1D: 13      		INC	DE		;PT TO NEXT CHAR
DC1E: 1A      		LD	A,(DE)		;SEE IF IT IS A COLON (:)
DC1F: FE3A    		CP	':'
DC21: 2807    		JR	Z,SCAN3		;YES, WE HAVE A DRIVE SPEC
DC23: 1B      		DEC	DE		;NO, BACK UP PTR TO FIRST NON-BLANK CHAR
DC24:         	SCAN2:
DC24: 3A7EDA  		LD	A,(TDRIVE)	;SET 1ST BYTE OF FCBDN AS DEFAULT DRIVE
DC27: 77      		LD	(HL),A
DC28: 1806    		JR	SCAN4
DC2A:         	SCAN3:
DC2A: 78      		LD	A,B		;WE HAVE A DRIVE SPEC
DC2B: 32FFDB  		LD	(TEMPDR),A	;SET TEMPORRY DRIVE
DC2E: 70      		LD	(HL),B		;SET 1ST BYTE OF FCBDN AS SPECIFIED DRIVE
DC2F: 13      		INC	DE		;PT TO BYTE AFTER ':'
              	;
              	; EXTRACT FILENAME FROM POSSIBLE FILENAME.TYP
              	;
DC30:         	SCAN4:
DC30: AF      		XOR	A		;A=0
DC31: 32BBD8  		LD	(QMCNT),A	;INIT COUNT OF NUMBER OF QUESTION MARKS IN FCB
DC34: 0608    		LD	B,8		;MAX OF 8 CHARS IN FILE NAME
DC36: CD58DC  		CALL	SCANF		;FILL FCB FILE NAME
              	;
              	; EXTRACT FILE TYPE FROM POSSIBLE FILENAME.TYP
              	;
DC39: 0603    		LD	B,3		;PREPARE TO EXTRACT TYPE
DC3B: FE2E    		CP	'.'		;IF (DE) DELIMITER IS A '.', WE HAVE A TYPE
DC3D: 2006    		JR	NZ,SCAN15	;FILL FILE TYPE BYTES WITH <SP>
DC3F: 13      		INC	DE		;PT TO CHAR IN COMMAND LINE AFTER '.'
DC40: CD58DC  		CALL	SCANF		;FILL FCB FILE TYPE
DC43: 1803    		JR	SCAN16		;SKIP TO NEXT PROCESSING
DC45:         	SCAN15:
DC45: CD79DC  		CALL	SCANF4		;SPACE FILL
              	;
              	; FILL IN EX, S1, S2, AND RC WITH ZEROES
              	;
DC48:         	SCAN16:
DC48: 0604    		LD	B,4		;4 BYTES
DC4A:         	SCAN17:
DC4A: 23      		INC	HL		;PT TO NEXT BYTE IN FCBDN
DC4B: 3600    		LD	(HL),0
DC4D: 10FB    		DJNZ	SCAN17
              	;
              	; SCAN COMPLETE -- DE PTS TO DELIMITER BYTE AFTER TOKEN
              	;
DC4F: ED5356D8		LD	(CIBPTR),DE
              	;
              	; SET ZERO FLAG TO INDICATE PRESENCE OF '?' IN FILENAME.TYP
              	;
DC53: 3ABBD8  		LD	A,(QMCNT)	;GET NUMBER OF QUESTION MARKS
DC56: B7      		OR	A		;SET ZERO FLAG TO INDICATE ANY '?'
DC57: C9      		RET
              	;
              	;  SCANF -- SCAN TOKEN PTED TO BY DE FOR A MAX OF B BYTES; PLACE IT INTO
              	;    FILE NAME FIELD PTED TO BY HL; EXPAND AND INTERPRET WILD CARDS OF
              	;    '*' AND '?'; ON EXIT, DE PTS TO TERMINATING DELIMITER
              	;
DC58:         	SCANF:
DC58: CD34DB  		CALL	SDELM		;DONE IF DELIMITER ENCOUNTERED - <SP> FILL
DC5B: 281C    		JR	Z,SCANF4
DC5D: 23      		INC	HL		;PT TO NEXT BYTE IN FCBDN
DC5E: FE2A    		CP	'*'		;IS (DE) A WILD CARD?
DC60: 2007    		JR	NZ,SCANF1	;CONTINUE IF NOT
DC62: 363F    		LD	(HL),'?'	;PLACE '?' IN FCBDN AND DON'T ADVANCE DE IF SO
DC64: CD7FDC  		CALL	SCQ		;SCANNER COUNT QUESTION MARKS
DC67: 1807    		JR	SCANF2
DC69:         	SCANF1:
DC69: 77      		LD	(HL),A		;STORE FILENAME CHAR IN FCBDN
DC6A: 13      		INC	DE		;PT TO NEXT CHAR IN COMMAND LINE
DC6B: FE3F    		CP	'?'		;CHECK FOR QUESTION MARK (WILD)
DC6D: CC7FDC  		CALL	Z,SCQ		;SCANNER COUNT QUESTION MARKS
DC70:         	SCANF2:
DC70: 10E6    		DJNZ	SCANF		;DECREMENT CHAR COUNT UNTIL 8 ELAPSED
DC72:         	SCANF3:
DC72: CD34DB  		CALL	SDELM		;8 CHARS OR MORE - SKIP UNTIL DELIMITER
DC75: C8      		RET	Z		;ZERO FLAG SET IF DELIMITER FOUND
DC76: 13      		INC	DE		;PT TO NEXT CHAR IN COMMAND LINE
DC77: 18F9    		JR	SCANF3
              	;
              	;  FILL MEMORY POINTED TO BY HL WITH SPACES FOR B BYTES
              	;
DC79:         	SCANF4:
DC79: 23      		INC	HL		;PT TO NEXT BYTE IN FCBDN
DC7A: 3620    		LD	(HL),' '	;FILL FILENAME PART WITH <SP>
DC7C: 10FB    		DJNZ	SCANF4
DC7E: C9      		RET
              	;
              	;  INCREMENT QUESTION MARK COUNT FOR SCANNER
              	;    THIS ROUTINE INCREMENTS THE COUNT OF THE NUMBER OF QUESTION MARKS IN
              	;    THE CURRENT FCB ENTRY
              	;
DC7F:         	SCQ:
DC7F: 3ABBD8  		LD	A,(QMCNT)	;GET COUNT
DC82: 3C      		INC	A		;INCREMENT
DC83: 32BBD8  		LD	(QMCNT),A	;PUT COUNT
DC86: C9      		RET
              	;
              	; CMDTBL (COMMAND TABLE) SCANNER
              	;   ON RETURN, HL PTS TO ADDRESS OF COMMAND IF CPR-RESIDENT
              	;   ON RETURN, ZERO FLAG SET MEANS CPR-RESIDENT COMMAND
              	;
DC87:         	CMDSER:
DC87: 215FD9  		LD	HL,CMDTBL	;PT TO COMMAND TABLE
              	;
              		IF	SECURE
              		LD	C,NRCMDS
              		LD	A,(WHEEL)	;SEE IF NON-RESTRCTED
              		CP	RESTRCT
              		JR	Z,CMS1		;PASS IF RESTRCTED
              		ENDIF			;SECURE
              	;
DC8A: 0E0B    		LD	C,NCMNDS	;SET COMMAND COUNTER
DC8C:         	CMS1:
DC8C: 1199D8  		LD	DE,FCBFN 	;PT TO STORED COMMAND NAME
DC8F: 0604    		LD	B,NCHARS	;NUMBER OF CHARS/COMMAND (8 MAX)
DC91:         	CMS2:
DC91: 1A      		LD	A,(DE)		;COMPARE AGAINST TABLE ENTRY
DC92: BE      		CP	(HL)
DC93: 200A    		JR	NZ,CMS3		;NO MATCH
DC95: 13      		INC	DE		;PT TO NEXT CHAR
DC96: 23      		INC	HL
DC97: 10F8    		DJNZ	CMS2		;COUNT DOWN
DC99: 1A      		LD	A,(DE)		;NEXT CHAR IN INPUT COMMAND MUST BE <SP>
DC9A: FE20    		CP	' '
DC9C: 2004    		JR	NZ,CMS4
DC9E: C9      		RET			;COMMAND IS CPR-RESIDENT (ZERO FLAG SET)
DC9F:         	CMS3:
DC9F: 23      		INC	HL		;SKIP TO NEXT COMMAND TABLE ENTRY
DCA0: 10FD    		DJNZ	CMS3
DCA2:         	CMS4:
DCA2: 23      		INC	HL		;SKIP ADDRESS
DCA3: 23      		INC	HL
DCA4: 0D      		DEC	C		;DECREMENT TABLE ENTRY NUMBER
DCA5: 20E5    		JR	NZ,CMS1
DCA7: 0C      		INC	C		;CLEAR ZERO FLAG
DCA8: C9      		RET			;COMMAND IS DISK-RESIDENT (ZERO FLAG CLEAR)
              	;
              	;**** Section 5 ****
              	; CPR-Resident Commands
              	;
              	;
              	;Section 5A
              	;Command: DIR
              	;Function:  To display a directory of the files on disk
              	;Forms:
              	;	DIR <afn>	Displays the DIR files
              	;	DIR <afn> S	Displays the SYS files
              	;	DIR <afn> A	Display both DIR and SYS files
              	;
              		IF	CPRDIR
              	;
DCA9:         	DIR:
DCA9: 3E80    		LD	A,80H		;SET SYSTEM BIT EXAMINATION
DCAB: F5      		PUSH	AF
DCAC: CD08DC  		CALL	SCANER		;EXTRACT POSSIBLE D:FILENAME.TYP TOKEN
DCAF: CDEADB  		CALL	SLOGIN		;LOG IN DRIVE IF NECESSARY
DCB2: 2199D8  		LD	HL,FCBFN 	;MAKE FCB WILD (ALL '?') IF NO FILENAME.TYP
DCB5: 7E      		LD	A,(HL)		;GET FIRST CHAR OF FILENAME.TYP
DCB6: FE20    		CP	' '		;IF <SP>, ALL WILD
DCB8: CC52DD  		CALL	Z,FILLQ
DCBB: CD51DB  		CALL	ADVAN		;LOOK AT NEXT INPUT CHAR
DCBE: 0600    		LD	B,0		;SYS TOKEN DEFAULT
DCC0: 2816    		JR	Z,DIR2		;JUMP; THERE ISN'T ONE
DCC2: FE41    		CP	SYSFLG		;SYSTEM FLAG SPECIFIER?
DCC4: 2806    		JR	Z,GOTSYS	;GOT SYSTEM SPECIFIER
DCC6: FE53    		CP	SOFLG		;SYS ONLY?
DCC8: 200E    		JR	NZ,DIR2
DCCA: 0680    		LD	B,80H		;FLAG SYS ONLY
DCCC:         	GOTSYS:
DCCC: 13      		INC	DE
DCCD: ED5356D8		LD	(CIBPTR),DE
DCD1: FE53    		CP	SOFLG		;SYS ONLY SPEC?
DCD3: 2803    		JR	Z,DIR2		;THEN LEAVE BIT SPEC UNCHAGNED
DCD5: F1      		POP	AF		;GET FLAG
DCD6: AF      		XOR	A		;SET NO SYSTEM BIT EXAMINATION
DCD7: F5      		PUSH	AF 
DCD8:         	DIR2:
DCD8: F1      		POP	AF		;GET FLAG
DCD9:         	DIR2A:
              					;DROP INTO DIRPR TO PRINT DIRECTORY
              					; THEN RESTART CPR
              		ENDIF			;CPRDIR
              	;
              	; DIRECTORY PRINT ROUTINE; ON ENTRY, MSB OF A IS 1 (80H) IF SYSTEM FILES
              	; EXCLUDED. THIS ROUTINE IS ALSO USED BY ERA.
              	;
DCD9:         	DIRPR:
DCD9: 57      		LD	D,A		;STORE SYSTEM FLAG IN D
DCDA: 1E00    		LD	E,0		;SET COLUMN COUNTER TO ZERO
DCDC: D5      		PUSH	DE		;SAVE COLUMN COUNTER (E) AND SYSTEM FLAG (D)
DCDD: 78      		LD	A,B		;SYS ONLY SPECIFIER
DCDE: 32F9DC  		LD	(SYSTST),A
DCE1: CD49DA  		CALL	SEARF		;SEARCH FOR SPECIFIED FILE (FIRST OCCURRANCE)
DCE4: CC54D9  		CALL	Z,PRNNF		;PRINT NO FILE MSG;REG A NOT CHANGED
              	;
              	; ENTRY SELECTION LOOP; ON ENTRY, A=OFFSET FROM SEARF OR SEARN
              	;
DCE7:         	DIR3:
DCE7: 2867    		JR	Z,DIR11		;DONE IF ZERO FLAG SET
DCE9: 3D      		DEC	A		;ADJUST TO RETURNED VALUE
DCEA: 0F      		RRCA			;CONVERT NUMBER TO OFFSET INTO TBUFF
DCEB: 0F      		RRCA
DCEC: 0F      		RRCA
DCED: E660    		AND	60H
DCEF: 4F      		LD	C,A		;OFFSET INTO TBUFF IN C (C=OFFSET TO ENTRY)
DCF0: 3E0A    		LD	A,10		;ADD 10 TO PT TO SYSTEM FILE ATTRIBUTE BIT
DCF2: CDE1DB  		CALL	DIRPTR
DCF5: D1      		POP	DE		;GET SYSTEM BIT MASK FROM D
DCF6: D5      		PUSH	DE
DCF7: A2      		AND	D		;MASK FOR SYSTEM BIT
DCF9:         	SYSTST	EQU	$+1		;POINTER TO IN-THE-CODE BUFFER SYSTST
DCF8: FE00    		CP	0
DCFA: 204A    		JR	NZ,DIR10
DCFC: D1      		POP	DE		;GET ENTRY COUNT (=<CR> COUNTER)
DCFD: 7B      		LD	A,E		;ADD 1 TO IT
DCFE: 1C      		INC	E
DCFF: D5      		PUSH	DE		;SAVE IT
              	;
              		IF	TWOCOL
              		AND	01H		;OUTPUT <CRLF> IF 2 ENTRIES PRINTED IN LINE
              		ENDIF			;TWOCOL
              	;
              		IF	TWOCOL
              	        ELSE
DD01:         	TWOPOK	EQU	$+1		;FOR APPLE PATCHING
DD00: E603    		AND	03H		;OUTPUT <CRLF> IF 4 ENTRIES PRINTED IN LINE
              		ENDIF			;NOT TWOCOL
              	;
DD02: F5      		PUSH	AF
DD03: 2005    		JR	NZ,DIR4
DD05: CDA1D9  		CALL	CRLF		;NEW LINE
DD08: 1808    		JR	DIR5
DD0A:         	DIR4:
DD0A: CD0FDA  		CALL	PRINT
              	;
              		IF	WIDE
DD0D: 2020    		DEFM	'  '		;2 SPACES
DD0F: 7C      		DEFB	FENCE		;THEN FENCE CHAR
DD10: 20A0    		DEFB	' ',' '+80H	;THEN 2 MORE SPACES
              	;	ENDIF
              	;
              	        ELSE
              		DEFB	' '		;SPACE
              		DEFB	FENCE		;THEN FENCE CHAR
              		DEFB	' '+80H		;THEN SPACE
              		ENDIF
              	;
DD12:         	DIR5:
DD12: 0601    		LD	B,01H		;PT TO 1ST BYTE OF FILE NAME
DD14:         	DIR6:
DD14: 78      		LD	A,B		;A=OFFSET
DD15: CDE1DB  		CALL	DIRPTR		;HL NOW PTS TO 1ST BYTE OF FILE NAME
DD18: E67F    		AND	7FH		;MASK OUT MSB
DD1A: FE20    		CP	' '		;NO FILE NAME?
DD1C: 2013    		JR	NZ,DIR8		;PRINT FILE NAME IF PRESENT
DD1E: F1      		POP	AF
DD1F: F5      		PUSH	AF
DD20: FE03    		CP	03H
DD22: 200B    		JR	NZ,DIR7
DD24: 3E09    		LD	A,09H		;PT TO 1ST BYTE OF FILE TYPE
DD26: CDE1DB  		CALL	DIRPTR		;HL NOW PTS TO 1ST BYTE OF FILE TYPE
DD29: E67F    		AND	7FH		;MASK OUT MSB
DD2B: FE20    		CP	' '		;NO FILE TYPE?
DD2D: 2816    		JR	Z,DIR9		;CONTINUE IF SO
DD2F:         	DIR7:
DD2F: 3E20    		LD	A,' '		;OUTPUT <SP>
DD31:         	DIR8:
DD31: CDA8D9  		CALL	CONOUT		;PRINT CHAR
DD34: 04      		INC	B		;INCR CHAR COUNT
DD35: 78      		LD	A,B
DD36: FE0C    		CP	12		;END OF FILENAME.TYP?
DD38: 300B    		JR	NC,DIR9		;CONTINUE IF SO
DD3A: FE09    		CP	09H		;END IF FILENAME ONLY?
DD3C: 20D6    		JR	NZ,DIR6		;PRINT TYP IF SO
DD3E: 3E2E    		LD	A,'.'		;PRINT DOT BETWEEN FILE NAME AND TYPE
DD40: CDA8D9  		CALL	CONOUT
DD43: 18CF    		JR	DIR6
DD45:         	DIR9:
DD45: F1      		POP	AF
DD46:         	DIR10:
DD46: CD06DB  		CALL	BREAK		;CHECK FOR ABORT
DD49: 2005    		JR	NZ,DIR11
DD4B: CD50DA  		CALL	SEARN		;SEARCH FOR NEXT FILE
DD4E: 1897    		JR	DIR3		;CONTINUE
DD50:         	DIR11:
DD50: D1      		POP	DE		;RESTORE STACK
DD51: C9      		RET
              	;
              	; FILL FCB @HL WITH '?'
              	;
DD52:         	FILLQ:
DD52: 060B    		LD	B,11		;NUMBER OF CHARS IN FN & FT
DD54:         	FQLP:
DD54: 363F    		LD	(HL),'?'	;STORE '?'
DD56: 23      		INC	HL
DD57: 10FB    		DJNZ	FQLP
DD59: C9      		RET
              	;
              	;Section 5B
              	;Command: ERA
              	;Function:  Erase files
              	;Forms:
              	;	ERA <afn>	Erase Specified files and print their names
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DD5A:         	ERA:
DD5A: CD08DC  		CALL	SCANER		;PARSE FILE SPECIFICATION
DD5D: FE0B    		CP	11		;ALL WILD (ALL FILES = 11 '?')?
DD5F: 2012    		JR	NZ,ERA1		;IF NOT, THEN DO ERASES
DD61: CD0ADA  		CALL	PRINTC
DD64: 416C6C  		DEFM	'All'
DD67: BF      		DEFB	'?'+80H
DD68: CDB5D9  		CALL	CONIN		;GET REPLY
DD6B: FE59    		CP	'Y'		;YES?
DD6D:         	ERARJ:
DD6D: C2F2D8  		JP	NZ,RESTRT	;RESTART CPR IF NOT
DD70: CDA1D9  		CALL	CRLF		;NEW LINE
DD73:         	ERA1:
DD73: CDEADB  		CALL	SLOGIN		;LOG IN SELECTED DISK IF ANY
DD76: AF      		XOR	A		;PRINT ALL FILES (EXAMINE SYSTEM BIT)
DD77: 47      		LD	B,A		;NO SYS-ONLY OPT TO DIRPR
DD78: CDD9DC  		CALL	DIRPR		;PRINT DIRECTORY OF ERASED FILES
              	;
              		IF	EPRMPT
              	;
              	;  QUERY USER AFTER FILES ARE SEEN, AND GIVE ONE LAST CHANCE TO BACK OUT
              	;
              		LD	A,E		;HOW MANY FILES DISPLAYED?
              		OR	A
              		JP	Z,RESTRT	;IF NONE, DON'T ASK OR DELETE
              		CALL	PRINTC		;PROMPT
              		DEFM	'Ok'
              		DEFB	'?'+80H
              		CALL	CONIN		;GET REPLY FOLDED
              		CP	'Y'		;YES?
              		JR	NZ,ERARJ	;GET OUT IF NOT
              		ENDIF			;EPRMPT
              	;
DD7B: 1198D8  		LD	DE,FCBDN 	;DELETE FILE(S) SPECIFIED
DD7E: C35FDA  		JP	DELETE		;RESTART CPR AFTER DELETE
              	;
              		ENDIF			;RAS
              	;
              	;Section 5C
              	;Command: LIST
              	;Function:  Print out specified file on the LST: Device
              	;Forms:
              	;	LIST <ufn>	Print file (NO Paging)
              	;
              		IF	CPRLST
DD81:         	LIST:
DD81: 3EFF    		LD	A,0FFH		;TURN ON PRINTER FLAG
DD83: 1801    		JR	TYPE0
              		ENDIF			;CPRLST
              	;
              	;Section 5D
              	;Command: TYPE
              	;Function:  Print out specified file on the CON: Device
              	;Forms:
              	;	TYPE <ufn>	Print file
              	;	TYPE <ufn> P	Print file with paging flag	
              	;
              		IF	CPRTYP
DD85:         	TYPE:
              		ENDIF			;CPRTYP
              	;
              		IF	CPRTYP AND CPRLST
DD85: AF      		XOR	A		;TURN OFF PRINTER FLAG
              	;
              	; ENTRY POINT FOR CPR LIST FUNCTION (LIST)
              	;
DD86:         	TYPE0:
DD86: 32D2D9  		LD	(PRFLG),A	;SET FLAG
              		ENDIF			;CPRTYP AND CPRLST
              	;
              		IF	CPRTYP
DD89: CD08DC  		CALL	SCANER		;EXTRACT FILENAME.TYP TOKEN
DD8C: C217DB  		JP	NZ,ERROR	;ERROR IF ANY QUESTION MARKS
DD8F: CD51DB  		CALL	ADVAN		;GET PGDFLG IF IT'S THERE
DD92: 32EFD9  		LD	(PGFLG),A	;SAVE IT AS A FLAG
DD95: 2805    		JR	Z,NOSLAS	;JUMP IF INPUT ENDED
DD97: 13      		INC	DE		;PUT NEW BUF POINTER
DD98: EB      		EX	DE,HL
DD99: 2256D8  		LD	(CIBPTR),HL
DD9C:         	NOSLAS:
DD9C: CDEADB  		CALL	SLOGIN		;LOG IN SELECTED DISK IF ANY
DD9F: CD37DA  		CALL	OPENF		;OPEN SELECTED FILE
DDA2: CA0FDE  		JP	Z,TYPE4		;ABORT IF ERROR
DDA5: CDA1D9  		CALL	CRLF		;NEW LINE
DDA8: 3E17    		LD	A,NLINES-1	;SET LINE COUNT
DDAA: 32B9D8  		LD	(PAGCNT),A
DDAD: 21BAD8  		LD	HL,CHRCNT	;SET CHAR POSITION/COUNT
DDB0: 36FF    		LD	(HL),0FFH	;EMPTY LINE
DDB2: 0600    		LD	B,0		;SET TAB CHAR COUNTER
DDB4:         	TYPE1:
DDB4: 21BAD8  		LD	HL,CHRCNT	;PT TO CHAR POSITION/COUNT
DDB7: 7E      		LD	A,(HL)		;END OF BUFFER?
DDB8: FE80    		CP	80H
DDBA: 3809    		JR	C,TYPE2
DDBC: E5      		PUSH	HL		;READ NEXT BLOCK
DDBD: CDFED9  		CALL	READF
DDC0: E1      		POP	HL
DDC1: 204A    		JR	NZ,TYPE3	;ERROR?
DDC3: AF      		XOR	A		;RESET COUNT
DDC4: 77      		LD	(HL),A
DDC5:         	TYPE2:
DDC5: 34      		INC	(HL)		;INCREMENT CHAR COUNT
DDC6: 218000  		LD	HL,TBUFF 	;PT TO BUFFER
DDC9: CD5EDB  		CALL	ADDAH		;COMPUTE ADDRESS OF NEXT CHAR FROM OFFSET
DDCC: 7E      		LD	A,(HL)		;GET NEXT CHAR
DDCD: E67F    		AND	7FH		;MASK OUT MSB
DDCF: FE1A    		CP	1AH		;END OF FILE (^Z)?
DDD1: C8      		RET	Z		;RESTART CPR IF SO
              	;
              	; OUTPUT CHAR TO CON: OR LST: DEVICE WITH TABULATION
              	;
              		IF	WSTYPE		;WORDSTAR HYPHEN CHECK
DDD2: FE1F    		CP	1FH		;IS CHAR WORDSTAR EOL HYPHEN?
DDD4: 2002    		JR	NZ,NOHYPH	;PASS IF NOT
DDD6: 3E2D    		LD	A,'-'		;YES, MAKE IT A REAL HYPHEN
DDD8:         	NOHYPH:
              		ENDIF			;WSTYPE
              	;
DDD8: FE20    		CP	' '		;IS CHAR CONTROL CODE?
DDDA: 3023    		JR	NC,PRT		;GO BOP CHAR COUNT AND PRINT IF NOT
DDDC: FE0D    		CP	CR		;IS CHAR A CR?
DDDE: 281D    		JR	Z,YESCR		;IF SO, GO ZERO B THEN PRINT
DDE0: FE0C    		CP	FFEED		;FORM FEED?
DDE2: 2819    		JR	Z,YESCR		;MANY PRINTERS RETURN CARRIAGE ON THIS
DDE4: FE0A    		CP	LF		;LINE FEED?
DDE6: 2818    		JR	Z,NOBOP		;PRINT, BUT DON'T BOP B
DDE8: FE07    		CP	BEL		;BELL?
DDEA: 2814    		JR	Z,NOBOP		;GO RING BUT DON'T BOP B
DDEC: FE09    		CP	TAB		;TAB?
DDEE: 2013    		JR	NZ,TYPE2L	;IF NOT, NO OTHER CHOICES, TOSS CONTROL
DDF0:         	LTAB:
DDF0: 3E20    		LD	A,' '		;<SP>
DDF2: CDD0D9  		CALL	LCOUT
DDF5: 04      		INC	B		;INCR POS COUNT
DDF6: 78      		LD	A,B
DDF7: E607    		AND	7
DDF9: 20F5    		JR	NZ,LTAB
DDFB: 1806    		JR	TYPE2L
              	;
DDFD: 06FF    	YESCR:	LD	B,0FFH		;COMBINE WITH INC BELOW TO GET ZERO
              	;
DDFF: 04      	PRT:	INC	B		;INCREMENT CHAR COUNT
DE00: CDD0D9  	NOBOP:	CALL	LCOUT		;PRINT IT
              	;
              	; CONTINUE PROCESSING
              	;
              	;
DE03:         	TYPE2L:
DE03: CD06DB  		CALL	BREAK		;CHECK FOR ABORT
DE06: 28AC    		JR	Z,TYPE1		;CONTINUE IF NO CHAR
DE08: FE03    		CP	'C'-'@' 	;^C?
DE0A: C8      		RET	Z		;RESTART IF SO
DE0B: 18A7    		JR	TYPE1
DE0D:         	TYPE3:
DE0D: 3D      		DEC	A		;NO ERROR?
DE0E: C8      		RET	Z		;RESTART CPR
DE0F:         	TYPE4:
DE0F: C3FADF  		JP	ERRLOG
              		ENDIF			;CPRTYP
              	;
              	;Section 5E
              	;Command: SAVE
              	;Function:  To save the contents of the TPA onto disk as a file
              	;Forms:
              	;	SAVE <Number of Pages> <ufn>
              	;				Save specified number of pages (start at 100H)
              	;				from TPA into specified file; <Number of
              	;				Pages> is in DEC
              	;	SAVE <Number of Sectors> <ufn> S
              	;				Like SAVE above, but numeric argument specifies
              	;				number of sectors rather than pages
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DE12:         	SAVE:
DE12: CD63DB  		CALL	NUMBER		;EXTRACT NUMBER FROM COMMAND LINE
DE15: 6F      		LD	L,A		;HL=PAGE COUNT
DE16: 2600    		LD	H,0
DE18: E5      		PUSH	HL		;SAVE PAGE COUNT
DE19: CD68DE  		CALL	EXTEST		;TEST FOR EXISTENCE OF FILE AND ABORT IF SO
DE1C: 0E16    		LD	C,16H		;BDOS MAKE FILE
DE1E: CD40DA  		CALL	GRBDOS
DE21: E1      		POP	HL		;GET PAGE COUNT
DE22: 2841    		JR	Z,SAVE3		;ERROR?
DE24: AF      		XOR	A		;SET RECORD COUNT FIELD OF NEW FILE'S FCB
DE25: 32B8D8  		LD	(FCBCR),A
DE28: CD51DB  		CALL	ADVAN		;LOOK FOR 'S' FOR SECTOR OPTION
DE2B: 13      		INC	DE		;PT TO AFTER 'S' TOKEN
DE2C: FE53    		CP	SECTFLG
DE2E: 2802    		JR	Z,SAVE0
DE30: 1B      		DEC	DE		;NO 'S' TOKEN, SO BACK UP
DE31: 29      		ADD	HL,HL		;DOUBLE IT FOR HL=SECTOR (128 BYTES) COUNT
DE32:         	SAVE0:
DE32: ED5356D8		LD	(CIBPTR),DE	;SET PTR TO BAD TOKEN OR AFTER GOOD TOKEN
DE36: 110001  		LD	DE,TPA		;PT TO START OF SAVE AREA (TPA)
DE39:         	SAVE1:
DE39: 7C      		LD	A,H		;DONE WITH SAVE?
DE3A: B5      		OR	L		;HL=0 IF SO
DE3B: 2818    		JR	Z,SAVE2
DE3D: 2B      		DEC	HL		;COUNT DOWN ON SECTORS
DE3E: E5      		PUSH	HL		;SAVE PTR TO BLOCK TO SAVE
DE3F: 218000  		LD	HL,128		;128 BYTES PER SECTOR
DE42: 19      		ADD	HL,DE		;PT TO NEXT SECTOR
DE43: E5      		PUSH	HL		;SAVE ON STACK
DE44: CD29DA  		CALL	DMASET		;SET DMA ADDRESS FOR WRITE (ADDRESS IN DE)
DE47: 1198D8  		LD	DE,FCBDN 	;WRITE SECTOR
DE4A: 0E15    		LD	C,15H		;BDOS WRITE SECTOR
DE4C: CD03DA  		CALL	BDOSB		;SAVE BC
DE4F: D1      		POP	DE		;GET PTR TO NEXT SECTOR IN DE
DE50: E1      		POP	HL		;GET SECTOR COUNT
DE51: 28E6    		JR	Z,SAVE1		;CONTINUE IF NO WRITE ERROR
DE53: 1809    		JR	PRNLE		;GO PRINT ERROR AND RESET DMA
DE55:         	SAVE2:
DE55: 1198D8  		LD	DE,FCBDN 	;CLOSE SAVED FILE
DE58: CD45DA  		CALL	CLOSE
DE5B: 3C      		INC	A		;ERROR?
DE5C: 2007    		JR	NZ,SAVE3	;PASS IF OK
              	;
              	;  PRNLE IS ALSO USED BY MEMLOAD FOR TPA FULL ERROR
              	;
DE5E: CD0ADA  	PRNLE:	CALL	PRINTC		;DISK OR MEM FULL
DE61: 46756C  		DEFM	'Ful'
DE64: EC      		DEFB	'l'+80H
              	;
DE65: C326DA  	SAVE3:	JP	DEFDMA		;SET DMA TO 0080 AND RESTART CPR
              					; OR RETURN TO MLERR
              	;
              	; Test File in FCB for existence, ask user to delete if so, and abort if he
              	;  choses not to
              	;
DE68:         	EXTEST:
DE68: CD08DC  		CALL	SCANER		;EXTRACT FILE NAME
DE6B: C217DB  		JP	NZ,ERROR	;'?' IS NOT PERMITTED
DE6E: CDEADB  		CALL	SLOGIN		;LOG IN SELECTED DISK
DE71: CD49DA  		CALL	SEARF		;LOOK FOR SPECIFIED FILE
DE74: 1198D8  		LD	DE,FCBDN	;PT TO FILE FCB
DE77: C8      		RET	Z		;OK IF NOT FOUND
DE78: D5      		PUSH	DE		;SAVE PTR TO FCB
DE79: CD0ADA  		CALL	PRINTC
DE7C: 44656C65		DEFM	'Delete File'
DE80: 74652046	
DE84: 696C65  	
DE87: BF      		DEFB	'?'+80H
DE88: CDB5D9  		CALL	CONIN		;GET RESPONSE
DE8B: D1      		POP	DE		;GET PTR TO FCB
DE8C: FE59    		CP	'Y'		;KEY ON YES
DE8E: C240D9  		JP	NZ,RSTCPR	;RESTART IF NO, SP RESET EVENTUALLY
DE91: D5      		PUSH	DE		;SAVE PTR TO FCB
DE92: CD5FDA  		CALL	DELETE		;DELETE FILE
DE95: D1      		POP	DE		;GET PTR TO FCB
DE96: C9      		RET
              	;
              		ENDIF			;RAS
              	;
              	;Section 5F
              	;Command: REN
              	;Function:  To change the name of an existing file
              	;Forms:
              	;	REN <New ufn>=<Old ufn>	Perform function
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DE97:         	REN:
DE97: CD68DE  		CALL	EXTEST		;TEST FOR FILE EXISTENCE AND RETURN
              					; IF FILE DOESN'T EXIST; ABORT IF IT DOES
DE9A: 3AFFDB  		LD	A,(TEMPDR)	;SAVE CURRENT DEFAULT DISK
DE9D: F5      		PUSH	AF		;SAVE ON STACK
DE9E:         	REN0:
DE9E: 2198D8  		LD	HL,FCBDN 	;SAVE NEW FILE NAME
DEA1: 11A8D8  		LD	DE,FCBDM
DEA4: 011000  		LD	BC,16		;16 BYTES
DEA7: EDB0    		LDIR
DEA9: CD51DB  		CALL	ADVAN		;ADVANCE CIBPTR
DEAC: FE3D    		CP	'='		;'=' OK
DEAE: 2028    		JR	NZ,REN4
DEB0:         	REN1:
DEB0: EB      		EX	DE,HL		;PT TO CHAR AFTER '=' IN HL
DEB1: 23      		INC	HL
DEB2: 2256D8  		LD	(CIBPTR),HL	;SAVE PTR TO OLD FILE NAME
DEB5: CD08DC  		CALL	SCANER		;EXTRACT FILENAME.TYP TOKEN
DEB8: 201E    		JR	NZ,REN4		;ERROR IF ANY '?'
DEBA: F1      		POP	AF		;GET OLD DEFAULT DRIVE
DEBB: 47      		LD	B,A		;SAVE IT
DEBC: 21FFDB  		LD	HL,TEMPDR	;COMPARE IT AGAINST CURRENT DEFAULT DRIVE
DEBF: 7E      		LD	A,(HL)		;MATCH?
DEC0: B7      		OR	A
DEC1: 2804    		JR	Z,REN2
DEC3: B8      		CP	B		;CHECK FOR DRIVE ERROR
DEC4: 70      		LD	(HL),B
DEC5: 2011    		JR	NZ,REN4
DEC7:         	REN2:
DEC7: 70      		LD	(HL),B
DEC8: AF      		XOR	A
DEC9: 3298D8  		LD	(FCBDN),A	;SET DEFAULT DRIVE
DECC: 1198D8  		LD	DE,FCBDN 	;RENAME FILE
DECF: 0E17    		LD	C,17H		;BDOS RENAME FCT
DED1: CD40DA  		CALL	GRBDOS
DED4: C0      		RET	NZ
DED5:         	REN3:
DED5: CD54D9  		CALL	PRNNF		;PRINT NO FILE MSG
DED8:         	REN4:
DED8: C3FADF  		JP	ERRLOG
              	;
              		ENDIF			;RAS
              	;
              	;Section 5G
              	;Command: USER
              	;Function:  Change current USER number
              	;Forms:
              	;	USER <unum>	Select specified user number;<unum> is in DEC
              	;
              		IF	DRUSER		;IF DRIVE/USER CODE OK...
DEDB:         	USER:
DEDB: CD11DB  		CALL	USRNUM		;EXTRACT USER NUMBER FROM COMMAND LINE
DEDE: 5F      		LD	E,A		;PLACE USER NUMBER IN E
DEDF: CD6ADA  	SUSER:	CALL	SETUSR		;SET SPECIFIED USER
              		ENDIF			;DRUSER
DEE2:         	RSTJP:
DEE2: C343D9  		JP	RCPRNL		;RESTART CPR
              	;
              	;Section 5H
              	;Command: DFU
              	;Function:  Set the Default User Number for the command/file scanner
              	;	     (MEMLOAD)
              	;	    Note: When under SECURE mode, this will select the second
              	;	          user area to check for programs (normally user 15).
              	;
              	;Forms:
              	;	DFU <unum>	Select Default User Number;<unum> is in DEC
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
DEE5:         	DFU:
DEE5: CD11DB  		CALL	USRNUM		;GET USER NUMBER
DEE8: 32B7DF  		LD	(DFUSR),A	;PUT IT AWAY
DEEB: 18F5    		JR	RSTJP		;RESTART CPR (NO DEFAULT LOGIN)
              		ENDIF			;NOT RAS
              	;
              	;Section 5I
              	;Command: JUMP
              	;Function:  To Call the program (subroutine) at the specified address
              	;	     without loading from disk
              	;Forms:
              	;	JUMP <adr>		Call at <adr>;<adr> is in HEX
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DEED:         	JUMP:
DEED: CDA1DB  		CALL	HEXNUM		;GET LOAD ADDRESS IN HL
DEF0: 1844    		JR	CALLPROG	;PERFORM CALL
              	;
              		ENDIF			;RAS
              	;
              	;Section 5J
              	;Command: GO
              	;Function:  To Call the program in the TPA without loading
              	;	     loading from disk. Same as JUMP 100H, but much
              	;	     more convenient, especially when used with
              	;	     parameters for programs like STAT. Also can be
              	;	     allowed on remote-access systems with no problems.
              	;
              	;Form:
              	;	GO <parameters like for COMMAND>
              	;
              		IF	RAS		;ONLY IF RAS
              	        ELSE
              	;
DEF2: 210001  	GO:	LD	HL,TPA		;Always to TPA
DEF5: 183F    		JR	CALLPROG	;Perform call
              	;
              		ENDIF			;END OF GO FOR RAS
              	;
              	;Section 5K
              	;Command: COM file processing
              	;Function:  To load the specified COM file from disk and execute it
              	;Forms:
              	;	<command>
              	;
DEF7:         	COM:
DEF7: 3A99D8  		LD	A,(FCBFN)	;ANY COMMAND?
DEFA: FE20    		CP	' '		;' ' MEANS COMMAND WAS 'D:' TO SWITCH
DEFC: 201D    		JR	NZ,COM1		;NOT <SP>, SO MUST BE TRANSIENT OR ERROR
DEFE: 3AFFDB  		LD	A,(TEMPDR)	;LOOK FOR DRIVE SPEC
DF01: B7      		OR	A		;IF ZERO, JUST BLANK
DF02: 28DE    		JR	Z,RSTJP
DF04: 3D      		DEC	A		;ADJUST FOR LOG IN
DF05: 327EDA  		LD	(TDRIVE),A	;SET DEFAULT DRIVE
DF08: CD7DDA  		CALL	SETU0D		;SET DRIVE WITH USER 0
DF0B: CD32DA  		CALL	LOGIN		;LOG IN DRIVE
              	;
              		IF	DRUSER		;DRIVE/USER HACKERY OK?
DF0E: CD11DB  		CALL	USRNUM		;GET USER #, IF ANY
DF11: 5F      		LD	E,A		;GET IT READY FOR BDOS
DF12: 3A99D8  		LD	A,(FCBFN)	;SEE IF # SPECIFIED
DF15: FE20    		CP	' '
DF17: 20C6    		JR	NZ,SUSER	;SELECT IF WANTED
              		ENDIF			;DRUSER
              	;
DF19: 18C7    		JR	RSTJP		;RESTART CPR
DF1B:         	COM1:
DF1B: 3AA1D8  		LD	A,(FCBFT)	;FILE TYPE MUST BE BLANK
DF1E: FE20    		CP	' '
DF20: C217DB  		JP	NZ,ERROR
DF23: 2174D8  		LD	HL,COMMSG	;PLACE DEFAULT FILE TYPE (COM) INTO FCB
DF26: 11A1D8  		LD	DE,FCBFT	;COPY INTO FILE TYPE
DF29: 010300  		LD	BC,3		;3 BYTES
DF2C: EDB0    		LDIR
DF2E: 210001  		LD	HL,TPA		;SET EXECUTION/LOAD ADDRESS
DF31: E5      		PUSH	HL		;SAVE FOR EXECUTION
DF32: CDA2DF  		CALL	MEMLOAD		;LOAD MEMORY WITH FILE SPECIFIED IN CMD LINE
              					; (NO RETURN IF ERROR OR TOO BIG)
DF35: E1      		POP	HL		;GET EXECUTION ADDRESS
              	;
              	; CALLPROG IS THE ENTRY POINT FOR THE EXECUTION OF THE LOADED
              	;   PROGRAM. ON ENTRY TO THIS ROUTINE, HL MUST CONTAIN THE EXECUTION
              	;   ADDRESS OF THE PROGRAM (SUBROUTINE) TO EXECUTE
              	;
DF36:         	CALLPROG:
DF36: 2289DF  		LD	(EXECADR),HL	;PERFORM IN-LINE CODE MODIFICATION
DF39: CDF4DB  		CALL	DLOGIN		;LOG IN DEFAULT DRIVE
DF3C: CD08DC  		CALL	SCANER		;SEARCH COMMAND LINE FOR NEXT TOKEN
DF3F: 21FFDB  		LD	HL,TEMPDR	;SAVE PTR TO DRIVE SPEC
DF42: E5      		PUSH	HL
DF43: 7E      		LD	A,(HL)		;SET DRIVE SPEC
DF44: 3298D8  		LD	(FCBDN),A
DF47: 21A8D8  		LD	HL,FCBDN+10H	;PT TO 2ND FILE NAME
DF4A: CD0BDC  		CALL	SCANX		;SCAN FOR IT AND LOAD IT INTO FCBDN+16
DF4D: E1      		POP	HL		;SET UP DRIVE SPECS
DF4E: 7E      		LD	A,(HL)
DF4F: 32A8D8  		LD	(FCBDM),A
DF52: AF      		XOR	A
DF53: 32B8D8  		LD	(FCBCR),A
DF56: 115C00  		LD	DE,TFCB		;COPY TO DEFAULT FCB
DF59: 2198D8  		LD	HL,FCBDN 	;FROM FCBDN
DF5C: 012100  		LD	BC,33		;SET UP DEFAULT FCB
DF5F: EDB0    		LDIR
DF61: 2104D8  		LD	HL,CIBUFF-1
DF64:         	COM4:
DF64: 23      		INC	HL
DF65: 7E      		LD	A,(HL)		;SKIP TO END OF 2ND FILE NAME
DF66: B7      		OR	A		;END OF LINE?
DF67: 2804    		JR	Z,COM5
DF69: FE20    		CP	' '		;END OF TOKEN?
DF6B: 20F7    		JR	NZ,COM4
              	;
              	; LOAD COMMAND LINE INTO TBUFF
              	;
DF6D:         	COM5:
DF6D: 06FF    		LD	B,-1		;SET CHAR COUNT
DF6F: 118000  		LD	DE,TBUFF	;PT TO CHAR POS
DF72: 2B      		DEC	HL
DF73:         	COM6:
DF73: 04      		INC	B		;INCR CHAR COUNT
DF74: 23      		INC	HL		;PT TO NEXT
DF75: 13      		INC	DE
DF76: 7E      		LD	A,(HL)		;COPY COMMAND LINE TO TBUFF
DF77: 12      		LD	(DE),A
DF78: B7      		OR	A		;DONE IF ZERO
DF79: 20F8    		JR	NZ,COM6
              	;
              	; RUN LOADED TRANSIENT PROGRAM
              	;
DF7B:         	COM7:
DF7B: 78      		LD	A,B		;SAVE CHAR COUNT
DF7C: 328000  		LD	(TBUFF),A
DF7F: CDA1D9  		CALL	CRLF		;NEW LINE
DF82: CD26DA  		CALL	DEFDMA		;SET DMA TO 0080
DF85: CD6EDA  		CALL	SETUD		;SET USER/DISK
              	;
              	; EXECUTION (CALL) OF PROGRAM (SUBROUTINE) OCCURS HERE
              	;
DF89:         	EXECADR	EQU	$+1		;CHANGE ADDRESS FOR IN-LINE CODE MODIFICATION
DF88: CD0001  		CALL	TPA		;CALL TRANSIENT
DF8B: CD26DA  		CALL	DEFDMA		;SET DMA TO 0080, IN CASE
              					;PROG CHANGED IT ON US
DF8E: CD7DDA  		CALL	SETU0D		;SET USER 0/DISK
DF91: CD32DA  		CALL	LOGIN		;LOGIN DISK
DF94: C3F2D8  		JP	RESTRT		;RESTART CPR
              	;
              	;Section 5L
              	;Command: GET
              	;Function:  To load the specified file from disk to the specified address
              	;Forms:
              	;	GET <adr> <ufn>	Load the specified file at the specified page;
              	;			<adr> is in HEX
              	;
              		IF	RAS		;NOT FOR REMOTE-ACCESS SYSTEM
              	        ELSE
              	;
DF97:         	GET:
DF97: CDA1DB  		CALL	HEXNUM		;GET LOAD ADDRESS IN HL
DF9A: E5      		PUSH	HL		;SAVE ADDRESS
DF9B: CD08DC  		CALL	SCANER		;GET FILE NAME
DF9E: E1      		POP	HL		;RESTORE ADDRESS
DF9F: C217DB  		JP	NZ,ERROR	;MUST BE UNAMBIGUOUS
              	;
              	; FALL THRU TO MEMLOAD
              	;
              		ENDIF			;RAS
              	;
              	; LOAD MEMORY WITH THE FILE WHOSE NAME IS SPECIFIED IN THE COMMAND LINE
              	;   ON INPUT, HL CONTAINS STARTING ADDRESS TO LOAD
              	;
              	;  EXIT BACK TO CALLER IF NO ERROR.  IF COM FILE TOO BIG OR
              	; OTHER ERROR, EXIT DIRECTLY TO MLERR.
              	;
DFA2:         	MEMLOAD:
DFA2: 22D5DF  		LD	(LOADADR),HL	;SET LOAD ADDRESS
DFA5: CD68DA  		CALL	GETUSR		;GET CURRENT USER NUMBER
DFA8: 3264DA  		LD	(TMPUSR),A	;SAVE IT FOR LATER
DFAB: 32B9DF  		LD	(TSELUSR),A	;TEMP USER TO SELECT
              	;
              	;   MLA is a reentry point for a non-standard CP/M Modification
              	; This is the return point for when the .COM (or GET) file is not found the
              	; first time, Drive A: is selected for a second attempt
              	;
DFAE:         	MLA:
DFAE: CDEADB  		CALL	SLOGIN		;LOG IN SPECIFIED DRIVE IF ANY
DFB1: CD37DA  		CALL	OPENF		;OPEN COMMAND.COM FILE
DFB4: 201E    		JR	NZ,MLA1		;FILE FOUND - LOAD IT
              	;
              		IF	SECURE
              	;
              	;  IF SECURE ENABLED, SEARCH CURRENT DRIVE, CURRENT USER, THEN
              	; IF IN WHEEL MODE, SEARCH UNDER LAST USER SET BY DFU (ORIG
              	; "RESUSR" AFTER WARM BOOT) ON CURRENT DRIVE. IF NOT FOUND, OR
              	; NOT IN WHEEL MODE, THEN SEARCH ON CURRENT DRIVE, UNDER USER
              	; "DEFUSR". IF STILL NOT FOUND, LOOK AT SAME SERIES OF USERS
              	; ON DRIVE A.
              	;
              	DFLAG	EQU	$+1		;MARK IN-THE-CODE VARIABLE
              		LD	A,0		;HAVE WE CHECKED THIS DRIVE ALREADY?
              		OR	A
              		JR	NZ,MLA0		;PASS IF SO TO GO TO DRIVE A:
              		LD	A,(WHEEL)	;RESTRICTED PROGS ALLOWED?
              		CP	RESTRCT
              		JR	Z,MLA00		;PASS IF NOT
              		PUSH	BC		;PUSH BC
              		LD	A,(DFUSR)	;LOAD DEFAULT USER
              		LD	B,A		;PUT IT IN B
              		LD	A,(TSELUSR)	;CHECK CURR USER
              	DFUSR	EQU	$+1		;DEFAULT USER LOCATION
              		CP	RESUSR		;RESTRICTED USER?
              		LD	A,B		;ASSUME NOT
              		POP	BC		;RESTORE BC
              		JR	NZ,SETTSE	;GO TRY IF NOT
              	MLA00:				;SS IF NOT
              	TSELUSR	EQU	$+1		;MARK IN-THE-CODE VARIABLE
              		LD	A,0		;GET CURR USER
              		SUB	DEFUSR		;IS IT UNRESTRICTED COM AREA?
              		JR	Z,MLA0		;NO MORE CHOICES IF SO
              		LD	(DFLAG),A	;MAKE DFLAG NON-ZERO IF NOT
              		LD	A,DEFUSR	; AND TRY UNRESTRICTED COM AREA
              		ENDIF			;SECURE
              	;
              		IF	SECURE
              	        ELSE
DFB7:         	DFUSR	EQU	$+1		;MARK IN-THE-CODE VARIABLE
DFB6: 3E00    		LD	A,DEFUSR	;GET DEFAULT USER
DFB9:         	TSELUSR	EQU	$+1		;MARK IN-THE-CODE VARIABLE
DFB8: FE00    		CP	DEFUSR		;CHECK FOR THE USER AREA..
DFBA: 2809    		JR	Z,MLA0		;..EQUAL DEFAULT, AND JUMP IF SO
              		ENDIF			;NOT SECURE
              	;
DFBC:         	SETTSE:
DFBC: 32B9DF  		LD	(TSELUSR),A	;PUT DOWN NEW ONE
DFBF: 5F      		LD	E,A
DFC0: CD6ADA  		CALL	SETUSR		;GO SET NEW USER NUMBER
DFC3: 18E9    		JR	MLA		;AND TRY AGAIN
              	;
              	; ERROR ROUTINE TO SELECT DRIVE A: IF DEFAULT WAS ORIGINALLY SELECTED
              	;
DFC5:         	MLA0:
DFC5: 21FFDB  		LD	HL,TEMPDR	;GET DRIVE FROM CURRENT COMMAND
DFC8: AF      		XOR	A		;A=0
              	;
              		IF	SECURE
              		LD	(DFLAG),A	;ALLOW A: SEARCH
              		ENDIF			;SECURE
              	;
DFC9: B6      		OR	(HL)
DFCA: C2F7DF  		JP	NZ,MLERR	;ERROR IF ALREADY DISK A:
DFCD: 3601    		LD	(HL),1		;SELECT DRIVE A:
DFCF: 3A64DA  		LD	A,(TMPUSR)	;GO TO 'CURRENT' USER CODE
DFD2: 18E8    		JR	SETTSE
              	;
              	; FILE FOUND -- PROCEED WITH LOAD
              	;
DFD4:         	MLA1:
DFD5:         	LOADADR	EQU	$+1
DFD4: 210001  		LD	HL,TPA
DFD7:         	ML2:
DFD7: 3ED7    		LD	A,ENTRY/256-1	;GET HIGH-ORDER ADR OF JUST BELOW CPR
DFD9: BC      		CP	H		;ARE WE GOING TO OVERWRITE THE CPR?
DFDA: 3818    		JR	C,ML4		;ERROR IF SO
DFDC: E5      		PUSH	HL		;SAVE ADDRESS OF NEXT SECTOR
DFDD: EB      		EX	DE,HL		;... IN DE
DFDE: CD29DA  		CALL	DMASET		;SET DMA ADDRESS FOR LOAD
DFE1: 1198D8  		LD	DE,FCBDN 	;READ NEXT SECTOR
DFE4: CD01DA  		CALL	READ
DFE7: E1      		POP	HL		;GET ADDRESS OF NEXT SECTOR
DFE8: 2006    		JR	NZ,ML3		;READ ERROR OR EOF?
DFEA: 118000  		LD	DE,128		;MOVE 128 BYTES PER SECTOR
DFED: 19      		ADD	HL,DE		;PT TO NEXT SECTOR IN HL
DFEE: 18E7    		JR	ML2
              	;
DFF0:         	ML3:
DFF0: 3D      		DEC	A		;LOAD COMPLETE
DFF1: CA63DA  		JP	Z,RESETUSR	;IF ZERO, OK, GO RESET CORRECT USER #
              					; ON WAY OUT, ELSE FALL THRU TO PRNLE
              	;
              	;  TPA FULL
              	;
DFF4: CD5EDE  	ML4:	CALL	PRNLE		;PRINT MSG AND RESET DEF DMA
              	;
              	; TRANSIENT LOAD ERROR
              	;
DFF7:         	MLERR:
              					;NOTE THAT THERE IS AN EXTRA RETURN ADDRESS ON
              					; THE STACK. IT WILL BE TOSSED WHEN ERROR EXITS
              					; TO RESTRT, WHICH RELOADS SP.
DFF7: CD63DA  		CALL	RESETUSR	;RESET CURRENT USER NUMBER
              					;  RESET MUST BE DONE BEFORE LOGIN
DFFA:         	ERRLOG:
DFFA: CDF4DB  		CALL	DLOGIN		;LOG IN DEFAULT DISK
DFFD: C317DB  		JP	ERROR		;FLAG ERROR
              	;
              	;
              	;Section: 5M
              	;PASS:  Enable wheel mode.
              	;NORM:	Disable wheel mode.
              	;
              	;  Type PASS <password> <cr> to CP/M prompt to enter wheel mode.
              	; This code can be replaced with PST's PASS.ASM which gives many
              	; nice little options like no keyboard echo, etc.
              	;
              		IF	INPASS		;WE WANT TO USE THIS CODE, NOT PASS.COM
              	PASS:
              		LD	HL,PASSWD	;SET UP POINTERS
              		LD	DE,CIBUFF+NCHARS+1
              		LD	B,PRGEND-PASSWD	;B= LENGTH
              	CKPASS:	LD	A,(DE)		;TRIAL PW TO A
              		CP	(HL)		;CHECK FOR MATCH
              		JP	NZ,COM		;NOPE.. LOOK FOR PASS.COM
              		INC	HL		;INCREMENT COUNTER
              		INC	DE
              		DJNZ	CKPASS		;CONTINUE IF MORE
              		LD	A,NOT RESTRCT	;WHEEL = NOT RESTRCT
              	
              	PWOUT:	LD	(WHEEL),A
              		JP	RESTRT
              	;
              	NORM:
              		LD	A,RESTRCT
              		JR	PWOUT
              	;
              	PASSWD:
              		DEFM	'YOURPW'	;YOUR PASSWORD
              	PRGEND	EQU	$		;END OF PASSWORD
              	;
              		ENDIF			;INPASS
              	
              	;        DEFS    4
              	;
              	;; 	IF	($ GE CPRLOC+800H)
              	;; 	.PRINTX	/ZCPR exceeds 2K memory size !!!/
              	;; 	ENDIF
              	;; ;
              	;; 	END
              	
              	#include "../bdos.asm"
              	;**************************************************************
              	;*
              	;*             C P / M   version   2 . 2
              	;*
              	;*   Reconstructed from memory image on February 27, 1981
              	;*
              	;*                by Clark A. Calkins
              	;*
              	;*      Modified to build as single image from source
              	;*
              	;*
              	;*
              	;**************************************************************
              	
              	
              	
              	;
              	;   note that the following six bytes must match those at
              	; (pattrn1) or cp/m will halt. why?
              	;
E000: 00160000	pattrn2:defb	0,22,0,0,0,0	;(* serial number bytes *).
E004: 0000    	
              	;
              	;**************************************************************
              	;*
              	;*                    B D O S   E N T R Y
              	;*
              	;**************************************************************
              	;
E006: C311E0  	fbase:	jp	fbase1
              	;
              	;   bdos error table.
              	;
E009: 99E0    	badsctr:defw	error1		;bad sector on read or write.
E00B: A5E0    	badslct:defw	error2		;bad disk select.
E00D: ABE0    	rodisk:	defw	error3		;disk is read only.
E00F: B1E0    	rofile:	defw	error4		;file is read only.
              	;
              	;   entry into bdos. (de) or (e) are the parameters passed. the
              	; function number desired is in register (c).
              	;
E011: EB      	fbase1:	ex	de,hl		;save the (de) parameters.
E012: 2243E3  		ld	(params),hl
E015: EB      		ex	de,hl
E016: 7B      		ld	a,e		;and save register (e) in particular.
E017: 32D6ED  		ld	(eparam),a
E01A: 210000  		ld	hl,0
E01D: 2245E3  		ld	(status),hl	;clear return status.
E020: 39      		add	hl,sp
E021: 220FE3  		ld	(usrstack),hl	;save users stack pointer.
E024: 3141E3  		ld	sp,stkarea	;and set our own.
E027: AF      		xor	a		;clear auto select storage space.
E028: 32E0ED  		ld	(autoflag),a
E02B: 2174ED  		ld	hl,goback	;set return address.
E02E: E5      		push	hl
E02F: CD18EF  		call	bshook		; see if anyone wants to intercept the call
E032: 79      		ld	a,c		;get function number.
E033: FE29    		cp	nfuncts		;valid function number?
E035: D0      		ret	nc
E036: 4B      		ld	c,e		;keep single register function here.
E037: 2147E0  		ld	hl,functns	;now look thru the function table.
E03A: 5F      		ld	e,a
E03B: 1600    		ld	d,0		;(de)=function number.
E03D: 19      		add	hl,de
E03E: 19      		add	hl,de		;(hl)=(start of table)+2*(function number).
E03F: 5E      		ld	e,(hl)
E040: 23      		inc	hl
E041: 56      		ld	d,(hl)		;now (de)=address for this function.
E042: 2A43E3  		ld	hl,(params)	;retrieve parameters.
E045: EB      		ex	de,hl		;now (de) has the original parameters.
E046: E9      		jp	(hl)		;execute desired function.
              	;
              	;   bdos function jump table.
              	;
0029:         	nfuncts equ	41		;number of functions in followin table.
              	;
E047: 46EEC8E2	functns:defw	wboot,getcon,outcon,getrdr,punch,list,dircio,getiob
E04B: 90E1CEE2	
E04F: C7EEC3EE	
E053: D4E2EDE2	
E057: F3E2F8E2		defw	setiob,prtstr,rdbuff,getcsts,getver,rstdsk,setdsk,openfil
E05B: E1E1FEE2	
E05F: 7EEC83EC	
E063: 45EC9CEC	
E067: A5ECABEC		defw	closefil,getfst,getnxt,delfile,readseq,wrtseq,fcreate
E06B: C8ECD7EC	
E06F: E0ECE6EC	
E073: ECEC    	
E075: F5ECFEEC		defw	renfile,getlog,getcrnt,putdma,getaloc,wrtprtd,getrov,setattr
E079: 04ED0AED	
E07D: 11ED2CE5	
E081: 17ED1DED	
E085: 26ED2DED		defw	getparm,getuser,rdrandom,wtrandom,filesize,setran,logoff,rtn
E089: 41ED47ED	
E08D: 4DED0EEC	
E091: 53ED04E3	
E095: 04E39BED		defw	rtn,wtspecl
              	;
              	;   bdos error message section.
              	;
E099: 21CAE0  	error1:	ld	hl,badsec	;bad sector message.
E09C: CDE5E0  		call	prterr		;print it and get a 1 char responce.
E09F: FE03    		cp	cntrlc		;re-boot request (control-c)?
E0A1: CA0000  		jp	z,0		;yes.
E0A4: C9      		ret			;no, return to retry i/o function.
              	;
E0A5: 21D5E0  	error2:	ld	hl,badsel	;bad drive selected.
E0A8: C3B4E0  		jp	error5
              	;
E0AB: 21E1E0  	error3:	ld	hl,diskro	;disk is read only.
E0AE: C3B4E0  		jp	error5
              	;
E0B1: 21DCE0  	error4:	ld	hl,filero	;file is read only.
              	;
E0B4: CDE5E0  	error5:	call	prterr
E0B7: C341EE  		jp	eboot		;always reboot on these errors.
              	;
E0BA: 42646F73	bdoserr:defb	'Bdos Err on '
E0BE: 20457272	
E0C2: 206F6E20	
E0C6: 203A2024	bdosdrv:defb	' : $'
E0CA: 42616420	badsec:	defb	'Bad Sector$'
E0CE: 53656374	
E0D2: 6F7224  	
E0D5: 53656C65	badsel:	defb	'Select$'
E0D9: 637424  	
E0DC: 46696C65	filero:	defb	'File '
E0E0: 20      	
E0E1: 522F4F24	diskro:	defb	'R/O$'
              	;
              	;   print bdos error message.
              	;
E0E5: E5      	prterr:	push	hl		;save second message pointer.
E0E6: CDC9E1  		call	outcrlf		;send (cr)(lf).
E0E9: 3A42E3  		ld	a,(active)	;get active drive.
E0EC: C641    		add	a,'A'		;make ascii.
E0EE: 32C6E0  		ld	(bdosdrv),a	;and put in message.
E0F1: 01BAE0  		ld	bc,bdoserr	;and print it.
E0F4: CDD3E1  		call	prtmesg
E0F7: C1      		pop	bc		;print second message line now.
E0F8: CDD3E1  		call	prtmesg
              	;
              	;   get an input character. we will check our 1 character
              	; buffer first. this may be set by the console status routine.
              	;
E0FB: 210EE3  	getchar:ld	hl,charbuf	;check character buffer.
E0FE: 7E      		ld	a,(hl)		;anything present already?
E0FF: 3600    		ld	(hl),0		;...either case clear it.
E101: B7      		or	a
E102: C0      		ret	nz		;yes, use it.
E103: C3ABEE  		jp	conin		;nope, go get a character responce.
              	;
              	;   input and echo a character.
              	;
E106: CDFBE0  	getecho:call	getchar		;input a character.
E109: CD14E1  		call	chkchar		;carriage control?
E10C: D8      		ret	c		;no, a regular control char so don't echo.
E10D: F5      		push	af		;ok, save character now.
E10E: 4F      		ld	c,a
E10F: CD90E1  		call	outcon		;and echo it.
E112: F1      		pop	af		;get character and return.
E113: C9      		ret	
              	;
              	;   check character in (a). set the zero flag on a carriage
              	; control character and the carry flag on any other control
              	; character.
              	;
E114: FE0D    	chkchar:cp	cr		;check for carriage return, line feed, backspace,
E116: C8      		ret	z		;or a tab.
E117: FE0A    		cp	lf
E119: C8      		ret	z
E11A: FE09    		cp	tab
E11C: C8      		ret	z
E11D: FE08    		cp	bs
E11F: C8      		ret	z
E120: FE20    		cp	' '		;other control char? set carry flag.
E122: C9      		ret	
              	;
              	;   check the console during output. halt on a control-s, then
              	; reboot on a control-c. if anything else is ready, clear the
              	; zero flag and return (the calling routine may want to do
              	; something).
              	;
E123: 3A0EE3  	ckconsol: ld	a,(charbuf)	;check buffer.
E126: B7      		or	a		;if anything, just return without checking.
E127: C245E1  		jp	nz,ckcon2
E12A: CDA0EE  		call	const		;nothing in buffer. check console.
E12D: E601    		and	01h		;look at bit 0.
E12F: C8      		ret	z		;return if nothing.
E130: CDABEE  		call	conin		;ok, get it.
E133: FE13    		cp	cntrls		;if not control-s, return with zero cleared.
E135: C242E1  		jp	nz,ckcon1
E138: CDABEE  		call	conin		;halt processing until another char
E13B: FE03    		cp	cntrlc		;is typed. control-c?
E13D: CA0000  		jp	z,0		;yes, reboot now.
E140: AF      		xor	a		;no, just pretend nothing was ever ready.
E141: C9      		ret	
E142: 320EE3  	ckcon1:	ld	(charbuf),a	;save character in buffer for later processing.
E145: 3E01    	ckcon2:	ld	a,1		;set (a) to non zero to mean something is ready.
E147: C9      		ret	
              	;
              	;   output (c) to the screen. if the printer flip-flop flag
              	; is set, we will send character to printer also. the console
              	; will be checked in the process.
              	;
E148: 3A0AE3  	outchar:ld	a,(outflag)	;check output flag.
E14B: B7      		or	a		;anything and we won't generate output.
E14C: C262E1  		jp	nz,outchr1
E14F: C5      		push	bc
E150: CD23E1  		call	ckconsol	;check console (we don't care whats there).
E153: C1      		pop	bc
E154: C5      		push	bc
E155: CDB7EE  		call	conout		;output (c) to the screen.
E158: C1      		pop	bc
E159: C5      		push	bc
E15A: 3A0DE3  		ld	a,(prtflag)	;check printer flip-flop flag.
E15D: B7      		or	a
E15E: C4C3EE  		call	nz,list		;print it also if non-zero.
E161: C1      		pop	bc
E162: 79      	outchr1:ld	a,c		;update cursors position.
E163: 210CE3  		ld	hl,curpos
E166: FE7F    		cp	del		;rubouts don't do anything here.
E168: C8      		ret	z
E169: 34      		inc	(hl)		;bump line pointer.
E16A: FE20    		cp	' '		;and return if a normal character.
E16C: D0      		ret	nc
E16D: 35      		dec	(hl)		;restore and check for the start of the line.
E16E: 7E      		ld	a,(hl)
E16F: B7      		or	a
E170: C8      		ret	z		;ingnore control characters at the start of the line.
E171: 79      		ld	a,c
E172: FE08    		cp	bs		;is it a backspace?
E174: C279E1  		jp	nz,outchr2
E177: 35      		dec	(hl)		;yes, backup pointer.
E178: C9      		ret	
E179: FE0A    	outchr2:cp	lf		;is it a line feed?
E17B: C0      		ret	nz		;ignore anything else.
E17C: 3600    		ld	(hl),0		;reset pointer to start of line.
E17E: C9      		ret	
              	;
              	;   output (a) to the screen. if it is a control character
              	; (other than carriage control), use ^x format.
              	;
E17F: 79      	showit:	ld	a,c
E180: CD14E1  		call	chkchar		;check character.
E183: D290E1  		jp	nc,outcon	;not a control, use normal output.
E186: F5      		push	af
E187: 0E5E    		ld	c,'^'		;for a control character, preceed it with '^'.
E189: CD48E1  		call	outchar
E18C: F1      		pop	af
E18D: F640    		or	'@'		;and then use the letter equivelant.
E18F: 4F      		ld	c,a
              	;
              	;   function to output (c) to the console device and expand tabs
              	; if necessary.
              	;
E190: 79      	outcon:	ld	a,c
E191: FE09    		cp	tab		;is it a tab?
E193: C248E1  		jp	nz,outchar	;use regular output.
E196: 0E20    	outcon1:ld	c,' '		;yes it is, use spaces instead.
E198: CD48E1  		call	outchar
E19B: 3A0CE3  		ld	a,(curpos)	;go until the cursor is at a multiple of 8
              	
E19E: E607    		and	07h		;position.
E1A0: C296E1  		jp	nz,outcon1
E1A3: C9      		ret	
              	;
              	;   echo a backspace character. erase the prevoius character
              	; on the screen.
              	;
E1A4: CDACE1  	backup:	call	backup1		;backup the screen 1 place.
E1A7: 0E20    		ld	c,' '		;then blank that character.
E1A9: CDB7EE  		call	conout
E1AC: 0E08    	backup1:ld	c,bs		;then back space once more.
E1AE: C3B7EE  		jp	conout
              	;
              	;   signal a deleted line. print a '#' at the end and start
              	; over.
              	;
E1B1: 0E23    	newline:ld	c,'#'
E1B3: CD48E1  		call	outchar		;print this.
E1B6: CDC9E1  		call	outcrlf		;start new line.
E1B9: 3A0CE3  	newln1:	ld	a,(curpos)	;move the cursor to the starting position.
E1BC: 210BE3  		ld	hl,starting
E1BF: BE      		cp	(hl)
E1C0: D0      		ret	nc		;there yet?
E1C1: 0E20    		ld	c,' '
E1C3: CD48E1  		call	outchar		;nope, keep going.
E1C6: C3B9E1  		jp	newln1
              	;
              	;   output a (cr) (lf) to the console device (screen).
              	;
E1C9: 0E0D    	outcrlf:ld	c,cr
E1CB: CD48E1  		call	outchar
E1CE: 0E0A    		ld	c,lf
E1D0: C348E1  		jp	outchar
              	;
              	;   print message pointed to by (bc). it will end with a '$'.
              	;
E1D3: 0A      	prtmesg:ld	a,(bc)		;check for terminating character.
E1D4: FE24    		cp	'$'
E1D6: C8      		ret	z
E1D7: 03      		inc	bc
E1D8: C5      		push	bc		;otherwise, bump pointer and print it.
E1D9: 4F      		ld	c,a
E1DA: CD90E1  		call	outcon
E1DD: C1      		pop	bc
E1DE: C3D3E1  		jp	prtmesg
              	;
              	;   function to execute a buffered read.
              	;
E1E1: 3A0CE3  	rdbuff:	ld	a,(curpos)	;use present location as starting one.
E1E4: 320BE3  		ld	(starting),a
E1E7: 2A43E3  		ld	hl,(params)	;get the maximum buffer space.
E1EA: 4E      		ld	c,(hl)
E1EB: 23      		inc	hl		;point to first available space.
E1EC: E5      		push	hl		;and save.
E1ED: 0600    		ld	b,0		;keep a character count.
E1EF: C5      	rdbuf1:	push	bc
E1F0: E5      		push	hl
E1F1: CDFBE0  	rdbuf2:	call	getchar		;get the next input character.
E1F4: E67F    		and	7fh		;strip bit 7.
E1F6: E1      		pop	hl		;reset registers.
E1F7: C1      		pop	bc
E1F8: FE0D    		cp	cr		;en of the line?
E1FA: CAC1E2  		jp	z,rdbuf17
E1FD: FE0A    		cp	lf
E1FF: CAC1E2  		jp	z,rdbuf17
E202: FE08    		cp	bs		;how about a backspace?
E204: C216E2  		jp	nz,rdbuf3
E207: 78      		ld	a,b		;yes, but ignore at the beginning of the line.
E208: B7      		or	a
E209: CAEFE1  		jp	z,rdbuf1
E20C: 05      		dec	b		;ok, update counter.
E20D: 3A0CE3  		ld	a,(curpos)	;if we backspace to the start of the line,
E210: 320AE3  		ld	(outflag),a	;treat as a cancel (control-x).
E213: C370E2  		jp	rdbuf10
E216: FE7F    	rdbuf3:	cp	del		;user typed a rubout?
E218: C226E2  		jp	nz,rdbuf4
E21B: 78      		ld	a,b		;ignore at the start of the line.
E21C: B7      		or	a
E21D: CAEFE1  		jp	z,rdbuf1
E220: 7E      		ld	a,(hl)		;ok, echo the prevoius character.
E221: 05      		dec	b		;and reset pointers (counters).
E222: 2B      		dec	hl
E223: C3A9E2  		jp	rdbuf15
E226: FE05    	rdbuf4:	cp	cntrle		;physical end of line?
E228: C237E2  		jp	nz,rdbuf5
E22B: C5      		push	bc		;yes, do it.
E22C: E5      		push	hl
E22D: CDC9E1  		call	outcrlf
E230: AF      		xor	a		;and update starting position.
E231: 320BE3  		ld	(starting),a
E234: C3F1E1  		jp	rdbuf2
E237: FE10    	rdbuf5:	cp	cntrlp		;control-p?
E239: C248E2  		jp	nz,rdbuf6
E23C: E5      		push	hl		;yes, flip the print flag filp-flop byte.
E23D: 210DE3  		ld	hl,prtflag
E240: 3E01    		ld	a,1		;prtflag=1-prtflag
E242: 96      		sub	(hl)
E243: 77      		ld	(hl),a
E244: E1      		pop	hl
E245: C3EFE1  		jp	rdbuf1
E248: FE18    	rdbuf6:	cp	cntrlx		;control-x (cancel)?
E24A: C25FE2  		jp	nz,rdbuf8
E24D: E1      		pop	hl
E24E: 3A0BE3  	rdbuf7:	ld	a,(starting)	;yes, backup the cursor to here.
E251: 210CE3  		ld	hl,curpos
E254: BE      		cp	(hl)
E255: D2E1E1  		jp	nc,rdbuff	;done yet?
E258: 35      		dec	(hl)		;no, decrement pointer and output back up one space.
E259: CDA4E1  		call	backup
E25C: C34EE2  		jp	rdbuf7
E25F: FE15    	rdbuf8:	cp	cntrlu		;cntrol-u (cancel line)?
E261: C26BE2  		jp	nz,rdbuf9
E264: CDB1E1  		call	newline		;start a new line.
E267: E1      		pop	hl
E268: C3E1E1  		jp	rdbuff
E26B: FE12    	rdbuf9:	cp	cntrlr		;control-r?
E26D: C2A6E2  		jp	nz,rdbuf14
E270: C5      	rdbuf10:push	bc		;yes, start a new line and retype the old one.
E271: CDB1E1  		call	newline
E274: C1      		pop	bc
E275: E1      		pop	hl
E276: E5      		push	hl
E277: C5      		push	bc
E278: 78      	rdbuf11:ld	a,b		;done whole line yet?
E279: B7      		or	a
E27A: CA8AE2  		jp	z,rdbuf12
E27D: 23      		inc	hl		;nope, get next character.
E27E: 4E      		ld	c,(hl)
E27F: 05      		dec	b		;count it.
E280: C5      		push	bc
E281: E5      		push	hl
E282: CD7FE1  		call	showit		;and display it.
E285: E1      		pop	hl
E286: C1      		pop	bc
E287: C378E2  		jp	rdbuf11
E28A: E5      	rdbuf12:push	hl		;done with line. if we were displaying
E28B: 3A0AE3  		ld	a,(outflag)	;then update cursor position.
E28E: B7      		or	a
E28F: CAF1E1  		jp	z,rdbuf2
E292: 210CE3  		ld	hl,curpos	;because this line is shorter, we must
E295: 96      		sub	(hl)		;back up the cursor (not the screen however)
E296: 320AE3  		ld	(outflag),a	;some number of positions.
E299: CDA4E1  	rdbuf13:call	backup		;note that as long as (outflag) is non
E29C: 210AE3  		ld	hl,outflag	;zero, the screen will not be changed.
E29F: 35      		dec	(hl)
E2A0: C299E2  		jp	nz,rdbuf13
E2A3: C3F1E1  		jp	rdbuf2		;now just get the next character.
              	;
              	;   just a normal character, put this in our buffer and echo.
              	;
E2A6: 23      	rdbuf14:inc	hl
E2A7: 77      		ld	(hl),a		;store character.
E2A8: 04      		inc	b		;and count it.
E2A9: C5      	rdbuf15:push	bc
E2AA: E5      		push	hl
E2AB: 4F      		ld	c,a		;echo it now.
E2AC: CD7FE1  		call	showit
E2AF: E1      		pop	hl
E2B0: C1      		pop	bc
E2B1: 7E      		ld	a,(hl)		;was it an abort request?
E2B2: FE03    		cp	cntrlc		;control-c abort?
E2B4: 78      		ld	a,b
E2B5: C2BDE2  		jp	nz,rdbuf16
E2B8: FE01    		cp	1		;only if at start of line.
E2BA: CA0000  		jp	z,0
E2BD: B9      	rdbuf16:cp	c		;nope, have we filled the buffer?
E2BE: DAEFE1  		jp	c,rdbuf1
E2C1: E1      	rdbuf17:pop	hl		;yes end the line and return.
E2C2: 70      		ld	(hl),b
E2C3: 0E0D    		ld	c,cr
E2C5: C348E1  		jp	outchar		;output (cr) and return.
              	;
              	;   function to get a character from the console device.
              	;
E2C8: CD06E1  	getcon:	call	getecho		;get and echo.
E2CB: C301E3  		jp	setstat		;save status and return.
              	;
              	;   function to get a character from the tape reader device.
              	;
E2CE: CDCBEE  	getrdr:	call	reader		;get a character from reader, set status and return.
E2D1: C301E3  		jp	setstat
              	;
              	;  function to perform direct console i/o. if (c) contains (ff)
              	; then this is an input request. if (c) contains (fe) then
              	; this is a status request. otherwise we are to output (c).
              	;
E2D4: 79      	dircio:	ld	a,c		;test for (ff).
E2D5: 3C      		inc	a
E2D6: CAE0E2  		jp	z,dirc1
E2D9: 3C      		inc	a		;test for (fe).
E2DA: CAA0EE  		jp	z,const
E2DD: C3B7EE  		jp	conout		;just output (c).
E2E0: CDA0EE  	dirc1:	call	const		;this is an input request.
E2E3: B7      		or	a
E2E4: CA91ED  		jp	z,goback1	;not ready? just return (directly).
E2E7: CDABEE  		call	conin		;yes, get character.
E2EA: C301E3  		jp	setstat		;set status and return.
              	;
              	;   function to return the i/o byte.
              	;
E2ED: 3A0300  	getiob:	ld	a,(iobyte)
E2F0: C301E3  		jp	setstat
              	;
              	;   function to set the i/o byte.
              	;
E2F3: 210300  	setiob:	ld	hl,iobyte
E2F6: 71      		ld	(hl),c
E2F7: C9      		ret	
              	;
              	;   function to print the character string pointed to by (de)
              	; on the console device. the string ends with a '$'.
              	;
E2F8: EB      	prtstr:	ex	de,hl
E2F9: 4D      		ld	c,l
E2FA: 44      		ld	b,h		;now (bc) points to it.
E2FB: C3D3E1  		jp	prtmesg
              	;
              	;   function to interigate the console device.
              	;
E2FE: CD23E1  	getcsts:call	ckconsol
              	;
              	;   get here to set the status and return to the cleanup
              	; section. then back to the user.
              	;
E301: 3245E3  	setstat:ld	(status),a
E304: C9      	rtn:	ret	
              	;
              	;   set the status to 1 (read or write error code).
              	;
E305: 3E01    	ioerr1:	ld	a,1
E307: C301E3  		jp	setstat
              	;
E30A: 00      	outflag:defb	0		;output flag (non zero means no output).
E30B: 02      	starting: defb	2		;starting position for cursor.
E30C: 00      	curpos:	defb	0		;cursor position (0=start of line).
E30D: 00      	prtflag:defb	0		;printer flag (control-p toggle). list if non zero.
E30E: 00      	charbuf:defb	0		;single input character buffer.
              	;
              	;   stack area for bdos calls.
              	;
E30F: 0000    	usrstack: defw	0		;save users stack pointer here.
              	;
E311: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
E315: 00...   	
E329: 00000000		defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
E32D: 00...   	
E341:         	stkarea equ	$		;end of stack area.
              	;
E341: 00      	userno:	defb	0		;current user number.
E342: 00      	active:	defb	0		;currently active drive.
E343: 0000    	params:	defw	0		;save (de) parameters here on entry.
E345: 0000    	status:	defw	0		;status returned from bdos function.
              	;
              	;   select error occured, jump to error routine.
              	;
E347: 210BE0  	slcterr:ld	hl,badslct
              	;
              	;   jump to (hl) indirectly.
              	;
E34A: 5E      	jumphl:	ld	e,(hl)
E34B: 23      		inc	hl
E34C: 56      		ld	d,(hl)		;now (de) contain the desired address.
E34D: EB      		ex	de,hl
E34E: E9      		jp	(hl)
              	;
              	;   block move. (de) to (hl), (c) bytes total.
              	;
E34F: 0C      	de2hl:	inc	c		;is count down to zero?
E350: 0D      	de2hl1:	dec	c
E351: C8      		ret	z		;yes, we are done.
E352: 1A      		ld	a,(de)		;no, move one more byte.
E353: 77      		ld	(hl),a
E354: 13      		inc	de
E355: 23      		inc	hl
E356: C350E3  		jp	de2hl1		;and repeat.
              	;
              	;   select the desired drive.
              	;
E359: 3A42E3  	select:	ld	a,(active)	;get active disk.
E35C: 4F      		ld	c,a
E35D: CDDEEE  		call	seldsk		;select it.
E360: 7C      		ld	a,h		;valid drive?
E361: B5      		or	l		;valid drive?
E362: C8      		ret	z		;return if not.
              	;
              	;   here, the bios returned the address of the parameter block
              	; in (hl). we will extract the necessary pointers and save them.
              	;
E363: 5E      		ld	e,(hl)		;yes, get address of translation table into (de).
E364: 23      		inc	hl
E365: 56      		ld	d,(hl)
E366: 23      		inc	hl
E367: 22B3ED  		ld	(scratch1),hl	;save pointers to scratch areas.
E36A: 23      		inc	hl
E36B: 23      		inc	hl
E36C: 22B5ED  		ld	(scratch2),hl	;ditto.
E36F: 23      		inc	hl
E370: 23      		inc	hl
E371: 22B7ED  		ld	(scratch3),hl	;ditto.
E374: 23      		inc	hl
E375: 23      		inc	hl
E376: EB      		ex	de,hl		;now save the translation table address.
E377: 22D0ED  		ld	(xlate),hl
E37A: 21B9ED  		ld	hl,dirbuf	;put the next 8 bytes here.
E37D: 0E08    		ld	c,8		;they consist of the directory buffer
E37F: CD4FE3  		call	de2hl		;pointer, parameter block pointer,
E382: 2ABBED  		ld	hl,(diskpb)	;check and allocation vectors.
E385: EB      		ex	de,hl
E386: 21C1ED  		ld	hl,sectors	;move parameter block into our ram.
E389: 0E0F    		ld	c,15		;it is 15 bytes long.
E38B: CD4FE3  		call	de2hl
E38E: 2AC6ED  		ld	hl,(dsksize)	;check disk size.
E391: 7C      		ld	a,h		;more than 256 blocks on this?
E392: 21DDED  		ld	hl,bigdisk
E395: 36FF    		ld	(hl),0ffh	;set to samll.
E397: B7      		or	a
E398: CA9DE3  		jp	z,select1
E39B: 3600    		ld	(hl),0		;wrong, set to large.
E39D: 3EFF    	select1:ld	a,0ffh		;clear the zero flag.
E39F: B7      		or	a
E3A0: C9      		ret	
              	;
              	;   routine to home the disk track head and clear pointers.
              	;
E3A1: CDD9EE  	homedrv:call	home		;home the head.
E3A4: AF      		xor	a
E3A5: 2AB5ED  		ld	hl,(scratch2)	;set our track pointer also.
E3A8: 77      		ld	(hl),a
E3A9: 23      		inc	hl
E3AA: 77      		ld	(hl),a
E3AB: 2AB7ED  		ld	hl,(scratch3)	;and our sector pointer.
E3AE: 77      		ld	(hl),a
E3AF: 23      		inc	hl
E3B0: 77      		ld	(hl),a
E3B1: C9      		ret	
              	;
              	;   do the actual disk read and check the error return status.
              	;
E3B2: CD0AEF  	doread:	call	read
E3B5: C3BBE3  		jp	ioret
              	;
              	;   do the actual disk write and handle any bios error.
              	;
E3B8: CD0EEF  	dowrite:call	write
E3BB: B7      	ioret:	or	a
E3BC: C8      		ret	z		;return unless an error occured.
E3BD: 2109E0  		ld	hl,badsctr	;bad read/write on this sector.
E3C0: C34AE3  		jp	jumphl
              	;
              	;   routine to select the track and sector that the desired
              	; block number falls in.
              	;
E3C3: 2AEAED  	trksec:	ld	hl,(filepos)	;get position of last accessed file
E3C6: 0E02    		ld	c,2		;in directory and compute sector #.
E3C8: CDEAE4  		call	shiftr		;sector #=file-position/4.
E3CB: 22E5ED  		ld	(blknmbr),hl	;save this as the block number of interest.
E3CE: 22ECED  		ld	(cksumtbl),hl	;what's it doing here too?
              	;
              	;   if the sector number has already been set (blknmbr), enter
              	; at this point.
              	;
E3D1: 21E5ED  	trksec1:ld	hl,blknmbr
E3D4: 4E      		ld	c,(hl)		;move sector number into (bc).
E3D5: 23      		inc	hl
E3D6: 46      		ld	b,(hl)
E3D7: 2AB7ED  		ld	hl,(scratch3)	;get current sector number and
E3DA: 5E      		ld	e,(hl)		;move this into (de).
E3DB: 23      		inc	hl
E3DC: 56      		ld	d,(hl)
E3DD: 2AB5ED  		ld	hl,(scratch2)	;get current track number.
E3E0: 7E      		ld	a,(hl)		;and this into (hl).
E3E1: 23      		inc	hl
E3E2: 66      		ld	h,(hl)
E3E3: 6F      		ld	l,a
E3E4: 79      	trksec2:ld	a,c		;is desired sector before current one?
E3E5: 93      		sub	e
E3E6: 78      		ld	a,b
E3E7: 9A      		sbc	a,d
E3E8: D2FAE3  		jp	nc,trksec3
E3EB: E5      		push	hl		;yes, decrement sectors by one track.
E3EC: 2AC1ED  		ld	hl,(sectors)	;get sectors per track.
E3EF: 7B      		ld	a,e
E3F0: 95      		sub	l
E3F1: 5F      		ld	e,a
E3F2: 7A      		ld	a,d
E3F3: 9C      		sbc	a,h
E3F4: 57      		ld	d,a		;now we have backed up one full track.
E3F5: E1      		pop	hl
E3F6: 2B      		dec	hl		;adjust track counter.
E3F7: C3E4E3  		jp	trksec2
E3FA: E5      	trksec3:push	hl		;desired sector is after current one.
E3FB: 2AC1ED  		ld	hl,(sectors)	;get sectors per track.
E3FE: 19      		add	hl,de		;bump sector pointer to next track.
E3FF: DA0FE4  		jp	c,trksec4
E402: 79      		ld	a,c		;is desired sector now before current one?
E403: 95      		sub	l
E404: 78      		ld	a,b
E405: 9C      		sbc	a,h
E406: DA0FE4  		jp	c,trksec4
E409: EB      		ex	de,hl		;not yes, increment track counter
E40A: E1      		pop	hl		;and continue until it is.
E40B: 23      		inc	hl
E40C: C3FAE3  		jp	trksec3
              	;
              	;   here we have determined the track number that contains the
              	; desired sector.
              	;
E40F: E1      	trksec4:pop	hl		;get track number (hl).
E410: C5      		push	bc
E411: D5      		push	de
E412: E5      		push	hl
E413: EB      		ex	de,hl
E414: 2ACEED  		ld	hl,(offset)	;adjust for first track offset.
E417: 19      		add	hl,de
E418: 44      		ld	b,h
E419: 4D      		ld	c,l
E41A: CDFCEE  		call	settrk		;select this track.
E41D: D1      		pop	de		;reset current track pointer.
E41E: 2AB5ED  		ld	hl,(scratch2)
E421: 73      		ld	(hl),e
E422: 23      		inc	hl
E423: 72      		ld	(hl),d
E424: D1      		pop	de
E425: 2AB7ED  		ld	hl,(scratch3)	;reset the first sector on this track.
E428: 73      		ld	(hl),e
E429: 23      		inc	hl
E42A: 72      		ld	(hl),d
E42B: C1      		pop	bc
E42C: 79      		ld	a,c		;now subtract the desired one.
E42D: 93      		sub	e		;to make it relative (1-# sectors/track).
E42E: 4F      		ld	c,a
E42F: 78      		ld	a,b
E430: 9A      		sbc	a,d
E431: 47      		ld	b,a
E432: 2AD0ED  		ld	hl,(xlate)	;translate this sector according to this table.
E435: EB      		ex	de,hl
E436: CD15EF  		call	sectrn		;let the bios translate it.
E439: 4D      		ld	c,l
E43A: 44      		ld	b,h
E43B: C300EF  		jp	setsec		;and select it.
              	;
              	;   compute block number from record number (savnrec) and
              	; extent number (savext).
              	;
E43E: 21C3ED  	getblock: ld	hl,blkshft	;get logical to physical conversion.
E441: 4E      		ld	c,(hl)		;note that this is base 2 log of ratio.
E442: 3AE3ED  		ld	a,(savnrec)	;get record number.
E445: B7      	getblk1:or	a		;compute (a)=(a)/2^blkshft.
E446: 1F      		rra	
E447: 0D      		dec	c
E448: C245E4  		jp	nz,getblk1
E44B: 47      		ld	b,a		;save result in (b).
E44C: 3E08    		ld	a,8
E44E: 96      		sub	(hl)
E44F: 4F      		ld	c,a		;compute (c)=8-blkshft.
E450: 3AE2ED  		ld	a,(savext)
E453: 0D      	getblk2:dec	c		;compute (a)=savext*2^(8-blkshft).
E454: CA5CE4  		jp	z,getblk3
E457: B7      		or	a
E458: 17      		rla	
E459: C353E4  		jp	getblk2
E45C: 80      	getblk3:add	a,b
E45D: C9      		ret	
              	;
              	;   routine to extract the (bc) block byte from the fcb pointed
              	; to by (params). if this is a big-disk, then these are 16 bit
              	; block numbers, else they are 8 bit numbers.
              	; number is returned in (hl).
              	;
E45E: 2A43E3  	extblk:	ld	hl,(params)	;get fcb address.
E461: 111000  		ld	de,16		;block numbers start 16 bytes into fcb.
E464: 19      		add	hl,de
E465: 09      		add	hl,bc
E466: 3ADDED  		ld	a,(bigdisk)	;are we using a big-disk?
E469: B7      		or	a
E46A: CA71E4  		jp	z,extblk1
E46D: 6E      		ld	l,(hl)		;no, extract an 8 bit number from the fcb.
E46E: 2600    		ld	h,0
E470: C9      		ret	
E471: 09      	extblk1:add	hl,bc		;yes, extract a 16 bit number.
E472: 5E      		ld	e,(hl)
E473: 23      		inc	hl
E474: 56      		ld	d,(hl)
E475: EB      		ex	de,hl		;return in (hl).
E476: C9      		ret	
              	;
              	;   compute block number.
              	;
E477: CD3EE4  	comblk:	call	getblock
E47A: 4F      		ld	c,a
E47B: 0600    		ld	b,0
E47D: CD5EE4  		call	extblk
E480: 22E5ED  		ld	(blknmbr),hl
E483: C9      		ret	
              	;
              	;   check for a zero block number (unused).
              	;
E484: 2AE5ED  	chkblk:	ld	hl,(blknmbr)
E487: 7D      		ld	a,l		;is it zero?
E488: B4      		or	h
E489: C9      		ret	
              	;
              	;   adjust physical block (blknmbr) and convert to logical
              	; sector (logsect). this is the starting sector of this block.
              	; the actual sector of interest is then added to this and the
              	; resulting sector number is stored back in (blknmbr). this
              	; will still have to be adjusted for the track number.
              	;
E48A: 3AC3ED  	logical:ld	a,(blkshft)	;get log2(physical/logical sectors).
E48D: 2AE5ED  		ld	hl,(blknmbr)	;get physical sector desired.
E490: 29      	logicl1:add	hl,hl		;compute logical sector number.
E491: 3D      		dec	a		;note logical sectors are 128 bytes long.
E492: C290E4  		jp	nz,logicl1
E495: 22E7ED  		ld	(logsect),hl	;save logical sector.
E498: 3AC4ED  		ld	a,(blkmask)	;get block mask.
E49B: 4F      		ld	c,a
E49C: 3AE3ED  		ld	a,(savnrec)	;get next sector to access.
E49F: A1      		and	c		;extract the relative position within physical block.
E4A0: B5      		or	l		;and add it too logical sector.
E4A1: 6F      		ld	l,a
E4A2: 22E5ED  		ld	(blknmbr),hl	;and store.
E4A5: C9      		ret	
              	;
              	;   set (hl) to point to extent byte in fcb.
              	;
E4A6: 2A43E3  	setext:	ld	hl,(params)
E4A9: 110C00  		ld	de,12		;it is the twelth byte.
E4AC: 19      		add	hl,de
E4AD: C9      		ret	
              	;
              	;   set (hl) to point to record count byte in fcb and (de) to
              	; next record number byte.
              	;
E4AE: 2A43E3  	sethlde:ld	hl,(params)
E4B1: 110F00  		ld	de,15		;record count byte (#15).
E4B4: 19      		add	hl,de
E4B5: EB      		ex	de,hl
E4B6: 211100  		ld	hl,17		;next record number (#32).
E4B9: 19      		add	hl,de
E4BA: C9      		ret	
              	;
              	;   save current file data from fcb.
              	;
E4BB: CDAEE4  	strdata:call	sethlde
E4BE: 7E      		ld	a,(hl)		;get and store record count byte.
E4BF: 32E3ED  		ld	(savnrec),a
E4C2: EB      		ex	de,hl
E4C3: 7E      		ld	a,(hl)		;get and store next record number byte.
E4C4: 32E1ED  		ld	(savnxt),a
E4C7: CDA6E4  		call	setext		;point to extent byte.
E4CA: 3AC5ED  		ld	a,(extmask)	;get extent mask.
E4CD: A6      		and	(hl)
E4CE: 32E2ED  		ld	(savext),a	;and save extent here.
E4D1: C9      		ret	
              	;
              	;   set the next record to access. if (mode) is set to 2, then
              	; the last record byte (savnrec) has the correct number to access.
              	; for sequential access, (mode) will be equal to 1.
              	;
E4D2: CDAEE4  	setnrec:call	sethlde
E4D5: 3AD5ED  		ld	a,(mode)	;get sequential flag (=1).
E4D8: FE02    		cp	2		;a 2 indicates that no adder is needed.
E4DA: C2DEE4  		jp	nz,stnrec1
E4DD: AF      		xor	a		;clear adder (random access?).
E4DE: 4F      	stnrec1:ld	c,a
E4DF: 3AE3ED  		ld	a,(savnrec)	;get last record number.
E4E2: 81      		add	a,c		;increment record count.
E4E3: 77      		ld	(hl),a		;and set fcb's next record byte.
E4E4: EB      		ex	de,hl
E4E5: 3AE1ED  		ld	a,(savnxt)	;get next record byte from storage.
E4E8: 77      		ld	(hl),a		;and put this into fcb as number of records used.
E4E9: C9      		ret	
              	;
              	;   shift (hl) right (c) bits.
              	;
E4EA: 0C      	shiftr:	inc	c
E4EB: 0D      	shiftr1:dec	c
E4EC: C8      		ret	z
E4ED: 7C      		ld	a,h
E4EE: B7      		or	a
E4EF: 1F      		rra	
E4F0: 67      		ld	h,a
E4F1: 7D      		ld	a,l
E4F2: 1F      		rra	
E4F3: 6F      		ld	l,a
E4F4: C3EBE4  		jp	shiftr1
              	;
              	;   compute the check-sum for the directory buffer. return
              	; integer sum in (a).
              	;
E4F7: 0E80    	checksum: ld	c,128		;length of buffer.
E4F9: 2AB9ED  		ld	hl,(dirbuf)	;get its location.
E4FC: AF      		xor	a		;clear summation byte.
E4FD: 86      	chksum1:add	a,(hl)		;and compute sum ignoring carries.
E4FE: 23      		inc	hl
E4FF: 0D      		dec	c
E500: C2FDE4  		jp	nz,chksum1
E503: C9      		ret	
              	;
              	;   shift (hl) left (c) bits.
              	;
E504: 0C      	shiftl:	inc	c
E505: 0D      	shiftl1:dec	c
E506: C8      		ret	z
E507: 29      		add	hl,hl		;shift left 1 bit.
E508: C305E5  		jp	shiftl1
              	;
              	;   routine to set a bit in a 16 bit value contained in (bc).
              	; the bit set depends on the current drive selection.
              	;
E50B: C5      	setbit:	push	bc		;save 16 bit word.
E50C: 3A42E3  		ld	a,(active)	;get active drive.
E50F: 4F      		ld	c,a
E510: 210100  		ld	hl,1
E513: CD04E5  		call	shiftl		;shift bit 0 into place.
E516: C1      		pop	bc		;now 'or' this with the original word.
E517: 79      		ld	a,c
E518: B5      		or	l
E519: 6F      		ld	l,a		;low byte done, do high byte.
E51A: 78      		ld	a,b
E51B: B4      		or	h
E51C: 67      		ld	h,a
E51D: C9      		ret	
              	;
              	;   extract the write protect status bit for the current drive.
              	; the result is returned in (a), bit 0.
              	;
E51E: 2AADED  	getwprt:ld	hl,(wrtprt)	;get status bytes.
E521: 3A42E3  		ld	a,(active)	;which drive is current?
E524: 4F      		ld	c,a
E525: CDEAE4  		call	shiftr		;shift status such that bit 0 is the
E528: 7D      		ld	a,l		;one of interest for this drive.
E529: E601    		and	01h		;and isolate it.
E52B: C9      		ret	
              	;
              	;   function to write protect the current disk.
              	;
E52C: 21ADED  	wrtprtd:ld	hl,wrtprt	;point to status word.
E52F: 4E      		ld	c,(hl)		;set (bc) equal to the status.
E530: 23      		inc	hl
E531: 46      		ld	b,(hl)
E532: CD0BE5  		call	setbit		;and set this bit according to current drive.
E535: 22ADED  		ld	(wrtprt),hl	;then save.
E538: 2AC8ED  		ld	hl,(dirsize)	;now save directory size limit.
E53B: 23      		inc	hl		;remember the last one.
E53C: EB      		ex	de,hl
E53D: 2AB3ED  		ld	hl,(scratch1)	;and store it here.
E540: 73      		ld	(hl),e		;put low byte.
E541: 23      		inc	hl
E542: 72      		ld	(hl),d		;then high byte.
E543: C9      		ret	
              	;
              	;   check for a read only file.
              	;
E544: CD5EE5  	chkrofl:call	fcb2hl		;set (hl) to file entry in directory buffer.
E547: 110900  	ckrof1:	ld	de,9		;look at bit 7 of the ninth byte.
E54A: 19      		add	hl,de
E54B: 7E      		ld	a,(hl)
E54C: 17      		rla	
E54D: D0      		ret	nc		;return if ok.
E54E: 210FE0  		ld	hl,rofile	;else, print error message and terminate.
E551: C34AE3  		jp	jumphl
              	;
              	;   check the write protect status of the active disk.
              	;
E554: CD1EE5  	chkwprt:call	getwprt
E557: C8      		ret	z		;return if ok.
E558: 210DE0  		ld	hl,rodisk	;else print message and terminate.
E55B: C34AE3  		jp	jumphl
              	;
              	;   routine to set (hl) pointing to the proper entry in the
              	; directory buffer.
              	;
E55E: 2AB9ED  	fcb2hl:	ld	hl,(dirbuf)	;get address of buffer.
E561: 3AE9ED  		ld	a,(fcbpos)	;relative position of file.
              	;
              	;   routine to add (a) to (hl).
              	;
E564: 85      	adda2hl:add	a,l
E565: 6F      		ld	l,a
E566: D0      		ret	nc
E567: 24      		inc	h		;take care of any carry.
E568: C9      		ret	
              	;
              	;   routine to get the 's2' byte from the fcb supplied in
              	; the initial parameter specification.
              	;
E569: 2A43E3  	gets2:	ld	hl,(params)	;get address of fcb.
E56C: 110E00  		ld	de,14		;relative position of 's2'.
E56F: 19      		add	hl,de
E570: 7E      		ld	a,(hl)		;extract this byte.
E571: C9      		ret	
              	;
              	;   clear the 's2' byte in the fcb.
              	;
E572: CD69E5  	clears2:call	gets2		;this sets (hl) pointing to it.
E575: 3600    		ld	(hl),0		;now clear it.
E577: C9      		ret	
              	;
              	;   set bit 7 in the 's2' byte of the fcb.
              	;
E578: CD69E5  	sets2b7:call	gets2		;get the byte.
E57B: F680    		or	80h		;and set bit 7.
E57D: 77      		ld	(hl),a		;then store.
E57E: C9      		ret	
              	;
              	;   compare (filepos) with (scratch1) and set flags based on
              	; the difference. this checks to see if there are more file
              	; names in the directory. we are at (filepos) and there are
              	; (scratch1) of them to check.
              	;
E57F: 2AEAED  	morefls:ld	hl,(filepos)	;we are here.
E582: EB      		ex	de,hl
E583: 2AB3ED  		ld	hl,(scratch1)	;and don't go past here.
E586: 7B      		ld	a,e		;compute difference but don't keep.
E587: 96      		sub	(hl)
E588: 23      		inc	hl
E589: 7A      		ld	a,d
E58A: 9E      		sbc	a,(hl)		;set carry if no more names.
E58B: C9      		ret	
              	;
              	;   call this routine to prevent (scratch1) from being greater
              	; than (filepos).
              	;
E58C: CD7FE5  	chknmbr:call	morefls		;scratch1 too big?
E58F: D8      		ret	c
E590: 13      		inc	de		;yes, reset it to (filepos).
E591: 72      		ld	(hl),d
E592: 2B      		dec	hl
E593: 73      		ld	(hl),e
E594: C9      		ret	
              	;
              	;   compute (hl)=(de)-(hl)
              	;
E595: 7B      	subhl:	ld	a,e		;compute difference.
E596: 95      		sub	l
E597: 6F      		ld	l,a		;store low byte.
E598: 7A      		ld	a,d
E599: 9C      		sbc	a,h
E59A: 67      		ld	h,a		;and then high byte.
E59B: C9      		ret	
              	;
              	;   set the directory checksum byte.
              	;
E59C: 0EFF    	setdir:	ld	c,0ffh
              	;
              	;   routine to set or compare the directory checksum byte. if
              	; (c)=0ffh, then this will set the checksum byte. else the byte
              	; will be checked. if the check fails (the disk has been changed),
              	; then this disk will be write protected.
              	;
E59E: 2AECED  	checkdir: ld	hl,(cksumtbl)
E5A1: EB      		ex	de,hl
E5A2: 2ACCED  		ld	hl,(alloc1)
E5A5: CD95E5  		call	subhl
E5A8: D0      		ret	nc		;ok if (cksumtbl) > (alloc1), so return.
E5A9: C5      		push	bc
E5AA: CDF7E4  		call	checksum	;else compute checksum.
E5AD: 2ABDED  		ld	hl,(chkvect)	;get address of checksum table.
E5B0: EB      		ex	de,hl
E5B1: 2AECED  		ld	hl,(cksumtbl)
E5B4: 19      		add	hl,de		;set (hl) to point to byte for this drive.
E5B5: C1      		pop	bc
E5B6: 0C      		inc	c		;set or check ?
E5B7: CAC4E5  		jp	z,chkdir1
E5BA: BE      		cp	(hl)		;check them.
E5BB: C8      		ret	z		;return if they are the same.
E5BC: CD7FE5  		call	morefls		;not the same, do we care?
E5BF: D0      		ret	nc
E5C0: CD2CE5  		call	wrtprtd		;yes, mark this as write protected.
E5C3: C9      		ret	
E5C4: 77      	chkdir1:ld	(hl),a		;just set the byte.
E5C5: C9      		ret	
              	;
              	;   do a write to the directory of the current disk.
              	;
E5C6: CD9CE5  	dirwrite: call	setdir		;set checksum byte.
E5C9: CDE0E5  		call	dirdma		;set directory dma address.
E5CC: 0E01    		ld	c,1		;tell the bios to actually write.
E5CE: CDB8E3  		call	dowrite		;then do the write.
E5D1: C3DAE5  		jp	defdma
              	;
              	;   read from the directory.
              	;
E5D4: CDE0E5  	dirread:call	dirdma		;set the directory dma address.
E5D7: CDB2E3  		call	doread		;and read it.
              	;
              	;   routine to set the dma address to the users choice.
              	;
E5DA: 21B1ED  	defdma:	ld	hl,userdma	;reset the default dma address and return.
E5DD: C3E3E5  		jp	dirdma1
              	;
              	;   routine to set the dma address for directory work.
              	;
E5E0: 21B9ED  	dirdma:	ld	hl,dirbuf
              	;
              	;   set the dma address. on entry, (hl) points to
              	; word containing the desired dma address.
              	;
E5E3: 4E      	dirdma1:ld	c,(hl)
E5E4: 23      		inc	hl
E5E5: 46      		ld	b,(hl)		;setup (bc) and go to the bios to set it.
E5E6: C304EF  		jp	setdma
              	;
              	;   move the directory buffer into user's dma space.
              	;
E5E9: 2AB9ED  	movedir:ld	hl,(dirbuf)	;buffer is located here, and
E5EC: EB      		ex	de,hl
E5ED: 2AB1ED  		ld	hl,(userdma)	; put it here.
E5F0: 0E80    		ld	c,128		;this is its length.
E5F2: C34FE3  		jp	de2hl		;move it now and return.
              	;
              	;   check (filepos) and set the zero flag if it equals 0ffffh.
              	;
E5F5: 21EAED  	ckfilpos: ld	hl,filepos
E5F8: 7E      		ld	a,(hl)
E5F9: 23      		inc	hl
E5FA: BE      		cp	(hl)		;are both bytes the same?
E5FB: C0      		ret	nz
E5FC: 3C      		inc	a		;yes, but are they each 0ffh?
E5FD: C9      		ret	
              	;
              	;   set location (filepos) to 0ffffh.
              	;
E5FE: 21FFFF  	stfilpos: ld	hl,0ffffh
E601: 22EAED  		ld	(filepos),hl
E604: C9      		ret	
              	;
              	;   move on to the next file position within the current
              	; directory buffer. if no more exist, set pointer to 0ffffh
              	; and the calling routine will check for this. enter with (c)
              	; equal to 0ffh to cause the checksum byte to be set, else we
              	; will check this disk and set write protect if checksums are
              	; not the same (applies only if another directory sector must
              	; be read).
              	;
E605: 2AC8ED  	nxentry:ld	hl,(dirsize)	;get directory entry size limit.
E608: EB      		ex	de,hl
E609: 2AEAED  		ld	hl,(filepos)	;get current count.
E60C: 23      		inc	hl		;go on to the next one.
E60D: 22EAED  		ld	(filepos),hl
E610: CD95E5  		call	subhl		;(hl)=(dirsize)-(filepos)
E613: D219E6  		jp	nc,nxent1	;is there more room left?
E616: C3FEE5  		jp	stfilpos	;no. set this flag and return.
E619: 3AEAED  	nxent1:	ld	a,(filepos)	;get file position within directory.
E61C: E603    		and	03h		;only look within this sector (only 4 entries fit).
E61E: 0605    		ld	b,5		;convert to relative position (32 bytes each).
E620: 87      	nxent2:	add	a,a		;note that this is not efficient code.
E621: 05      		dec	b		;5 'add a's would be better.
E622: C220E6  		jp	nz,nxent2
E625: 32E9ED  		ld	(fcbpos),a	;save it as position of fcb.
E628: B7      		or	a
E629: C0      		ret	nz		;return if we are within buffer.
E62A: C5      		push	bc
E62B: CDC3E3  		call	trksec		;we need the next directory sector.
E62E: CDD4E5  		call	dirread
E631: C1      		pop	bc
E632: C39EE5  		jp	checkdir
              	;
              	;   routine to to get a bit from the disk space allocation
              	; map. it is returned in (a), bit position 0. on entry to here,
              	; set (bc) to the block number on the disk to check.
              	; on return, (d) will contain the original bit position for
              	; this block number and (hl) will point to the address for it.
              	;
E635: 79      	ckbitmap: ld	a,c		;determine bit number of interest.
E636: E607    		and	07h		;compute (d)=(e)=(c and 7)+1.
E638: 3C      		inc	a
E639: 5F      		ld	e,a		;save particular bit number.
E63A: 57      		ld	d,a
              	;
              	;   compute (bc)=(bc)/8.
              	;
E63B: 79      		ld	a,c
E63C: 0F      		rrca			;now shift right 3 bits.
E63D: 0F      		rrca	
E63E: 0F      		rrca	
E63F: E61F    		and	1fh		;and clear bits 7,6,5.
E641: 4F      		ld	c,a
E642: 78      		ld	a,b
E643: 87      		add	a,a		;now shift (b) into bits 7,6,5.
E644: 87      		add	a,a
E645: 87      		add	a,a
E646: 87      		add	a,a
E647: 87      		add	a,a
E648: B1      		or	c		;and add in (c).
E649: 4F      		ld	c,a		;ok, (c) ha been completed.
E64A: 78      		ld	a,b		;is there a better way of doing this?
E64B: 0F      		rrca	
E64C: 0F      		rrca	
E64D: 0F      		rrca	
E64E: E61F    		and	1fh
E650: 47      		ld	b,a		;and now (b) is completed.
              	;
              	;   use this as an offset into the disk space allocation
              	; table.
              	;
E651: 2ABFED  		ld	hl,(alocvect)
E654: 09      		add	hl,bc
E655: 7E      		ld	a,(hl)		;now get correct byte.
E656: 07      	ckbmap1:rlca			;get correct bit into position 0.
E657: 1D      		dec	e
E658: C256E6  		jp	nz,ckbmap1
E65B: C9      		ret	
              	;
              	;   set or clear the bit map such that block number (bc) will be marked
              	; as used. on entry, if (e)=0 then this bit will be cleared, if it equals
              	; 1 then it will be set (don't use anyother values).
              	;
E65C: D5      	stbitmap: push	de
E65D: CD35E6  		call	ckbitmap	;get the byte of interest.
E660: E6FE    		and	0feh		;clear the affected bit.
E662: C1      		pop	bc
E663: B1      		or	c		;and now set it acording to (c).
              	;
              	;  entry to restore the original bit position and then store
              	; in table. (a) contains the value, (d) contains the bit
              	; position (1-8), and (hl) points to the address within the
              	; space allocation table for this byte.
              	;
E664: 0F      	stbmap1:rrca			;restore original bit position.
E665: 15      		dec	d
E666: C264E6  		jp	nz,stbmap1
E669: 77      		ld	(hl),a		;and stor byte in table.
E66A: C9      		ret	
              	;
              	;   set/clear space used bits in allocation map for this file.
              	; on entry, (c)=1 to set the map and (c)=0 to clear it.
              	;
E66B: CD5EE5  	setfile:call	fcb2hl		;get address of fcb
E66E: 111000  		ld	de,16
E671: 19      		add	hl,de		;get to block number bytes.
E672: C5      		push	bc
E673: 0E11    		ld	c,17		;check all 17 bytes (max) of table.
E675: D1      	setfl1:	pop	de
E676: 0D      		dec	c		;done all bytes yet?
E677: C8      		ret	z
E678: D5      		push	de
E679: 3ADDED  		ld	a,(bigdisk)	;check disk size for 16 bit block numbers.
E67C: B7      		or	a
E67D: CA88E6  		jp	z,setfl2
E680: C5      		push	bc		;only 8 bit numbers. set (bc) to this one.
E681: E5      		push	hl
E682: 4E      		ld	c,(hl)		;get low byte from table, always
E683: 0600    		ld	b,0		;set high byte to zero.
E685: C38EE6  		jp	setfl3
E688: 0D      	setfl2:	dec	c		;for 16 bit block numbers, adjust counter.
E689: C5      		push	bc
E68A: 4E      		ld	c,(hl)		;now get both the low and high bytes.
E68B: 23      		inc	hl
E68C: 46      		ld	b,(hl)
E68D: E5      		push	hl
E68E: 79      	setfl3:	ld	a,c		;block used?
E68F: B0      		or	b
E690: CA9DE6  		jp	z,setfl4
E693: 2AC6ED  		ld	hl,(dsksize)	;is this block number within the
E696: 7D      		ld	a,l		;space on the disk?
E697: 91      		sub	c
E698: 7C      		ld	a,h
E699: 98      		sbc	a,b
E69A: D45CE6  		call	nc,stbitmap	;yes, set the proper bit.
E69D: E1      	setfl4:	pop	hl		;point to next block number in fcb.
E69E: 23      		inc	hl
E69F: C1      		pop	bc
E6A0: C375E6  		jp	setfl1
              	;
              	;   construct the space used allocation bit map for the active
              	; drive. if a file name starts with '$' and it is under the
              	; current user number, then (status) is set to minus 1. otherwise
              	; it is not set at all.
              	;
E6A3: 2AC6ED  	bitmap:	ld	hl,(dsksize)	;compute size of allocation table.
E6A6: 0E03    		ld	c,3
E6A8: CDEAE4  		call	shiftr		;(hl)=(hl)/8.
E6AB: 23      		inc	hl		;at lease 1 byte.
E6AC: 44      		ld	b,h
E6AD: 4D      		ld	c,l		;set (bc) to the allocation table length.
              	;
              	;   initialize the bitmap for this drive. right now, the first
              	; two bytes are specified by the disk parameter block. however
              	; a patch could be entered here if it were necessary to setup
              	; this table in a special mannor. for example, the bios could
              	; determine locations of 'bad blocks' and set them as already
              	; 'used' in the map.
              	;
E6AE: 2ABFED  		ld	hl,(alocvect)	;now zero out the table now.
E6B1: 3600    	bitmap1:ld	(hl),0
E6B3: 23      		inc	hl
E6B4: 0B      		dec	bc
E6B5: 78      		ld	a,b
E6B6: B1      		or	c
E6B7: C2B1E6  		jp	nz,bitmap1
E6BA: 2ACAED  		ld	hl,(alloc0)	;get initial space used by directory.
E6BD: EB      		ex	de,hl
E6BE: 2ABFED  		ld	hl,(alocvect)	;and put this into map.
E6C1: 73      		ld	(hl),e
E6C2: 23      		inc	hl
E6C3: 72      		ld	(hl),d
              	;
              	;   end of initialization portion.
              	;
E6C4: CDA1E3  		call	homedrv		;now home the drive.
E6C7: 2AB3ED  		ld	hl,(scratch1)
E6CA: 3603    		ld	(hl),3		;force next directory request to read
E6CC: 23      		inc	hl		;in a sector.
E6CD: 3600    		ld	(hl),0
E6CF: CDFEE5  		call	stfilpos	;clear initial file position also.
E6D2: 0EFF    	bitmap2:ld	c,0ffh		;read next file name in directory
E6D4: CD05E6  		call	nxentry		;and set checksum byte.
E6D7: CDF5E5  		call	ckfilpos	;is there another file?
E6DA: C8      		ret	z
E6DB: CD5EE5  		call	fcb2hl		;yes, get its address.
E6DE: 3EE5    		ld	a,0e5h
E6E0: BE      		cp	(hl)		;empty file entry?
E6E1: CAD2E6  		jp	z,bitmap2
E6E4: 3A41E3  		ld	a,(userno)	;no, correct user number?
E6E7: BE      		cp	(hl)
E6E8: C2F6E6  		jp	nz,bitmap3
E6EB: 23      		inc	hl
E6EC: 7E      		ld	a,(hl)		;yes, does name start with a '$'?
E6ED: D624    		sub	'$'
E6EF: C2F6E6  		jp	nz,bitmap3
E6F2: 3D      		dec	a		;yes, set atatus to minus one.
E6F3: 3245E3  		ld	(status),a
E6F6: 0E01    	bitmap3:ld	c,1		;now set this file's space as used in bit map.
E6F8: CD6BE6  		call	setfile
E6FB: CD8CE5  		call	chknmbr		;keep (scratch1) in bounds.
E6FE: C3D2E6  		jp	bitmap2
              	;
              	;   set the status (status) and return.
              	;
E701: 3AD4ED  	ststatus: ld	a,(fndstat)
E704: C301E3  		jp	setstat
              	;
              	;   check extents in (a) and (c). set the zero flag if they
              	; are the same. the number of 16k chunks of disk space that
              	; the directory extent covers is expressad is (extmask+1).
              	; no registers are modified.
              	;
E707: C5      	samext:	push	bc
E708: F5      		push	af
E709: 3AC5ED  		ld	a,(extmask)	;get extent mask and use it to
E70C: 2F      		cpl			;to compare both extent numbers.
E70D: 47      		ld	b,a		;save resulting mask here.
E70E: 79      		ld	a,c		;mask first extent and save in (c).
E70F: A0      		and	b
E710: 4F      		ld	c,a
E711: F1      		pop	af		;now mask second extent and compare
E712: A0      		and	b		;with the first one.
E713: 91      		sub	c
E714: E61F    		and	1fh		;(* only check buts 0-4 *)
E716: C1      		pop	bc		;the zero flag is set if they are the same.
E717: C9      		ret			;restore (bc) and return.
              	;
              	;   search for the first occurence of a file name. on entry,
              	; register (c) should contain the number of bytes of the fcb
              	; that must match.
              	;
E718: 3EFF    	findfst:ld	a,0ffh
E71A: 32D4ED  		ld	(fndstat),a
E71D: 21D8ED  		ld	hl,counter	;save character count.
E720: 71      		ld	(hl),c
E721: 2A43E3  		ld	hl,(params)	;get filename to match.
E724: 22D9ED  		ld	(savefcb),hl	;and save.
E727: CDFEE5  		call	stfilpos	;clear initial file position (set to 0ffffh).
E72A: CDA1E3  		call	homedrv		;home the drive.
              	;
              	;   entry to locate the next occurence of a filename within the
              	; directory. the disk is not expected to have been changed. if
              	; it was, then it will be write protected.
              	;
E72D: 0E00    	findnxt:ld	c,0		;write protect the disk if changed.
E72F: CD05E6  		call	nxentry		;get next filename entry in directory.
E732: CDF5E5  		call	ckfilpos	;is file position = 0ffffh?
E735: CA94E7  		jp	z,fndnxt6	;yes, exit now then.
E738: 2AD9ED  		ld	hl,(savefcb)	;set (de) pointing to filename to match.
E73B: EB      		ex	de,hl
E73C: 1A      		ld	a,(de)
E73D: FEE5    		cp	0e5h		;empty directory entry?
E73F: CA4AE7  		jp	z,fndnxt1	;(* are we trying to reserect erased entries? *)
E742: D5      		push	de
E743: CD7FE5  		call	morefls		;more files in directory?
E746: D1      		pop	de
E747: D294E7  		jp	nc,fndnxt6	;no more. exit now.
E74A: CD5EE5  	fndnxt1:call	fcb2hl		;get address of this fcb in directory.
E74D: 3AD8ED  		ld	a,(counter)	;get number of bytes (characters) to check.
E750: 4F      		ld	c,a
E751: 0600    		ld	b,0		;initialize byte position counter.
E753: 79      	fndnxt2:ld	a,c		;are we done with the compare?
E754: B7      		or	a
E755: CA83E7  		jp	z,fndnxt5
E758: 1A      		ld	a,(de)		;no, check next byte.
E759: FE3F    		cp	'?'		;don't care about this character?
E75B: CA7CE7  		jp	z,fndnxt4
E75E: 78      		ld	a,b		;get bytes position in fcb.
E75F: FE0D    		cp	13		;don't care about the thirteenth byte either.
E761: CA7CE7  		jp	z,fndnxt4
E764: FE0C    		cp	12		;extent byte?
E766: 1A      		ld	a,(de)
E767: CA73E7  		jp	z,fndnxt3
E76A: 96      		sub	(hl)		;otherwise compare characters.
E76B: E67F    		and	7fh
E76D: C22DE7  		jp	nz,findnxt	;not the same, check next entry.
E770: C37CE7  		jp	fndnxt4		;so far so good, keep checking.
E773: C5      	fndnxt3:push	bc		;check the extent byte here.
E774: 4E      		ld	c,(hl)
E775: CD07E7  		call	samext
E778: C1      		pop	bc
E779: C22DE7  		jp	nz,findnxt	;not the same, look some more.
              	;
              	;   so far the names compare. bump pointers to the next byte
              	; and continue until all (c) characters have been checked.
              	;
E77C: 13      	fndnxt4:inc	de		;bump pointers.
E77D: 23      		inc	hl
E77E: 04      		inc	b
E77F: 0D      		dec	c		;adjust character counter.
E780: C353E7  		jp	fndnxt2
E783: 3AEAED  	fndnxt5:ld	a,(filepos)	;return the position of this entry.
E786: E603    		and	03h
E788: 3245E3  		ld	(status),a
E78B: 21D4ED  		ld	hl,fndstat
E78E: 7E      		ld	a,(hl)
E78F: 17      		rla	
E790: D0      		ret	nc
E791: AF      		xor	a
E792: 77      		ld	(hl),a
E793: C9      		ret	
              	;
              	;   filename was not found. set appropriate status.
              	;
E794: CDFEE5  	fndnxt6:call	stfilpos	;set (filepos) to 0ffffh.
E797: 3EFF    		ld	a,0ffh		;say not located.
E799: C301E3  		jp	setstat
              	;
              	;   erase files from the directory. only the first byte of the
              	; fcb will be affected. it is set to (e5).
              	;
E79C: CD54E5  	erafile:call	chkwprt		;is disk write protected?
E79F: 0E0C    		ld	c,12		;only compare file names.
E7A1: CD18E7  		call	findfst		;get first file name.
E7A4: CDF5E5  	erafil1:call	ckfilpos	;any found?
E7A7: C8      		ret	z		;nope, we must be done.
E7A8: CD44E5  		call	chkrofl		;is file read only?
E7AB: CD5EE5  		call	fcb2hl		;nope, get address of fcb and
E7AE: 36E5    		ld	(hl),0e5h	;set first byte to 'empty'.
E7B0: 0E00    		ld	c,0		;clear the space from the bit map.
E7B2: CD6BE6  		call	setfile
E7B5: CDC6E5  		call	dirwrite	;now write the directory sector back out.
E7B8: CD2DE7  		call	findnxt		;find the next file name.
E7BB: C3A4E7  		jp	erafil1		;and repeat process.
              	;
              	;   look through the space allocation map (bit map) for the
              	; next available block. start searching at block number (bc-1).
              	; the search procedure is to look for an empty block that is
              	; before the starting block. if not empty, look at a later
              	; block number. in this way, we return the closest empty block
              	; on either side of the 'target' block number. this will speed
              	; access on random devices. for serial devices, this should be
              	; changed to look in the forward direction first and then start
              	; at the front and search some more.
              	;
              	;   on return, (de)= block number that is empty and (hl) =0
              	; if no empry block was found.
              	;
E7BE: 50      	fndspace: ld	d,b		;set (de) as the block that is checked.
E7BF: 59      		ld	e,c
              	;
              	;   look before target block. registers (bc) are used as the lower
              	; pointer and (de) as the upper pointer.
              	;
E7C0: 79      	fndspa1:ld	a,c		;is block 0 specified?
E7C1: B0      		or	b
E7C2: CAD1E7  		jp	z,fndspa2
E7C5: 0B      		dec	bc		;nope, check previous block.
E7C6: D5      		push	de
E7C7: C5      		push	bc
E7C8: CD35E6  		call	ckbitmap
E7CB: 1F      		rra			;is this block empty?
E7CC: D2ECE7  		jp	nc,fndspa3	;yes. use this.
              	;
              	;   note that the above logic gets the first block that it finds
              	; that is empty. thus a file could be written 'backward' making
              	; it very slow to access. this could be changed to look for the
              	; first empty block and then continue until the start of this
              	; empty space is located and then used that starting block.
              	; this should help speed up access to some files especially on
              	; a well used disk with lots of fairly small 'holes'.
              	;
E7CF: C1      		pop	bc		;nope, check some more.
E7D0: D1      		pop	de
              	;
              	;   now look after target block.
              	;
E7D1: 2AC6ED  	fndspa2:ld	hl,(dsksize)	;is block (de) within disk limits?
E7D4: 7B      		ld	a,e
E7D5: 95      		sub	l
E7D6: 7A      		ld	a,d
E7D7: 9C      		sbc	a,h
E7D8: D2F4E7  		jp	nc,fndspa4
E7DB: 13      		inc	de		;yes, move on to next one.
E7DC: C5      		push	bc
E7DD: D5      		push	de
E7DE: 42      		ld	b,d
E7DF: 4B      		ld	c,e
E7E0: CD35E6  		call	ckbitmap	;check it.
E7E3: 1F      		rra			;empty?
E7E4: D2ECE7  		jp	nc,fndspa3
E7E7: D1      		pop	de		;nope, continue searching.
E7E8: C1      		pop	bc
E7E9: C3C0E7  		jp	fndspa1
              	;
              	;   empty block found. set it as used and return with (hl)
              	; pointing to it (true?).
              	;
E7EC: 17      	fndspa3:rla			;reset byte.
E7ED: 3C      		inc	a		;and set bit 0.
E7EE: CD64E6  		call	stbmap1		;update bit map.
E7F1: E1      		pop	hl		;set return registers.
E7F2: D1      		pop	de
E7F3: C9      		ret	
              	;
              	;   free block was not found. if (bc) is not zero, then we have
              	; not checked all of the disk space.
              	;
E7F4: 79      	fndspa4:ld	a,c
E7F5: B0      		or	b
E7F6: C2C0E7  		jp	nz,fndspa1
E7F9: 210000  		ld	hl,0		;set 'not found' status.
E7FC: C9      		ret	
              	;
              	;   move a complete fcb entry into the directory and write it.
              	;
E7FD: 0E00    	fcbset:	ld	c,0
E7FF: 1E20    		ld	e,32		;length of each entry.
              	;
              	;   move (e) bytes from the fcb pointed to by (params) into
              	; fcb in directory starting at relative byte (c). this updated
              	; directory buffer is then written to the disk.
              	;
E801: D5      	update:	push	de
E802: 0600    		ld	b,0		;set (bc) to relative byte position.
E804: 2A43E3  		ld	hl,(params)	;get address of fcb.
E807: 09      		add	hl,bc		;compute starting byte.
E808: EB      		ex	de,hl
E809: CD5EE5  		call	fcb2hl		;get address of fcb to update in directory.
E80C: C1      		pop	bc		;set (c) to number of bytes to change.
E80D: CD4FE3  		call	de2hl
E810: CDC3E3  	update1:call	trksec		;determine the track and sector affected.
E813: C3C6E5  		jp	dirwrite	;then write this sector out.
              	;
              	;   routine to change the name of all files on the disk with a
              	; specified name. the fcb contains the current name as the
              	; first 12 characters and the new name 16 bytes into the fcb.
              	;
E816: CD54E5  	chgnames: call	chkwprt		;check for a write protected disk.
E819: 0E0C    		ld	c,12		;match first 12 bytes of fcb only.
E81B: CD18E7  		call	findfst		;get first name.
E81E: 2A43E3  		ld	hl,(params)	;get address of fcb.
E821: 7E      		ld	a,(hl)		;get user number.
E822: 111000  		ld	de,16		;move over to desired name.
E825: 19      		add	hl,de
E826: 77      		ld	(hl),a		;keep same user number.
E827: CDF5E5  	chgnam1:call	ckfilpos	;any matching file found?
E82A: C8      		ret	z		;no, we must be done.
E82B: CD44E5  		call	chkrofl		;check for read only file.
E82E: 0E10    		ld	c,16		;start 16 bytes into fcb.
E830: 1E0C    		ld	e,12		;and update the first 12 bytes of directory.
E832: CD01E8  		call	update
E835: CD2DE7  		call	findnxt		;get te next file name.
E838: C327E8  		jp	chgnam1		;and continue.
              	;
              	;   update a files attributes. the procedure is to search for
              	; every file with the same name as shown in fcb (ignoring bit 7)
              	; and then to update it (which includes bit 7). no other changes
              	; are made.
              	;
E83B: 0E0C    	saveattr: ld	c,12		;match first 12 bytes.
E83D: CD18E7  		call	findfst		;look for first filename.
E840: CDF5E5  	savatr1:call	ckfilpos	;was one found?
E843: C8      		ret	z		;nope, we must be done.
E844: 0E00    		ld	c,0		;yes, update the first 12 bytes now.
E846: 1E0C    		ld	e,12
E848: CD01E8  		call	update		;update filename and write directory.
E84B: CD2DE7  		call	findnxt		;and get the next file.
E84E: C340E8  		jp	savatr1		;then continue until done.
              	;
              	;  open a file (name specified in fcb).
              	;
E851: 0E0F    	openit:	ld	c,15		;compare the first 15 bytes.
E853: CD18E7  		call	findfst		;get the first one in directory.
E856: CDF5E5  		call	ckfilpos	;any at all?
E859: C8      		ret	z
E85A: CDA6E4  	openit1:call	setext		;point to extent byte within users fcb.
E85D: 7E      		ld	a,(hl)		;and get it.
E85E: F5      		push	af		;save it and address.
E85F: E5      		push	hl
E860: CD5EE5  		call	fcb2hl		;point to fcb in directory.
E863: EB      		ex	de,hl
E864: 2A43E3  		ld	hl,(params)	;this is the users copy.
E867: 0E20    		ld	c,32		;move it into users space.
E869: D5      		push	de
E86A: CD4FE3  		call	de2hl
E86D: CD78E5  		call	sets2b7		;set bit 7 in 's2' byte (unmodified).
E870: D1      		pop	de		;now get the extent byte from this fcb.
E871: 210C00  		ld	hl,12
E874: 19      		add	hl,de
E875: 4E      		ld	c,(hl)		;into (c).
E876: 210F00  		ld	hl,15		;now get the record count byte into (b).
E879: 19      		add	hl,de
E87A: 46      		ld	b,(hl)
E87B: E1      		pop	hl		;keep the same extent as the user had originally.
E87C: F1      		pop	af
E87D: 77      		ld	(hl),a
E87E: 79      		ld	a,c		;is it the same as in the directory fcb?
E87F: BE      		cp	(hl)
E880: 78      		ld	a,b		;if yes, then use the same record count.
E881: CA8BE8  		jp	z,openit2
E884: 3E00    		ld	a,0		;if the user specified an extent greater than
E886: DA8BE8  		jp	c,openit2	;the one in the directory, then set record count to 0.
E889: 3E80    		ld	a,128		;otherwise set to maximum.
E88B: 2A43E3  	openit2:ld	hl,(params)	;set record count in users fcb to (a).
E88E: 110F00  		ld	de,15
E891: 19      		add	hl,de		;compute relative position.
E892: 77      		ld	(hl),a		;and set the record count.
E893: C9      		ret	
              	;
              	;   move two bytes from (de) to (hl) if (and only if) (hl)
              	; point to a zero value (16 bit).
              	;   return with zero flag set it (de) was moved. registers (de)
              	; and (hl) are not changed. however (a) is.
              	;
E894: 7E      	moveword: ld	a,(hl)		;check for a zero word.
E895: 23      		inc	hl
E896: B6      		or	(hl)		;both bytes zero?
E897: 2B      		dec	hl
E898: C0      		ret	nz		;nope, just return.
E899: 1A      		ld	a,(de)		;yes, move two bytes from (de) into
E89A: 77      		ld	(hl),a		;this zero space.
E89B: 13      		inc	de
E89C: 23      		inc	hl
E89D: 1A      		ld	a,(de)
E89E: 77      		ld	(hl),a
E89F: 1B      		dec	de		;don't disturb these registers.
E8A0: 2B      		dec	hl
E8A1: C9      		ret	
              	;
              	;   get here to close a file specified by (fcb).
              	;
E8A2: AF      	closeit:xor	a		;clear status and file position bytes.
E8A3: 3245E3  		ld	(status),a
E8A6: 32EAED  		ld	(filepos),a
E8A9: 32EBED  		ld	(filepos+1),a
E8AC: CD1EE5  		call	getwprt		;get write protect bit for this drive.
E8AF: C0      		ret	nz		;just return if it is set.
E8B0: CD69E5  		call	gets2		;else get the 's2' byte.
E8B3: E680    		and	80h		;and look at bit 7 (file unmodified?).
E8B5: C0      		ret	nz		;just return if set.
E8B6: 0E0F    		ld	c,15		;else look up this file in directory.
E8B8: CD18E7  		call	findfst
E8BB: CDF5E5  		call	ckfilpos	;was it found?
E8BE: C8      		ret	z		;just return if not.
E8BF: 011000  		ld	bc,16		;set (hl) pointing to records used section.
E8C2: CD5EE5  		call	fcb2hl
E8C5: 09      		add	hl,bc
E8C6: EB      		ex	de,hl
E8C7: 2A43E3  		ld	hl,(params)	;do the same for users specified fcb.
E8CA: 09      		add	hl,bc
E8CB: 0E10    		ld	c,16		;this many bytes are present in this extent.
E8CD: 3ADDED  	closeit1: ld	a,(bigdisk)	;8 or 16 bit record numbers?
E8D0: B7      		or	a
E8D1: CAE8E8  		jp	z,closeit4
E8D4: 7E      		ld	a,(hl)		;just 8 bit. get one from users fcb.
E8D5: B7      		or	a
E8D6: 1A      		ld	a,(de)		;now get one from directory fcb.
E8D7: C2DBE8  		jp	nz,closeit2
E8DA: 77      		ld	(hl),a		;users byte was zero. update from directory.
E8DB: B7      	closeit2: or	a
E8DC: C2E1E8  		jp	nz,closeit3
E8DF: 7E      		ld	a,(hl)		;directories byte was zero, update from users fcb.
E8E0: 12      		ld	(de),a
E8E1: BE      	closeit3: cp	(hl)		;if neither one of these bytes were zero,
E8E2: C21FE9  		jp	nz,closeit7	;then close error if they are not the same.
E8E5: C3FDE8  		jp	closeit5	;ok so far, get to next byte in fcbs.
E8E8: CD94E8  	closeit4: call	moveword	;update users fcb if it is zero.
E8EB: EB      		ex	de,hl
E8EC: CD94E8  		call	moveword	;update directories fcb if it is zero.
E8EF: EB      		ex	de,hl
E8F0: 1A      		ld	a,(de)		;if these two values are no different,
E8F1: BE      		cp	(hl)		;then a close error occured.
E8F2: C21FE9  		jp	nz,closeit7
E8F5: 13      		inc	de		;check second byte.
E8F6: 23      		inc	hl
E8F7: 1A      		ld	a,(de)
E8F8: BE      		cp	(hl)
E8F9: C21FE9  		jp	nz,closeit7
E8FC: 0D      		dec	c		;remember 16 bit values.
E8FD: 13      	closeit5: inc	de		;bump to next item in table.
E8FE: 23      		inc	hl
E8FF: 0D      		dec	c		;there are 16 entries only.
E900: C2CDE8  		jp	nz,closeit1	;continue if more to do.
E903: 01ECFF  		ld	bc,0ffech	;backup 20 places (extent byte).
E906: 09      		add	hl,bc
E907: EB      		ex	de,hl
E908: 09      		add	hl,bc
E909: 1A      		ld	a,(de)
E90A: BE      		cp	(hl)		;directory's extent already greater than the
E90B: DA17E9  		jp	c,closeit6	;users extent?
E90E: 77      		ld	(hl),a		;no, update directory extent.
E90F: 010300  		ld	bc,3		;and update the record count byte in
E912: 09      		add	hl,bc		;directories fcb.
E913: EB      		ex	de,hl
E914: 09      		add	hl,bc
E915: 7E      		ld	a,(hl)		;get from user.
E916: 12      		ld	(de),a		;and put in directory.
E917: 3EFF    	closeit6: ld	a,0ffh		;set 'was open and is now closed' byte.
E919: 32D2ED  		ld	(closeflg),a
E91C: C310E8  		jp	update1		;update the directory now.
E91F: 2145E3  	closeit7: ld	hl,status	;set return status and then return.
E922: 35      		dec	(hl)
E923: C9      		ret	
              	;
              	;   routine to get the next empty space in the directory. it
              	; will then be cleared for use.
              	;
E924: CD54E5  	getempty: call	chkwprt		;make sure disk is not write protected.
E927: 2A43E3  		ld	hl,(params)	;save current parameters (fcb).
E92A: E5      		push	hl
E92B: 21ACED  		ld	hl,emptyfcb	;use special one for empty space.
E92E: 2243E3  		ld	(params),hl
E931: 0E01    		ld	c,1		;search for first empty spot in directory.
E933: CD18E7  		call	findfst		;(* only check first byte *)
E936: CDF5E5  		call	ckfilpos	;none?
E939: E1      		pop	hl
E93A: 2243E3  		ld	(params),hl	;restore original fcb address.
E93D: C8      		ret	z		;return if no more space.
E93E: EB      		ex	de,hl
E93F: 210F00  		ld	hl,15		;point to number of records for this file.
E942: 19      		add	hl,de
E943: 0E11    		ld	c,17		;and clear all of this space.
E945: AF      		xor	a
E946: 77      	getmt1:	ld	(hl),a
E947: 23      		inc	hl
E948: 0D      		dec	c
E949: C246E9  		jp	nz,getmt1
E94C: 210D00  		ld	hl,13		;clear the 's1' byte also.
E94F: 19      		add	hl,de
E950: 77      		ld	(hl),a
E951: CD8CE5  		call	chknmbr		;keep (scratch1) within bounds.
E954: CDFDE7  		call	fcbset		;write out this fcb entry to directory.
E957: C378E5  		jp	sets2b7		;set 's2' byte bit 7 (unmodified at present).
              	;
              	;   routine to close the current extent and open the next one
              	; for reading.
              	;
E95A: AF      	getnext:xor	a
E95B: 32D2ED  		ld	(closeflg),a	;clear close flag.
E95E: CDA2E8  		call	closeit		;close this extent.
E961: CDF5E5  		call	ckfilpos
E964: C8      		ret	z		;not there???
E965: 2A43E3  		ld	hl,(params)	;get extent byte.
E968: 010C00  		ld	bc,12
E96B: 09      		add	hl,bc
E96C: 7E      		ld	a,(hl)		;and increment it.
E96D: 3C      		inc	a
E96E: E61F    		and	1fh		;keep within range 0-31.
E970: 77      		ld	(hl),a
E971: CA83E9  		jp	z,gtnext1	;overflow?
E974: 47      		ld	b,a		;mask extent byte.
E975: 3AC5ED  		ld	a,(extmask)
E978: A0      		and	b
E979: 21D2ED  		ld	hl,closeflg	;check close flag (0ffh is ok).
E97C: A6      		and	(hl)
E97D: CA8EE9  		jp	z,gtnext2	;if zero, we must read in next extent.
E980: C3ACE9  		jp	gtnext3		;else, it is already in memory.
E983: 010200  	gtnext1:ld	bc,2		;point to the 's2' byte.
E986: 09      		add	hl,bc
E987: 34      		inc	(hl)		;and bump it.
E988: 7E      		ld	a,(hl)		;too many extents?
E989: E60F    		and	0fh
E98B: CAB6E9  		jp	z,gtnext5	;yes, set error code.
              	;
              	;   get here to open the next extent.
              	;
E98E: 0E0F    	gtnext2:ld	c,15		;set to check first 15 bytes of fcb.
E990: CD18E7  		call	findfst		;find the first one.
E993: CDF5E5  		call	ckfilpos	;none available?
E996: C2ACE9  		jp	nz,gtnext3
E999: 3AD3ED  		ld	a,(rdwrtflg)	;no extent present. can we open an empty one?
E99C: 3C      		inc	a		;0ffh means reading (so not possible).
E99D: CAB6E9  		jp	z,gtnext5	;or an error.
E9A0: CD24E9  		call	getempty	;we are writing, get an empty entry.
E9A3: CDF5E5  		call	ckfilpos	;none?
E9A6: CAB6E9  		jp	z,gtnext5	;error if true.
E9A9: C3AFE9  		jp	gtnext4		;else we are almost done.
E9AC: CD5AE8  	gtnext3:call	openit1		;open this extent.
E9AF: CDBBE4  	gtnext4:call	strdata		;move in updated data (rec #, extent #, etc.)
E9B2: AF      		xor	a		;clear status and return.
E9B3: C301E3  		jp	setstat
              	;
              	;   error in extending the file. too many extents were needed
              	; or not enough space on the disk.
              	;
E9B6: CD05E3  	gtnext5:call	ioerr1		;set error code, clear bit 7 of 's2'
E9B9: C378E5  		jp	sets2b7		;so this is not written on a close.
              	;
              	;   read a sequential file.
              	;
E9BC: 3E01    	rdseq:	ld	a,1		;set sequential access mode.
E9BE: 32D5ED  		ld	(mode),a
E9C1: 3EFF    	rdseq1:	ld	a,0ffh		;don't allow reading unwritten space.
E9C3: 32D3ED  		ld	(rdwrtflg),a
E9C6: CDBBE4  		call	strdata		;put rec# and ext# into fcb.
E9C9: 3AE3ED  		ld	a,(savnrec)	;get next record to read.
E9CC: 21E1ED  		ld	hl,savnxt	;get number of records in extent.
E9CF: BE      		cp	(hl)		;within this extent?
E9D0: DAE6E9  		jp	c,rdseq2
E9D3: FE80    		cp	128		;no. is this extent fully used?
E9D5: C2FBE9  		jp	nz,rdseq3	;no. end-of-file.
E9D8: CD5AE9  		call	getnext		;yes, open the next one.
E9DB: AF      		xor	a		;reset next record to read.
E9DC: 32E3ED  		ld	(savnrec),a
E9DF: 3A45E3  		ld	a,(status)	;check on open, successful?
E9E2: B7      		or	a
E9E3: C2FBE9  		jp	nz,rdseq3	;no, error.
E9E6: CD77E4  	rdseq2:	call	comblk		;ok. compute block number to read.
E9E9: CD84E4  		call	chkblk		;check it. within bounds?
E9EC: CAFBE9  		jp	z,rdseq3	;no, error.
E9EF: CD8AE4  		call	logical		;convert (blknmbr) to logical sector (128 byte).
E9F2: CDD1E3  		call	trksec1		;set the track and sector for this block #.
E9F5: CDB2E3  		call	doread		;and read it.
E9F8: C3D2E4  		jp	setnrec		;and set the next record to be accessed.
              	;
              	;   read error occured. set status and return.
              	;
E9FB: C305E3  	rdseq3:	jp	ioerr1
              	;
              	;   write the next sequential record.
              	;
E9FE: 3E01    	wtseq:	ld	a,1		;set sequential access mode.
EA00: 32D5ED  		ld	(mode),a
EA03: 3E00    	wtseq1:	ld	a,0		;allow an addition empty extent to be opened.
EA05: 32D3ED  		ld	(rdwrtflg),a
EA08: CD54E5  		call	chkwprt		;check write protect status.
EA0B: 2A43E3  		ld	hl,(params)
EA0E: CD47E5  		call	ckrof1		;check for read only file, (hl) already set to fcb.
EA11: CDBBE4  		call	strdata		;put updated data into fcb.
EA14: 3AE3ED  		ld	a,(savnrec)	;get record number to write.
EA17: FE80    		cp	128		;within range?
EA19: D205E3  		jp	nc,ioerr1	;no, error(?).
EA1C: CD77E4  		call	comblk		;compute block number.
EA1F: CD84E4  		call	chkblk		;check number.
EA22: 0E00    		ld	c,0		;is there one to write to?
EA24: C26EEA  		jp	nz,wtseq6	;yes, go do it.
EA27: CD3EE4  		call	getblock	;get next block number within fcb to use.
EA2A: 32D7ED  		ld	(relblock),a	;and save.
EA2D: 010000  		ld	bc,0		;start looking for space from the start
EA30: B7      		or	a		;if none allocated as yet.
EA31: CA3BEA  		jp	z,wtseq2
EA34: 4F      		ld	c,a		;extract previous block number from fcb
EA35: 0B      		dec	bc		;so we can be closest to it.
EA36: CD5EE4  		call	extblk
EA39: 44      		ld	b,h
EA3A: 4D      		ld	c,l
EA3B: CDBEE7  	wtseq2:	call	fndspace	;find the next empty block nearest number (bc).
EA3E: 7D      		ld	a,l		;check for a zero number.
EA3F: B4      		or	h
EA40: C248EA  		jp	nz,wtseq3
EA43: 3E02    		ld	a,2		;no more space?
EA45: C301E3  		jp	setstat
EA48: 22E5ED  	wtseq3:	ld	(blknmbr),hl	;save block number to access.
EA4B: EB      		ex	de,hl		;put block number into (de).
EA4C: 2A43E3  		ld	hl,(params)	;now we must update the fcb for this
EA4F: 011000  		ld	bc,16		;newly allocated block.
EA52: 09      		add	hl,bc
EA53: 3ADDED  		ld	a,(bigdisk)	;8 or 16 bit block numbers?
EA56: B7      		or	a
EA57: 3AD7ED  		ld	a,(relblock)	;(* update this entry *)
EA5A: CA64EA  		jp	z,wtseq4	;zero means 16 bit ones.
EA5D: CD64E5  		call	adda2hl		;(hl)=(hl)+(a)
EA60: 73      		ld	(hl),e		;store new block number.
EA61: C36CEA  		jp	wtseq5
EA64: 4F      	wtseq4:	ld	c,a		;compute spot in this 16 bit table.
EA65: 0600    		ld	b,0
EA67: 09      		add	hl,bc
EA68: 09      		add	hl,bc
EA69: 73      		ld	(hl),e		;stuff block number (de) there.
EA6A: 23      		inc	hl
EA6B: 72      		ld	(hl),d
EA6C: 0E02    	wtseq5:	ld	c,2		;set (c) to indicate writing to un-used disk space.
EA6E: 3A45E3  	wtseq6:	ld	a,(status)	;are we ok so far?
EA71: B7      		or	a
EA72: C0      		ret	nz
EA73: C5      		push	bc		;yes, save write flag for bios (register c).
EA74: CD8AE4  		call	logical		;convert (blknmbr) over to loical sectors.
EA77: 3AD5ED  		ld	a,(mode)	;get access mode flag (1=sequential,
EA7A: 3D      		dec	a		;0=random, 2=special?).
EA7B: 3D      		dec	a
EA7C: C2BBEA  		jp	nz,wtseq9
              	;
              	;   special random i/o from function #40. maybe for m/pm, but the
              	; current block, if it has not been written to, will be zeroed
              	; out and then written (reason?).
              	;
EA7F: C1      		pop	bc
EA80: C5      		push	bc
EA81: 79      		ld	a,c		;get write status flag (2=writing unused space).
EA82: 3D      		dec	a
EA83: 3D      		dec	a
EA84: C2BBEA  		jp	nz,wtseq9
EA87: E5      		push	hl
EA88: 2AB9ED  		ld	hl,(dirbuf)	;zero out the directory buffer.
EA8B: 57      		ld	d,a		;note that (a) is zero here.
EA8C: 77      	wtseq7:	ld	(hl),a
EA8D: 23      		inc	hl
EA8E: 14      		inc	d		;do 128 bytes.
EA8F: F28CEA  		jp	p,wtseq7
EA92: CDE0E5  		call	dirdma		;tell the bios the dma address for directory access.
EA95: 2AE7ED  		ld	hl,(logsect)	;get sector that starts current block.
EA98: 0E02    		ld	c,2		;set 'writing to unused space' flag.
EA9A: 22E5ED  	wtseq8:	ld	(blknmbr),hl	;save sector to write.
EA9D: C5      		push	bc
EA9E: CDD1E3  		call	trksec1		;determine its track and sector numbers.
EAA1: C1      		pop	bc
EAA2: CDB8E3  		call	dowrite		;now write out 128 bytes of zeros.
EAA5: 2AE5ED  		ld	hl,(blknmbr)	;get sector number.
EAA8: 0E00    		ld	c,0		;set normal write flag.
EAAA: 3AC4ED  		ld	a,(blkmask)	;determine if we have written the entire
EAAD: 47      		ld	b,a		;physical block.
EAAE: A5      		and	l
EAAF: B8      		cp	b
EAB0: 23      		inc	hl		;prepare for the next one.
EAB1: C29AEA  		jp	nz,wtseq8	;continue until (blkmask+1) sectors written.
EAB4: E1      		pop	hl		;reset next sector number.
EAB5: 22E5ED  		ld	(blknmbr),hl
EAB8: CDDAE5  		call	defdma		;and reset dma address.
              	;
              	;   normal disk write. set the desired track and sector then
              	; do the actual write.
              	;
EABB: CDD1E3  	wtseq9:	call	trksec1		;determine track and sector for this write.
EABE: C1      		pop	bc		;get write status flag.
EABF: C5      		push	bc
EAC0: CDB8E3  		call	dowrite		;and write this out.
EAC3: C1      		pop	bc
EAC4: 3AE3ED  		ld	a,(savnrec)	;get number of records in file.
EAC7: 21E1ED  		ld	hl,savnxt	;get last record written.
EACA: BE      		cp	(hl)
EACB: DAD2EA  		jp	c,wtseq10
EACE: 77      		ld	(hl),a		;we have to update record count.
EACF: 34      		inc	(hl)
EAD0: 0E02    		ld	c,2
              	;
              	;*   this area has been patched to correct disk update problem
              	;* when using blocking and de-blocking in the bios.
              	;
EAD2: 00      	wtseq10:nop			;was 'dcr c'
EAD3: 00      		nop			;was 'dcr c'
EAD4: 210000  		ld	hl,0		;was 'jnz wtseq99'
              	;
              	; *   end of patch.
              	;
EAD7: F5      		push	af
EAD8: CD69E5  		call	gets2		;set 'extent written to' flag.
EADB: E67F    		and	7fh		;(* clear bit 7 *)
EADD: 77      		ld	(hl),a
EADE: F1      		pop	af		;get record count for this extent.
EADF: FE7F    	wtseq99:cp	127		;is it full?
EAE1: C200EB  		jp	nz,wtseq12
EAE4: 3AD5ED  		ld	a,(mode)	;yes, are we in sequential mode?
EAE7: FE01    		cp	1
EAE9: C200EB  		jp	nz,wtseq12
EAEC: CDD2E4  		call	setnrec		;yes, set next record number.
EAEF: CD5AE9  		call	getnext		;and get next empty space in directory.
EAF2: 2145E3  		ld	hl,status	;ok?
EAF5: 7E      		ld	a,(hl)
EAF6: B7      		or	a
EAF7: C2FEEA  		jp	nz,wtseq11
EAFA: 3D      		dec	a		;yes, set record count to -1.
EAFB: 32E3ED  		ld	(savnrec),a
EAFE: 3600    	wtseq11:ld	(hl),0		;clear status.
EB00: C3D2E4  	wtseq12:jp	setnrec		;set next record to access.
              	;
              	;   for random i/o, set the fcb for the desired record number
              	; based on the 'r0,r1,r2' bytes. these bytes in the fcb are
              	; used as follows:
              	;
              	;       fcb+35            fcb+34            fcb+33
              	;  |     'r-2'      |      'r-1'      |      'r-0'     |
              	;  |7             0 | 7             0 | 7             0|
              	;  |0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0|
              	;  |    overflow   | | extra |  extent   |   record #  |
              	;  | ______________| |_extent|__number___|_____________|
              	;                     also 's2'
              	;
              	;   on entry, register (c) contains 0ffh if this is a read
              	; and thus we can not access unwritten disk space. otherwise,
              	; another extent will be opened (for writing) if required.
              	;
EB03: AF      	position: xor	a		;set random i/o flag.
EB04: 32D5ED  		ld	(mode),a
              	;
              	;   special entry (function #40). m/pm ?
              	;
EB07: C5      	positn1:push	bc		;save read/write flag.
EB08: 2A43E3  		ld	hl,(params)	;get address of fcb.
EB0B: EB      		ex	de,hl
EB0C: 212100  		ld	hl,33		;now get byte 'r0'.
EB0F: 19      		add	hl,de
EB10: 7E      		ld	a,(hl)
EB11: E67F    		and	7fh		;keep bits 0-6 for the record number to access.
EB13: F5      		push	af
EB14: 7E      		ld	a,(hl)		;now get bit 7 of 'r0' and bits 0-3 of 'r1'.
EB15: 17      		rla	
EB16: 23      		inc	hl
EB17: 7E      		ld	a,(hl)
EB18: 17      		rla	
EB19: E61F    		and	1fh		;and save this in bits 0-4 of (c).
EB1B: 4F      		ld	c,a		;this is the extent byte.
EB1C: 7E      		ld	a,(hl)		;now get the extra extent byte.
EB1D: 1F      		rra	
EB1E: 1F      		rra	
EB1F: 1F      		rra	
EB20: 1F      		rra	
EB21: E60F    		and	0fh
EB23: 47      		ld	b,a		;and save it in (b).
EB24: F1      		pop	af		;get record number back to (a).
EB25: 23      		inc	hl		;check overflow byte 'r2'.
EB26: 6E      		ld	l,(hl)
EB27: 2C      		inc	l
EB28: 2D      		dec	l
EB29: 2E06    		ld	l,6		;prepare for error.
EB2B: C28BEB  		jp	nz,positn5	;out of disk space error.
EB2E: 212000  		ld	hl,32		;store record number into fcb.
EB31: 19      		add	hl,de
EB32: 77      		ld	(hl),a
EB33: 210C00  		ld	hl,12		;and now check the extent byte.
EB36: 19      		add	hl,de
EB37: 79      		ld	a,c
EB38: 96      		sub	(hl)		;same extent as before?
EB39: C247EB  		jp	nz,positn2
EB3C: 210E00  		ld	hl,14		;yes, check extra extent byte 's2' also.
EB3F: 19      		add	hl,de
EB40: 78      		ld	a,b
EB41: 96      		sub	(hl)
EB42: E67F    		and	7fh
EB44: CA7FEB  		jp	z,positn3	;same, we are almost done then.
              	;
              	;  get here when another extent is required.
              	;
EB47: C5      	positn2:push	bc
EB48: D5      		push	de
EB49: CDA2E8  		call	closeit		;close current extent.
EB4C: D1      		pop	de
EB4D: C1      		pop	bc
EB4E: 2E03    		ld	l,3		;prepare for error.
EB50: 3A45E3  		ld	a,(status)
EB53: 3C      		inc	a
EB54: CA84EB  		jp	z,positn4	;close error.
EB57: 210C00  		ld	hl,12		;put desired extent into fcb now.
EB5A: 19      		add	hl,de
EB5B: 71      		ld	(hl),c
EB5C: 210E00  		ld	hl,14		;and store extra extent byte 's2'.
EB5F: 19      		add	hl,de
EB60: 70      		ld	(hl),b
EB61: CD51E8  		call	openit		;try and get this extent.
EB64: 3A45E3  		ld	a,(status)	;was it there?
EB67: 3C      		inc	a
EB68: C27FEB  		jp	nz,positn3
EB6B: C1      		pop	bc		;no. can we create a new one (writing?).
EB6C: C5      		push	bc
EB6D: 2E04    		ld	l,4		;prepare for error.
EB6F: 0C      		inc	c
EB70: CA84EB  		jp	z,positn4	;nope, reading unwritten space error.
EB73: CD24E9  		call	getempty	;yes we can, try to find space.
EB76: 2E05    		ld	l,5		;prepare for error.
EB78: 3A45E3  		ld	a,(status)
EB7B: 3C      		inc	a
EB7C: CA84EB  		jp	z,positn4	;out of space?
              	;
              	;   normal return location. clear error code and return.
              	;
EB7F: C1      	positn3:pop	bc		;restore stack.
EB80: AF      		xor	a		;and clear error code byte.
EB81: C301E3  		jp	setstat
              	;
              	;   error. set the 's2' byte to indicate this (why?).
              	;
EB84: E5      	positn4:push	hl
EB85: CD69E5  		call	gets2
EB88: 36C0    		ld	(hl),0c0h
EB8A: E1      		pop	hl
              	;
              	;   return with error code (presently in l).
              	;
EB8B: C1      	positn5:pop	bc
EB8C: 7D      		ld	a,l		;get error code.
EB8D: 3245E3  		ld	(status),a
EB90: C378E5  		jp	sets2b7
              	;
              	;   read a random record.
              	;
EB93: 0EFF    	readran:ld	c,0ffh		;set 'read' status.
EB95: CD03EB  		call	position	;position the file to proper record.
EB98: CCC1E9  		call	z,rdseq1	;and read it as usual (if no errors).
EB9B: C9      		ret	
              	;
              	;   write to a random record.
              	;
EB9C: 0E00    	writeran: ld	c,0		;set 'writing' flag.
EB9E: CD03EB  		call	position	;position the file to proper record.
EBA1: CC03EA  		call	z,wtseq1	;and write as usual (if no errors).
EBA4: C9      		ret	
              	;
              	;   compute the random record number. enter with (hl) pointing
              	; to a fcb an (de) contains a relative location of a record
              	; number. on exit, (c) contains the 'r0' byte, (b) the 'r1'
              	; byte, and (a) the 'r2' byte.
              	;
              	;   on return, the zero flag is set if the record is within
              	; bounds. otherwise, an overflow occured.
              	;
EBA5: EB      	comprand: ex	de,hl		;save fcb pointer in (de).
EBA6: 19      		add	hl,de		;compute relative position of record #.
EBA7: 4E      		ld	c,(hl)		;get record number into (bc).
EBA8: 0600    		ld	b,0
EBAA: 210C00  		ld	hl,12		;now get extent.
EBAD: 19      		add	hl,de
EBAE: 7E      		ld	a,(hl)		;compute (bc)=(record #)+(extent)*128.
EBAF: 0F      		rrca			;move lower bit into bit 7.
EBB0: E680    		and	80h		;and ignore all other bits.
EBB2: 81      		add	a,c		;add to our record number.
EBB3: 4F      		ld	c,a
EBB4: 3E00    		ld	a,0		;take care of any carry.
EBB6: 88      		adc	a,b
EBB7: 47      		ld	b,a
EBB8: 7E      		ld	a,(hl)		;now get the upper bits of extent into
EBB9: 0F      		rrca			;bit positions 0-3.
EBBA: E60F    		and	0fh		;and ignore all others.
EBBC: 80      		add	a,b		;add this in to 'r1' byte.
EBBD: 47      		ld	b,a
EBBE: 210E00  		ld	hl,14		;get the 's2' byte (extra extent).
EBC1: 19      		add	hl,de
EBC2: 7E      		ld	a,(hl)
EBC3: 87      		add	a,a		;and shift it left 4 bits (bits 4-7).
EBC4: 87      		add	a,a
EBC5: 87      		add	a,a
EBC6: 87      		add	a,a
EBC7: F5      		push	af		;save carry flag (bit 0 of flag byte).
EBC8: 80      		add	a,b		;now add extra extent into 'r1'.
EBC9: 47      		ld	b,a
EBCA: F5      		push	af		;and save carry (overflow byte 'r2').
EBCB: E1      		pop	hl		;bit 0 of (l) is the overflow indicator.
EBCC: 7D      		ld	a,l
EBCD: E1      		pop	hl		;and same for first carry flag.
EBCE: B5      		or	l		;either one of these set?
EBCF: E601    		and	01h		;only check the carry flags.
EBD1: C9      		ret	
              	;
              	;   routine to setup the fcb (bytes 'r0', 'r1', 'r2') to
              	; reflect the last record used for a random (or other) file.
              	; this reads the directory and looks at all extents computing
              	; the largerst record number for each and keeping the maximum
              	; value only. then 'r0', 'r1', and 'r2' will reflect this
              	; maximum record number. this is used to compute the space used
              	; by a random file.
              	;
EBD2: 0E0C    	ransize:ld	c,12		;look thru directory for first entry with
EBD4: CD18E7  		call	findfst		;this name.
EBD7: 2A43E3  		ld	hl,(params)	;zero out the 'r0, r1, r2' bytes.
EBDA: 112100  		ld	de,33
EBDD: 19      		add	hl,de
EBDE: E5      		push	hl
EBDF: 72      		ld	(hl),d		;note that (d)=0.
EBE0: 23      		inc	hl
EBE1: 72      		ld	(hl),d
EBE2: 23      		inc	hl
EBE3: 72      		ld	(hl),d
EBE4: CDF5E5  	ransiz1:call	ckfilpos	;is there an extent to process?
EBE7: CA0CEC  		jp	z,ransiz3	;no, we are done.
EBEA: CD5EE5  		call	fcb2hl		;set (hl) pointing to proper fcb in dir.
EBED: 110F00  		ld	de,15		;point to last record in extent.
EBF0: CDA5EB  		call	comprand	;and compute random parameters.
EBF3: E1      		pop	hl
EBF4: E5      		push	hl		;now check these values against those
EBF5: 5F      		ld	e,a		;already in fcb.
EBF6: 79      		ld	a,c		;the carry flag will be set if those
EBF7: 96      		sub	(hl)		;in the fcb represent a larger size than
EBF8: 23      		inc	hl		;this extent does.
EBF9: 78      		ld	a,b
EBFA: 9E      		sbc	a,(hl)
EBFB: 23      		inc	hl
EBFC: 7B      		ld	a,e
EBFD: 9E      		sbc	a,(hl)
EBFE: DA06EC  		jp	c,ransiz2
EC01: 73      		ld	(hl),e		;we found a larger (in size) extent.
EC02: 2B      		dec	hl		;stuff these values into fcb.
EC03: 70      		ld	(hl),b
EC04: 2B      		dec	hl
EC05: 71      		ld	(hl),c
EC06: CD2DE7  	ransiz2:call	findnxt		;now get the next extent.
EC09: C3E4EB  		jp	ransiz1		;continue til all done.
EC0C: E1      	ransiz3:pop	hl		;we are done, restore the stack and
EC0D: C9      		ret			;return.
              	;
              	;   function to return the random record position of a given
              	; file which has been read in sequential mode up to now.
              	;
EC0E: 2A43E3  	setran:	ld	hl,(params)	;point to fcb.
EC11: 112000  		ld	de,32		;and to last used record.
EC14: CDA5EB  		call	comprand	;compute random position.
EC17: 212100  		ld	hl,33		;now stuff these values into fcb.
EC1A: 19      		add	hl,de
EC1B: 71      		ld	(hl),c		;move 'r0'.
EC1C: 23      		inc	hl
EC1D: 70      		ld	(hl),b		;and 'r1'.
EC1E: 23      		inc	hl
EC1F: 77      		ld	(hl),a		;and lastly 'r2'.
EC20: C9      		ret	
              	;
              	;   this routine select the drive specified in (active) and
              	; update the login vector and bitmap table if this drive was
              	; not already active.
              	;
EC21: 2AAFED  	logindrv: ld	hl,(login)	;get the login vector.
EC24: 3A42E3  		ld	a,(active)	;get the default drive.
EC27: 4F      		ld	c,a
EC28: CDEAE4  		call	shiftr		;position active bit for this drive
EC2B: E5      		push	hl		;into bit 0.
EC2C: EB      		ex	de,hl
EC2D: CD59E3  		call	select		;select this drive.
EC30: E1      		pop	hl
EC31: CC47E3  		call	z,slcterr	;valid drive?
EC34: 7D      		ld	a,l		;is this a newly activated drive?
EC35: 1F      		rra	
EC36: D8      		ret	c
EC37: 2AAFED  		ld	hl,(login)	;yes, update the login vector.
EC3A: 4D      		ld	c,l
EC3B: 44      		ld	b,h
EC3C: CD0BE5  		call	setbit
EC3F: 22AFED  		ld	(login),hl	;and save.
EC42: C3A3E6  		jp	bitmap		;now update the bitmap.
              	;
              	;   function to set the active disk number.
              	;
EC45: 3AD6ED  	setdsk:	ld	a,(eparam)	;get parameter passed and see if this
EC48: 2142E3  		ld	hl,active	;represents a change in drives.
EC4B: BE      		cp	(hl)
EC4C: C8      		ret	z
EC4D: 77      		ld	(hl),a		;yes it does, log it in.
EC4E: C321EC  		jp	logindrv
              	;
              	;   this is the 'auto disk select' routine. the firsst byte
              	; of the fcb is examined for a drive specification. if non
              	; zero then the drive will be selected and loged in.
              	;
EC51: 3EFF    	autosel:ld	a,0ffh		;say 'auto-select activated'.
EC53: 32DEED  		ld	(auto),a
EC56: 2A43E3  		ld	hl,(params)	;get drive specified.
EC59: 7E      		ld	a,(hl)
EC5A: E61F    		and	1fh		;look at lower 5 bits.
EC5C: 3D      		dec	a		;adjust for (1=a, 2=b) etc.
EC5D: 32D6ED  		ld	(eparam),a	;and save for the select routine.
EC60: FE1E    		cp	1eh		;check for 'no change' condition.
EC62: D275EC  		jp	nc,autosl1	;yes, don't change.
EC65: 3A42E3  		ld	a,(active)	;we must change, save currently active
EC68: 32DFED  		ld	(olddrv),a	;drive.
EC6B: 7E      		ld	a,(hl)		;and save first byte of fcb also.
EC6C: 32E0ED  		ld	(autoflag),a	;this must be non-zero.
EC6F: E6E0    		and	0e0h		;whats this for (bits 6,7 are used for
EC71: 77      		ld	(hl),a		;something)?
EC72: CD45EC  		call	setdsk		;select and log in this drive.
EC75: 3A41E3  	autosl1:ld	a,(userno)	;move user number into fcb.
EC78: 2A43E3  		ld	hl,(params)	;(* upper half of first byte *)
EC7B: B6      		or	(hl)
EC7C: 77      		ld	(hl),a
EC7D: C9      		ret			;and return (all done).
              	;
              	;   function to return the current cp/m version number.
              	;
EC7E: 3E22    	getver:	ld	a,022h		;version 2.2
EC80: C301E3  		jp	setstat
              	;
              	;   function to reset the disk system.
              	;
EC83: 210000  	rstdsk:	ld	hl,0		;clear write protect status and log
EC86: 22ADED  		ld	(wrtprt),hl	;in vector.
EC89: 22AFED  		ld	(login),hl
EC8C: AF      		xor	a		;select drive 'a'.
EC8D: 3242E3  		ld	(active),a
EC90: 218000  		ld	hl,tbuff	;setup default dma address.
EC93: 22B1ED  		ld	(userdma),hl
EC96: CDDAE5  		call	defdma
EC99: C321EC  		jp	logindrv	;now log in drive 'a'.
              	;
              	;   function to open a specified file.
              	;
EC9C: CD72E5  	openfil:call	clears2		;clear 's2' byte.
EC9F: CD51EC  		call	autosel		;select proper disk.
ECA2: C351E8  		jp	openit		;and open the file.
              	;
              	;   function to close a specified file.
              	;
ECA5: CD51EC  	closefil: call	autosel		;select proper disk.
ECA8: C3A2E8  		jp	closeit		;and close the file.
              	;
              	;   function to return the first occurence of a specified file
              	; name. if the first byte of the fcb is '?' then the name will
              	; not be checked (get the first entry no matter what).
              	;
ECAB: 0E00    	getfst:	ld	c,0		;prepare for special search.
ECAD: EB      		ex	de,hl
ECAE: 7E      		ld	a,(hl)		;is first byte a '?'?
ECAF: FE3F    		cp	'?'
ECB1: CAC2EC  		jp	z,getfst1	;yes, just get very first entry (zero length match).
ECB4: CDA6E4  		call	setext		;get the extension byte from fcb.
ECB7: 7E      		ld	a,(hl)		;is it '?'? if yes, then we want
ECB8: FE3F    		cp	'?'		;an entry with a specific 's2' byte.
ECBA: C472E5  		call	nz,clears2	;otherwise, look for a zero 's2' byte.
ECBD: CD51EC  		call	autosel		;select proper drive.
ECC0: 0E0F    		ld	c,15		;compare bytes 0-14 in fcb (12&13 excluded).
ECC2: CD18E7  	getfst1:call	findfst		;find an entry and then move it into
ECC5: C3E9E5  		jp	movedir		;the users dma space.
              	;
              	;   function to return the next occurence of a file name.
              	;
ECC8: 2AD9ED  	getnxt:	ld	hl,(savefcb)	;restore pointers. note that no
ECCB: 2243E3  		ld	(params),hl	;other dbos calls are allowed.
ECCE: CD51EC  		call	autosel		;no error will be returned, but the
ECD1: CD2DE7  		call	findnxt		;results will be wrong.
ECD4: C3E9E5  		jp	movedir
              	;
              	;   function to delete a file by name.
              	;
ECD7: CD51EC  	delfile:call	autosel		;select proper drive.
ECDA: CD9CE7  		call	erafile		;erase the file.
ECDD: C301E7  		jp	ststatus	;set status and return.
              	;
              	;   function to execute a sequential read of the specified
              	; record number.
              	;
ECE0: CD51EC  	readseq:call	autosel		;select proper drive then read.
ECE3: C3BCE9  		jp	rdseq
              	;
              	;   function to write the net sequential record.
              	;
ECE6: CD51EC  	wrtseq:	call	autosel		;select proper drive then write.
ECE9: C3FEE9  		jp	wtseq
              	;
              	;   create a file function.
              	;
ECEC: CD72E5  	fcreate:call	clears2		;clear the 's2' byte on all creates.
ECEF: CD51EC  		call	autosel		;select proper drive and get the next
ECF2: C324E9  		jp	getempty	;empty directory space.
              	;
              	;   function to rename a file.
              	;
ECF5: CD51EC  	renfile:call	autosel		;select proper drive and then switch
ECF8: CD16E8  		call	chgnames	;file names.
ECFB: C301E7  		jp	ststatus
              	;
              	;   function to return the login vector.
              	;
ECFE: 2AAFED  	getlog:	ld	hl,(login)
ED01: C329ED  		jp	getprm1
              	;
              	;   function to return the current disk assignment.
              	;
ED04: 3A42E3  	getcrnt:ld	a,(active)
ED07: C301E3  		jp	setstat
              	;
              	;   function to set the dma address.
              	;
ED0A: EB      	putdma:	ex	de,hl
ED0B: 22B1ED  		ld	(userdma),hl	;save in our space and then get to
ED0E: C3DAE5  		jp	defdma		;the bios with this also.
              	;
              	;   function to return the allocation vector.
              	;
ED11: 2ABFED  	getaloc:ld	hl,(alocvect)
ED14: C329ED  		jp	getprm1
              	;
              	;   function to return the read-only status vector.
              	;
ED17: 2AADED  	getrov:	ld	hl,(wrtprt)
ED1A: C329ED  		jp	getprm1
              	;
              	;   function to set the file attributes (read-only, system).
              	;
ED1D: CD51EC  	setattr:call	autosel		;select proper drive then save attributes.
ED20: CD3BE8  		call	saveattr
ED23: C301E7  		jp	ststatus
              	;
              	;   function to return the address of the disk parameter block
              	; for the current drive.
              	;
ED26: 2ABBED  	getparm:ld	hl,(diskpb)
ED29: 2245E3  	getprm1:ld	(status),hl
ED2C: C9      		ret	
              	;
              	;   function to get or set the user number. if (e) was (ff)
              	; then this is a request to return the current user number.
              	; else set the user number from (e).
              	;
ED2D: 3AD6ED  	getuser:ld	a,(eparam)	;get parameter.
ED30: FEFF    		cp	0ffh		;get user number?
ED32: C23BED  		jp	nz,setuser
ED35: 3A41E3  		ld	a,(userno)	;yes, just do it.
ED38: C301E3  		jp	setstat
ED3B: E61F    	setuser:and	1fh		;no, we should set it instead. keep low
ED3D: 3241E3  		ld	(userno),a	;bits (0-4) only.
ED40: C9      		ret	
              	;
              	;   function to read a random record from a file.
              	;
ED41: CD51EC  	rdrandom: call	autosel		;select proper drive and read.
ED44: C393EB  		jp	readran
              	;
              	;   function to compute the file size for random files.
              	;
ED47: CD51EC  	wtrandom: call	autosel		;select proper drive and write.
ED4A: C39CEB  		jp	writeran
              	;
              	;   function to compute the size of a random file.
              	;
ED4D: CD51EC  	filesize: call	autosel		;select proper drive and check file length
ED50: C3D2EB  		jp	ransize
              	;
              	;   function #37. this allows a program to log off any drives.
              	; on entry, set (de) to contain a word with bits set for those
              	; drives that are to be logged off. the log-in vector and the
              	; write protect vector will be updated. this must be a m/pm
              	; special function.
              	;
ED53: 2A43E3  	logoff:	ld	hl,(params)	;get drives to log off.
ED56: 7D      		ld	a,l		;for each bit that is set, we want
ED57: 2F      		cpl			;to clear that bit in (login)
ED58: 5F      		ld	e,a		;and (wrtprt).
ED59: 7C      		ld	a,h
ED5A: 2F      		cpl	
ED5B: 2AAFED  		ld	hl,(login)	;reset the login vector.
ED5E: A4      		and	h
ED5F: 57      		ld	d,a
ED60: 7D      		ld	a,l
ED61: A3      		and	e
ED62: 5F      		ld	e,a
ED63: 2AADED  		ld	hl,(wrtprt)
ED66: EB      		ex	de,hl
ED67: 22AFED  		ld	(login),hl	;and save.
ED6A: 7D      		ld	a,l		;now do the write protect vector.
ED6B: A3      		and	e
ED6C: 6F      		ld	l,a
ED6D: 7C      		ld	a,h
ED6E: A2      		and	d
ED6F: 67      		ld	h,a
ED70: 22ADED  		ld	(wrtprt),hl	;and save. all done.
ED73: C9      		ret	
              	;
              	;   get here to return to the user.
              	;
ED74: 3ADEED  	goback:	ld	a,(auto)	;was auto select activated?
ED77: B7      		or	a
ED78: CA91ED  		jp	z,goback1
ED7B: 2A43E3  		ld	hl,(params)	;yes, but was a change made?
ED7E: 3600    		ld	(hl),0		;(* reset first byte of fcb *)
ED80: 3AE0ED  		ld	a,(autoflag)
ED83: B7      		or	a
ED84: CA91ED  		jp	z,goback1
ED87: 77      		ld	(hl),a		;yes, reset first byte properly.
ED88: 3ADFED  		ld	a,(olddrv)	;and get the old drive and select it.
ED8B: 32D6ED  		ld	(eparam),a
ED8E: CD45EC  		call	setdsk
ED91: 2A0FE3  	goback1:ld	hl,(usrstack)	;reset the users stack pointer.
ED94: F9      		ld	sp,hl
ED95: 2A45E3  		ld	hl,(status)	;get return status.
ED98: 7D      		ld	a,l		;force version 1.4 compatability.
ED99: 44      		ld	b,h
ED9A: C9      		ret			;and go back to user.
              	;
              	;   function #40. this is a special entry to do random i/o.
              	; for the case where we are writing to unused disk space, this
              	; space will be zeroed out first. this must be a m/pm special
              	; purpose function, because why would any normal program even
              	; care about the previous contents of a sector about to be
              	; written over.
              	;
ED9B: CD51EC  	wtspecl:call	autosel		;select proper drive.
ED9E: 3E02    		ld	a,2		;use special write mode.
EDA0: 32D5ED  		ld	(mode),a
EDA3: 0E00    		ld	c,0		;set write indicator.
EDA5: CD07EB  		call	positn1		;position the file.
EDA8: CC03EA  		call	z,wtseq1	;and write (if no errors).
EDAB: C9      		ret	
              	;
              	;**************************************************************
              	;*
              	;*     bdos data storage pool.
              	;*
              	;**************************************************************
              	;
EDAC: E5      	emptyfcb: defb	0e5h		;empty directory segment indicator.
EDAD: 0000    	wrtprt:	defw	0		;write protect status for all 16 drives.
EDAF: 0000    	login:	defw	0		;drive active word (1 bit per drive).
EDB1: 8000    	userdma:defw	080h		;user's dma address (defaults to 80h).
              	;
              	;   scratch areas from parameter block.
              	;
EDB3: 0000    	scratch1: defw	0		;relative position within dir segment for file (0-3).
EDB5: 0000    	scratch2: defw	0		;last selected track number.
EDB7: 0000    	scratch3: defw	0		;last selected sector number.
              	;
              	;   disk storage areas from parameter block.
              	;
EDB9: 0000    	dirbuf:	defw	0		;address of directory buffer to use.
EDBB: 0000    	diskpb:	defw	0		;contains address of disk parameter block.
EDBD: 0000    	chkvect:defw	0		;address of check vector.
EDBF: 0000    	alocvect: defw	0		;address of allocation vector (bit map).
              	;
              	;   parameter block returned from the bios.
              	;
EDC1: 0000    	sectors:defw	0		;sectors per track from bios.
EDC3: 00      	blkshft:defb	0		;block shift.
EDC4: 00      	blkmask:defb	0		;block mask.
EDC5: 00      	extmask:defb	0		;extent mask.
EDC6: 0000    	dsksize:defw	0		;disk size from bios (number of blocks-1).
EDC8: 0000    	dirsize:defw	0		;directory size.
EDCA: 0000    	alloc0:	defw	0		;storage for first bytes of bit map (dir space used).
EDCC: 0000    	alloc1:	defw	0
EDCE: 0000    	offset:	defw	0		;first usable track number.
EDD0: 0000    	xlate:	defw	0		;sector translation table address.
              	;
              	;
EDD2: 00      	closeflg: defb	0		;close flag (=0ffh is extent written ok).
EDD3: 00      	rdwrtflg: defb	0		;read/write flag (0ffh=read, 0=write).
EDD4: 00      	fndstat:defb	0		;filename found status (0=found first entry).
EDD5: 00      	mode:	defb	0		;i/o mode select (0=random, 1=sequential, 2=special random).
EDD6: 00      	eparam:	defb	0		;storage for register (e) on entry to bdos.
EDD7: 00      	relblock: defb	0		;relative position within fcb of block number written.
EDD8: 00      	counter:defb	0		;byte counter for directory name searches.
EDD9: 00000000	savefcb:defw	0,0		;save space for address of fcb (for directory searches).
EDDD: 00      	bigdisk:defb	0		;if =0 then disk is > 256 blocks long.
EDDE: 00      	auto:	defb	0		;if non-zero, then auto select activated.
EDDF: 00      	olddrv:	defb	0		;on auto select, storage for previous drive.
EDE0: 00      	autoflag: defb	0		;if non-zero, then auto select changed drives.
EDE1: 00      	savnxt:	defb	0		;storage for next record number to access.
EDE2: 00      	savext:	defb	0		;storage for extent number of file.
EDE3: 0000    	savnrec:defw	0		;storage for number of records in file.
EDE5: 0000    	blknmbr:defw	0		;block number (physical sector) used within a file or logical sect
EDE7: 0000    	logsect:defw	0		;starting logical (128 byte) sector of block (physical sector).
EDE9: 00      	fcbpos:	defb	0		;relative position within buffer for fcb of file of interest.
EDEA: 0000    	filepos:defw	0		;files position within directory (0 to max entries -1).
              	;
              	;   disk directory buffer checksum bytes. one for each of the
              	; 16 possible drives.
              	;
EDEC: 00000000	cksumtbl: defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
EDF0: 00...   	
              	
EDFC: 00000000		defb	0,0,0,0
              	;
              	;*
              	;******************   E N D   O F   C P / M   *****************
              	;*
              	
              	#include "../bios.asm"
              	;
              	;**************************************************************
              	;*
              	;*        B I O S   B O O T   R O U T I N E S
              	;*
              	;**************************************************************
              	;
              	
              	;
              	;**************************************************************
              	;*
              	;*          B I O S   J U M P   T A B L E
              	;*
              	;*    This isn't actually used by the BDOS, but
              	;*    some applications (*cough* MBASIC) use it
              	;*    to directly address BIOS calls to get around
              	;*    the BDOS.
              	;*
              	;**************************************************************
              	;
EE00: C333EE  		jp	boot
EE03: C346EE  	wbootin:jp	wboot	; Indirection to wboot, used by MBASIC
EE06: C3A0EE  		jp	const
EE09: C3ABEE  		jp	conin
EE0C: C3B7EE  		jp	conout
EE0F: C3C3EE  		jp	list
EE12: C3C7EE  		jp	punch
EE15: C3CBEE  		jp	reader
EE18: C3D9EE  		jp	home
EE1B: C3DEEE  		jp	seldsk
EE1E: C3FCEE  		jp	settrk
EE21: C300EF  		jp	setsec
EE24: C304EF  		jp	setdma
EE27: C30AEF  		jp	read
EE2A: C30EEF  		jp	write
EE2D: C312EF  		jp	prstat
EE30: C315EF  		jp	sectrn
              	
              	; Cold boot entry
              	; Sets up some lower CP/M memory areas, and tells the INIT
              	; program to run on CP/M startup.
EE33: 3100D8  	boot:	ld	sp,cbase
              	
              		; Run the warm boot common code
EE36: CD5DEE  		call	wbootr
              		
              		; Special conditions for a cold boot
EE39: CD69EF  		call	cbinit
              	
              		; Jump to CP/M
EE3C: 0E00    		ld	c,default
EE3E: C300D8  		jp	cbase
              	
              	
              	; Error boot entry
              	; Kinda like warm boot, but drive is reset to default
EE41: 3E00    	eboot:	ld	a,default
EE43: 320400  		ld	(tdrive),a
              	
              	; Warm boot entry
              	; Mainly just calls wbootr and manages IOBYTE
EE46: 3100D8  	wboot:	ld	sp,cbase
              	
              		; Save current drive + user
EE49: 3A0400  		ld	a,(tdrive)
EE4C: F5      		push	af
              	
              		; Save IOBYTE
EE4D: 3A0300  		ld	a,(iobyte)
EE50: F5      		push	af
              	
              		; Warm boot
EE51: CD5DEE  		call	wbootr
              		
              		; Restore IOBYTE
EE54: F1      		pop	af
EE55: 320300  		ld	(iobyte),a
              		
              		; Restore tdrive and warm boot
EE58: F1      		pop	af
EE59: 4F      		ld	c,a
EE5A: C300D8  		jp	cbase
              	
              	; Warm boot routine
              	; Sends init signal to device bus, loads CCP, and inits CP/M
              	; Does not actually jump to CP/M just yet
EE5D: F3      	wbootr:	di
              		
              		; Zero out BSS
EE5E: AF      		xor	a
EE5F: 21FEFA  		ld	hl,_TEXT_end
EE62: 77      		ld	(hl),a
EE63: 11FFFA  		ld	de,_TEXT_end+1
EE66: 017900  		ld	bc,_BSS_size
EE69: EDB0    		ldir
              	
              		; Send init signals to all devices
EE6B: 0600    		ld	b,0
EE6D: C5      	wboot0:	push	bc
EE6E: 217BEF  		ld	hl,bdevsw
EE71: 78      		ld	a,b
EE72: CD2DEF  		call	swindir
EE75: AF      		xor	a
EE76: 14      		inc	d
EE77: CC4AEF  		call	z,callmj
EE7A: C1      		pop	bc
EE7B: 04      		inc	b
EE7C: 3E14    		ld	a,20
EE7E: B8      		cp	b
EE7F: 20EC    		jr	nz,wboot0
              	
              		; Turn off batch mode
EE81: 3E00    		ld	a,0
EE83: 32E2D8  		ld	(batch),a
              	
              		; Load the CCP
EE86: CD75EF  		call	resccp
              	
              		; Call config init
EE89: CD4FEF  		call	wbinit
              		
              		; Set up lower memory
EE8C: 2198EE  		ld	hl,cpmlow
EE8F: 110000  		ld	de,0
EE92: 010800  		ld	bc,8
EE95: EDB0    		ldir
              	
              	
              		; Return
EE97: C9      		ret
              	
              	
              	; This is not a true function, but a block of code to be copied
              	; to CP/M lower memory
EE98: C303EE  	cpmlow:	jp	wbootin	; Call jump table version instead
EE9B: 81      		defb	0x81	; Default IOBYTE
EE9C: 00      		defb	0	; Default drive
EE9D: C306E0  		jp	fbase	; BDOS entry 
              	
              	
              	; Console status
              	;
              	; Returns a=0xFF if there is a character
              	; uses: all
              	; Defaults to device 0 right now
EEA0: 0600    	const:	ld	b,0
EEA2: CD1EEF  		call	cdindir
EEA5: 14      		inc	d
EEA6: C0      		ret	nz
EEA7: 3C      		inc	a
EEA8: C34AEF  		jp	callmj
              		
              	; Console read
              	;
              	; Returns character in a
              	; uses: all
              	; Defaults to device 0 right now
EEAB: 0600    	conin:	ld	b,0
EEAD: CD1EEF  		call	cdindir
EEB0: 14      		inc	d
EEB1: C0      		ret	nz
EEB2: 3E02    		ld	a,2
EEB4: C34AEF  		jp	callmj
              		
              	; Console write
              	; c = Character to display
              	;
              	; uses: all
              	; Defaults to device 0 right now
EEB7: 0600    	conout:	ld	b,0
EEB9: CD1EEF  	chrout:	call	cdindir
EEBC: 14      		inc	d
EEBD: C0      		ret	nz
EEBE: 3E03    		ld	a,3
EEC0: C34AEF  		jp	callmj
              		
              	; Printer write
              	; c = Character to print
              	;
              	; uses: all
EEC3: 0606    	list:	ld	b,6
EEC5: 18F2    		jr	chrout
              	
              	; Punch (or auxiliary) write
              	; c = Character to punch
              	;
EEC7: 0604    	punch:	ld	b,4
EEC9: 18EE    		jr	chrout
              	
              	; Reader (or auxiliary) read
              	;
              	; Returns character in a, or a=0x1A
EECB: 0602    	reader:	ld	b,2
EECD: CD1EEF  		call	cdindir
EED0: 14      		inc	d
EED1: 3E1A    		ld	a,0x1A
EED3: C0      		ret	nz
EED4: 3E02    		ld	a,2
EED6: C34AEF  		jp	callmj
              		
              	; Move the current drive to track 0
              	;
              	; uses: all
EED9: 3E01    	home:	ld	a,1
EEDB: C3F6EE  		jp	callbd
              		
              	; Selects a block device
              	; c = Device to select
              	; e = Disk logging status
              	;
              	; return hl=0 if device not valid
              	; uses: all
EEDE: 79      	seldsk:	ld	a,c
EEDF: 43      		ld	b,e
EEE0: 217BEF  		ld	hl,bdevsw
EEE3: CD2DEF  		call	swindir
EEE6: 22F7EE  		ld	(callbd+1),hl
EEE9: 210000  		ld	hl,0
EEEC: 14      		inc	d
EEED: C0      		ret	nz
EEEE: 2A4BEF  		ld	hl,(callmj+1)
EEF1: 22FAEE  		ld	(callbd+4),hl
EEF4: 3E02    		ld	a,2
              		; Pass b = logging status, c = device #
              		
              	; Small stub to jump to the currently selected block device
              	; Also records hl as argument
              	;
              	; We love self-modfiying code!
EEF6: 21      	callbd:	defb	0x21
EEF7: 0000    		defw	0
EEF9: C3      		defb	0xC3
EEFA: 0000    		defw	0
              	
              	; Sets the track of the selected block device
              	; bc = Track, starts at 0
              	;
              	; uses: all
EEFC: 3E03    	settrk:	ld	a,3
EEFE: 18F6    		jr	callbd
              		
              	; Sets the sector of the selected block device
              	; bc = Sector, starts at 0
              	;
              	; uses: all
EF00: 3E04    	setsec:	ld	a,4
EF02: 18F2    		jr	callbd
              	
              	; Sets the DMA address of the selected block device
              	; bc = DMA address
              	;
              	; uses: all
EF04: 60      	setdma:	ld	h,b
EF05: 69      		ld	l,c
EF06: 224DEF  		ld	(biodma),hl
EF09: C9      		ret
              		
              	; Reads the configured block from the selected block device
              	;
              	; uses: all
EF0A: 3E05    	read:	ld	a,5
EF0C: 18E8    		jr	callbd
              	
              	; Writes the configured block to the selected block device
              	; c = Deferred mode
              	;
              	; uses: all
EF0E: 3E06    	write:	ld	a,6
EF10: 18E4    		jr	callbd
              		
              	; "Printer" is always read for bytes
              	; Maybe in the future we will implement this, but for now
              	; this will do.
              	;
              	; Returns a=0xFF
EF12: 3EFF    	prstat:	ld	a,0xFF
EF14: C9      		ret
              		
              	; Provides sector translation
              	; Returns no translation for all devices
EF15: 60      	sectrn:	ld	h,b
EF16: 69      		ld	l,c
EF17: C9      		ret
              		
              	
              	; BDOS -> BIOS system hook
              	; stubs some stuff out, and then jumps to the config system hook
EF18: 32DEED  	bshook:	ld	(auto),a
EF1B: C372EF  		jp	syshook
              		
              	; Character device switch indirection
              	; Obtains device by doing IOBYTE indirection
              	; Sets hl to cdevsw and jumps to swindir
EF1E: 04      	cdindir:inc	b
EF1F: 3A0300  		ld	a,(iobyte)
EF22: 05      	cdindi0:dec	b
EF23: 2803    		jr	z,cdindi1
EF25: 1F      		rra
EF26: 18FA    		jr	cdindi0
EF28: E603    	cdindi1:and	0x03
EF2A: 21BBEF  		ld	hl,cdevsw
              	
              	; Switch indirect helper function
              	; a = Device
              	; hl = Start of switch
              	;
              	; returns d=255 if device found, hl as argument
              	; uses: af, de, hl
EF2D: 110400  	swindir:ld	de,4
EF30: B7      		or	a
EF31: 2804    	swindi0:jr	z,swindi1
EF33: 19      		add	hl,de
EF34: 3D      		dec	a
EF35: 18FA    		jr	swindi0
EF37: 7E      	swindi1:ld	a,(hl)
EF38: 324BEF  		ld	(callmj+1),a
EF3B: 23      		inc	hl
EF3C: B6      		or	(hl)
EF3D: C8      		ret	z
EF3E: 7E      		ld	a,(hl)
EF3F: 324CEF  		ld	(callmj+2),a
EF42: 23      		inc	hl
EF43: 7E      		ld	a,(hl)
EF44: 23      		inc	hl
EF45: 66      		ld	h,(hl)
EF46: 6F      		ld	l,a
EF47: 16FF    		ld	d,255
EF49: C9      	nulldev:ret		; Just points to a return
              	
              	; Small stub to jump to the memory jump register
EF4A: C3      	callmj: defb	0xC3
EF4B: 0000    		defw	0
              	
              	
              	
              	; Variables
EF4D: 0000    	biodma:	defw	0	; Block device DMA address
              	
              	;
              	;**************************************************************
              	;*
              	;*        W A R M   B O O T   C O N F I G   H O O K
              	;*
              	;*    This function is called at the end of a warm boot
              	;*    to set up hardware-specific stuff. 
              	;*
              	;**************************************************************
              	;
              	
EF4F: 3E01    	wbinit:	ld	a,0x01		; Bank out ROM
EF51: D300    		out	(0x00),a
              		
EF53: 3EC3    		ld	a,0xC3		; Set up IRQ handler
EF55: 323800  		ld	(0x38),a	
EF58: 216FEF  		ld	hl,cfirq
EF5B: 223900  		ld	(0x39),hl
              		
              		; Turn on batch mode
EF5E: 3EFF    		ld	a,0xFF
EF60: 32E2D8  		ld	(batch),a
              		
              		; Also set interrupt mode 2 stuff
EF63: ED47    		ld	i,a
EF65: ED5E    		im	2		; Start interrupts
EF67: FB      		ei
              		
EF68: C9      		ret
              	
              	;
              	;**************************************************************
              	;*
              	;*        C O L D   B O O T   C O N F I G   H O O K
              	;*
              	;*    This function will run once during the intial cold
              	;*    boot. It is the last task to run before control is
              	;*    given to the CCP. This function is run after wbinit
              	;*
              	;**************************************************************
              	;
              	
EF69: 3E06    	cbinit:	ld	a,6	; Enable INIT to run
EF6B: 3204D8  		ld	(inbuff+1),a
EF6E: C9      		ret
              	
              	;
              	;**************************************************************
              	;*
              	;*            I N T E R R U P T   H A N D L I N G
              	;*
              	;*     This function will be called in order to handle an
              	;*     interrupt if the need arises. Hooking drivers up to
              	;*     this code may be a little bit more involved.
              	;*
              	;**************************************************************
              	;
              	
EF6F: FB      	cfirq:	ei
EF70: ED4D    		reti
              	
              	;
              	;**************************************************************
              	;*
              	;*              B D O S   C A L L   H O O K
              	;*
              	;*     This function is called everytime a BDOS call occurs.
              	;*     It can be used by specialized drivers to either inject
              	;*     new BDOS calls, or intercept existing ones.
              	;*
              	;*     Registers 'bc' and 'e' must be preserved if a call is
              	;*     going to be forwarded to the system. Register 'c' will
              	;*     contain BDOS call number.
              	;*       
              	;*
              	;**************************************************************
              	;
              	
EF72: C32FF4  	syshook:jp	ns_sysh
              	
              	
              	;**************************************************************
              	;*
              	;*           B L O C K   D E V I C E   S W I T C H
              	;*
              	;*       IshkurCP/M can support up to 16 logical disks
              	;*       A single driver can be mapped to a number of
              	;*       these disks. Each logical disk is defined by a
              	;*       4-byte record. The first 2 bytes are a pointer
              	;*       to the device entry, and the last 2 are passed
              	;*       as an argument to the device. Usually this 
              	;*       takes the form of a minor number for indexing
              	;*       sub-disks on the same driver
              	;*
              	;*
              	;**************************************************************
              	;
              		
              	; One of the block devices needs to have the responsibiliy
              	; of loading the CCP into memory. Define the jump vector here
EF75: C306F4  	resccp:	jp	ns_ccp
              	
              	; Additionally, if Ishkur is using a graphical device, that
              	; device may temporarily need to access the Graphical Resource
              	; Block (GRB) to load in fonts and such. This is up to 2k in
              	; size, and goes in the location that the CCP resides
EF78: C30BF4  	resgrb:	jp	ns_grb
              	
              	; A device of "0" will be read as a non-existant device
              	; The 'init' signal can be sent to the same devices many 
              	; times if it has multipe entires in this table.
EF7B: A2F30000	bdevsw:	defw	nfsdev,	0	; 'A'
EF7F: A2F30100		defw	nfsdev,	1	; 'B'
EF83: A2F30200		defw	nfsdev,	2	; 'C'
EF87: A2F30300		defw	nfsdev,	3	; 'D'
EF8B: A2F30400		defw	nfsdev,	4	; 'E'
EF8F: A2F30500		defw	nfsdev,	5	; 'F'
EF93: A2F30600		defw	nfsdev,	6	; 'G'
EF97: A2F30700		defw	nfsdev,	7	; 'H'
EF9B: A2F30800		defw	nfsdev,	8	; 'I'
EF9F: A2F30900		defw	nfsdev,	9	; 'J'
EFA3: A2F30A00		defw	nfsdev,	10	; 'K'
EFA7: A2F30B00		defw	nfsdev,	11	; 'L'
EFAB: A2F30C00		defw	nfsdev,	12	; 'M'
EFAF: A2F30D00		defw	nfsdev,	13	; 'N'
EFB3: A2F30E00		defw	nfsdev,	14	; 'O'
EFB7: A2F30F00		defw	nfsdev,	15	; 'P'
              	
              	;
              	; Character device switch MUST come directly after in memory!
              	;
              	;**************************************************************
              	;*
              	;*        C H A R A C T E R   D E V I C E   S W I T C H
              	;*
              	;*      Currently, 4 character devices are supported. These
              	;*      devices are the console, the printer, and two "punches"
              	;*      (can be thought of as an auxillary serial device).
              	;*      All character devices use the same interface, which
              	;*      allows for easy indireciton. 
              	;*
              	;*	Device switch logic works about the same of the block
              	;*	devices.
              	;*
              	;**************************************************************
              	;
              	
              	; A device of "0" will be read as a non-existant device
              	; The 'init' signal can be sent to the same devices many 
              	; times if it has multipe entires in this table.
EFBB: 70FA0000	cdevsw:	defw	siodev,	0	; TTY device
EFBF: CBEF0000		defw	vdpdev,	0	; Console device
EFC3: 46FA0000		defw	prtdev,	0	; Aux I/O device #1 (LPT)
EFC7: 00000000		defw	0,	0	; Aux I/O device #2 (GEN)
              	
              	;
              	;**************************************************************
              	;*
              	;*        D E V I C E   D R I V E R   I N C L U D E S
              	;*
              	;**************************************************************
              	;
              	
              	#include "../dev/nabu_vdp.asm"
              	;
              	;**************************************************************
              	;*
              	;*      T M S 9 9 1 8   C H A R A C T E R   D E V I C E
              	;*
              	;*      This device emulated a VT52 terminal using the
              	;*      TMS9918A graphics chip. The 2kb font record is
              	;*      not resident is memory, and must be provided by
              	;*      a compatable block I/O device.
              	;*
              	;*      F18A style 80 column mode is supported
              	;*
              	;*      This specific version uses the NABU keyboard as
              	;*      an input to the emulated termina 
              	;*
              	;*      Device requires 48 bytes of bss space (tm_bss)
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
FAFE: 00      	tm_outc:defs	1	; Output character
FAFF: 00      	tm_scro:defs	1	; Scroll width
FB00: 00      	tm_escs:defs	1	; Escape state
FB01: 00      	tm_last:defs	1	; Last character read
FB02: 00000000	tm_cbuf:defs	40	; 40 byte character buffer
FB06: 00...   	
              	.area	_TEXT
              	
              	; TMS9918 Configuration
00A0:         	tm_data	equ	0xA0	; TMS9918 data register (mode=0)
00A1:         	tm_latc	equ	0xA1	; TMS9918 latch register (mode=1)
              	
0090:         	tm_keyd	equ	0x90	; Keyboard data register
0091:         	tm_keys	equ	0x91	; Keyboard status register
              	
0040:         	tm_ayda	equ	0x40	; AY-3-8910 data port
0041:         	tm_ayla	equ	0x41	; AY-3-8910 latch port
              	
              	; --- VRAM MAP ---
              	; 0x0000 - 0x07FF: Font
              	; 0x0800 - 0x0BFF: 40 column screen buffer
              	; 0x0C00 - 0x0FFF: Unused
              	; 0x1000 - 0x17FF: 80 column screen buffer
              	;
              	; Serial #
              	; 0x17FE: 0xE5
              	; 0x17FF: 0x81
              	
              	
              	; Driver jump table
EFCB: B7      	vdpdev:	or	a
EFCC: 2845    		jr	z,tm_init
EFCE: 3D      		dec	a
EFCF: 2819    		jr	z,tm_stat
EFD1: 3D      		dec	a
EFD2: CAB5F0  		jp	z,tm_read
EFD5: C313F1  		jp	tm_writ
              	
              	; A slower version of the OTIR instruction
              	; b = Number of cycles
              	; c = Output port
              	; hl = Memory pointer
              	;
              	; uses: bc, hl
EFD8: F5      	tm_otir:push	af
EFD9: 7E      	tm_oti0:ld	a,(hl)
EFDA: ED79    		out	(c),a
EFDC: 23      		inc	hl
EFDD: 10FA    		djnz	tm_oti0
EFDF: F1      		pop	af
EFE0: C9      		ret
              		
              	; A slower version of the INIR instruction
              	; b = Number of cycles
              	; c = Output port
              	; hl = Memory pointer
              	;
              	; uses: bc, hl
EFE1: F5      	tm_inir:push	af
EFE2: ED78    	tm_inr0:in	a,(c)
EFE4: 77      		ld	(hl),a
EFE5: 23      		inc	hl
EFE6: 10FA    		djnz	tm_inr0
EFE8: F1      		pop	af
EFE9: C9      		ret
              	
              	
              	; Gets the status of the keyboard
              	;
              	; Returns a=0xFF if there is a key to read 
              	; uses: af, bc, de, hl
EFEA: CD5FF3  	tm_stat:call	tm_dint
EFED: CDF6EF  		call	tm_sta0
EFF0: F5      		push	af
EFF1: CD6FF3  		call	tm_eint
EFF4: F1      		pop	af
EFF5: C9      		ret 
EFF6: 3A01FB  	tm_sta0:ld	a,(tm_last)
EFF9: FEE4    		cp	0xE4
EFFB: 2871    		jr	z,tm_scri
EFFD: FEE5    		cp	0xE5
EFFF: 287F    		jr	z,tm_sclf
F001: 3AFEFA  	tm_sta1:ld	a,(tm_outc)
F004: 3C      		inc	a
F005: 3EFF    		ld	a,0xFF
F007: C0      		ret	nz
F008: CD6DF2  		call	tm_getc
F00B: 32FEFA  		ld	(tm_outc),a
F00E: 3C      		inc	a
F00F: C8      		ret	z
F010: 3EFF    		ld	a,0xFF
F012: C9      		ret
              	
              	; TMS9918 init
              	; Load font record, set up terminal
F013: CD78EF  	tm_init:call	resgrb
              	
              		; Set up registers
F016: CD8AF0  		call	tm_setp
              		
              		; Set up interrupt vectors (if needed)
F019: 2159F3  		ld	hl,tm_virq
F01C: 2206FF  		ld	(intvec+6),hl
F01F: 218BF2  		ld	hl,tm_kirq
F022: 2204FF  		ld	(intvec+4),hl
              		
              		; Set TMS pattern generator block to 0
F025: DBA1    		in	a,(tm_latc)
F027: AF      		xor	a
F028: D3A1    		out	(tm_latc),a
F02A: 3E84    		ld	a,0x84
F02C: D3A1    		out	(tm_latc),a
              		
              		; Write the GRB
F02E: 010040  		ld	bc,0x4000
F031: CD4EF3  		call	tm_addr
F034: 2100D8  		ld	hl,cbase
F037: 0EA0    		ld	c,tm_data
F039: 3E08    		ld	a,8	; Transfer 8*256 = 2048
F03B: 0600    	tm_ini0:ld	b,0
F03D: CDD8EF  		call	tm_otir
F040: 3D      		dec	a
F041: 20F8    		jr	nz,tm_ini0
              		
              		; Cold boot?
F043: 3A81F3  		ld	a,(tm_cold)
F046: B7      		or	a
F047: 2012    		jr	nz,tm_ini1
              		
              		; Check serial #
F049: 01FE17  		ld	bc,0x17FE
F04C: CD4EF3  		call	tm_addr
F04F: ED78    		in	a,(c)
F051: FEE5    		cp	0xE5
F053: 2006    		jr	nz,tm_ini1
F055: ED78    		in	a,(c)
F057: FE81    		cp	0x81
F059: 280D    		jr	z,tm_cloc
              		
              		; Reset the terminal
F05B: CD30F3  	tm_ini1:call	tm_cls
F05E: AF      		xor	a
F05F: 327FF3  		ld	(tm_curx),a
F062: 3280F3  		ld	(tm_cury),a
F065: 3281F3  		ld	(tm_cold),a
              		
              		; Fall to tm_cloc
              		
              	; Clear the output character
              	;
              	; uses: af
F068: 3EFF    	tm_cloc:ld	a,0xFF
F06A: 32FEFA  		ld	(tm_outc),a
              	
F06D: C9      		ret
              		
              	; Scroll left / scroll right
              	;
              	; uses: af, bc, de, hl
F06E: 3AFFFA  	tm_scri:ld	a,(tm_scro)
F071: B7      		or	a
F072: FE28    		cp	40
F074: 2808    		jr	z,tm_scr1
F076: C604    		add	a,4
F078: 32FFFA  	tm_scr0:ld	(tm_scro),a
F07B: CD0DF3  		call	tm_usco
F07E: 1881    	tm_scr1:jr	tm_sta1
F080: 3AFFFA  	tm_sclf:ld	a,(tm_scro)
F083: B7      		or	a
F084: 28F8    		jr	z,tm_scr1
F086: D604    		sub	4
F088: 18EE    		jr	tm_scr0
              	
              	; Sets up registers depending on mode
              	; used to change between 40-col and 80-col
              	;
              	; uses: af, hl
F08A: 2A7AF3  	tm_setp:ld	hl,(tm_mode)
              	
              		; Set TMS to text mode
F08D: DBA1    		in	a,(tm_latc)
F08F: 7C      		ld	a,h
F090: D3A1    		out	(tm_latc),a
F092: 3E80    		ld	a,0x80
F094: D3A1    		out	(tm_latc),a
F096: DBA1    		in	a,(tm_latc)
F098: 3EF0    		ld	a,0xF0
F09A: D3A1    		out	(tm_latc),a
F09C: 3E81    		ld	a,0x81
F09E: D3A1    		out	(tm_latc),a
              		
              		; Set TMS color
F0A0: DBA1    		in	a,(tm_latc)
F0A2: 3A7CF3  		ld	a,(tm_colr)
F0A5: D3A1    		out	(tm_latc),a
F0A7: 3E87    		ld	a,0x87
F0A9: D3A1    		out	(tm_latc),a
              		
              		; Set TMS name table to 0x0800
F0AB: DBA1    		in	a,(tm_latc)
F0AD: 7D      		ld	a,l
F0AE: D3A1    		out	(tm_latc),a
F0B0: 3E82    		ld	a,0x82
F0B2: D3A1    		out	(tm_latc),a
F0B4: C9      		ret
              	
              	; Waits for the user to press a key, and returns it
              	;
              	; Returns ASCII key in A
              	; uses: af, bc, de, hl
F0B5: CD5FF3  	tm_read:call	tm_dint
F0B8: CDC1F0  		call	tm_rea0
F0BB: F5      		push	af
F0BC: CD6FF3  		call	tm_eint
F0BF: F1      		pop	af
F0C0: C9      		ret 
F0C1: 3A7FF3  	tm_rea0:ld	a,(tm_curx)
F0C4: 4F      		ld	c,a
F0C5: 3A80F3  		ld	a,(tm_cury)
F0C8: 57      		ld	d,a
F0C9: 210010  		ld	hl,0x1000
F0CC: 3E50    		ld	a,80
F0CE: CDE9F2  		call	tm_chat
F0D1: DBA0    		in	a,(tm_data)	; char is in A
F0D3: 57      		ld	d,a		; char key
F0D4: 5F      		ld	e,a		; blinking char
F0D5: 0601    		ld	b,1
              		
F0D7: D5      	tm_rea1:push	de
F0D8: CDF6EF  		call	tm_sta0		; No interrupts!
F0DB: D1      		pop	de
F0DC: 3C      		inc	a
F0DD: 200D    		jr	nz,tm_rea2
F0DF: 5A      		ld	e,d
F0E0: CDFCF0  		call	tm_rea3
F0E3: 3AFEFA  		ld	a,(tm_outc)
F0E6: 47      		ld	b,a
F0E7: CD68F0  		call	tm_cloc
F0EA: 78      		ld	a,b
F0EB: C9      		ret
              		
F0EC: CD0AF1  	tm_rea2:call	tm_stal
F0EF: 10E6    		djnz	tm_rea1
F0F1: 3E80    		ld	a,0x80
F0F3: AB      		xor	e
F0F4: 5F      		ld	e,a
F0F5: CDFCF0  		call	tm_rea3
F0F8: 06BE    		ld	b,190
F0FA: 18DB    		jr	tm_rea1
              	
              	
F0FC: D5      	tm_rea3:push	de
F0FD: 3A7FF3  		ld	a,(tm_curx)
F100: 4F      		ld	c,a
F101: 3A80F3  		ld	a,(tm_cury)
F104: 57      		ld	d,a
F105: CDC5F2  		call	tm_putc
F108: D1      		pop	de
F109: C9      		ret
              	
              	; Stalls out for a little bit
              	;
              	; uses: none
F10A: C5      	tm_stal:push	bc
F10B: 06FF    		ld	b,255
F10D: C5      	tm_sta2:push	bc
F10E: C1      		pop	bc
F10F: 10FC    		djnz	tm_sta2
F111: C1      		pop	bc
F112: C9      		ret
              	
              	
              	; Writes a character to the screen
              	; c = Character to write
              	;
              	; Returns c,b as next position 
              	; uses: af, bc, de, hl
F113: CD5FF3  	tm_writ:call	tm_dint
F116: 59      		ld	e,c
F117: 3A7FF3  		ld	a,(tm_curx)
F11A: 4F      		ld	c,a
F11B: 3A80F3  		ld	a,(tm_cury)
F11E: 57      		ld	d,a
F11F: CD2EF1  		call	tm_wri0
F122: 78      		ld	a,b
F123: 3280F3  		ld	(tm_cury),a
F126: 79      		ld	a,c
F127: 327FF3  		ld	(tm_curx),a
F12A: CD6FF3  		call	tm_eint
F12D: C9      		ret
              		
              	; Write helper routine
              	; c = X position
              	; d = Y position
              	; e = Character
              	;
              	; Returns c,b as next position
F12E: 42      	tm_wri0:ld	b,d		; c = X, b = Y
F12F: 3A00FB  		ld	a,(tm_escs)
F132: B7      		or	a		; Process escape code
F133: C2A0F1  		jp	nz,tm_esc
F136: 3E1F    		ld	a,0x1F
F138: BB      		cp	e
F139: D26DF1  		jp	nc,tm_wri1	; Process control code
F13C: C5      		push	bc
F13D: CDC5F2  		call	tm_putc		; Write character
F140: C1      		pop	bc
              		
              		; Increment character
F141: 0C      	tm_ri	inc	c
F142: 3E50    		ld	a,80
F144: B9      		cp	c
F145: C0      		ret	nz
F146: AF      		xor	a
F147: 4F      		ld	c,a
F148: 04      	tm_lf:  inc	b	; Line feed
F149: 3E18    		ld	a,24
F14B: B8      		cp	b
F14C: C0      		ret	nz
F14D: C5      		push	bc
F14E: CD47F2  		call	tm_dsco
F151: C1      		pop	bc
F152: 05      		dec	b
F153: C9      		ret
F154: AF      	tm_cr:	xor	a	; Carriage return
F155: 4F      		ld	c,a
F156: C9      		ret
F157: 0D      	tm_bs:	dec	c	; Backspace 
F158: F0      		ret	p
F159: 0E4F    		ld	c,79
F15B: 05      		dec	b
F15C: F0      		ret	p
F15D: AF      		xor	a
F15E: 47      		ld	b,a
F15F: 4F      		ld	c,a
F160: C9      		ret
F161: AF      	tm_up:	xor	a	; Move up
F162: B8      		cp	b
F163: C8      		ret	z
F164: 05      		dec	b
F165: C9      		ret
F166: CD30F3  	tm_cshm:call	tm_cls
F169: AF      	tm_home:xor	a
F16A: 47      		ld	b,a
F16B: 4F      		ld	c,a
F16C: C9      		ret
              	
F16D: 7B      	tm_wri1:ld	a,e
F16E: FE07    		cp	0x07	; Bell
F170: CA26F2  		jp	z,tm_bell
F173: FE08    		cp	0x08	; '\b' (Cursor left)
F175: 28E0    		jr	z,tm_bs
F177: FE12    		cp	0x12	; Cursor right
F179: 28C6    		jr	z,tm_ri
F17B: FE0A    		cp	0x0A	; '\n' (Cursor down)
F17D: 28C9    		jr	z,tm_lf
F17F: FE0B    		cp	0x0B	; Cursor up
F181: 28DE    		jr	z,tm_up
F183: FE0D    		cp	0x0D	; '\r' 
F185: 28CD    		jr	z,tm_cr
F187: FE17    		cp	0x17	; Clear end of screen
F189: 2856    		jr	z,tm_cles
F18B: FE18    		cp	0x18	; Clear end of line
F18D: 2854    		jr	z,tm_clea
F18F: FE1A    		cp	0x1A	; Clear screen, home cursor
F191: 28D3    		jr	z,tm_cshm
F193: FE1E    		cp	0x1E	; Home cursor
F195: 28D2    		jr	z,tm_home
F197: FE1B    		cp	0x1B	; Escape
F199: C0      		ret	nz
F19A: 3E01    		ld	a,1
F19C: 3200FB  		ld	(tm_escs),a
F19F: C9      		ret
              		
              		; Handle escape sequence
F1A0: 3D      	tm_esc:	dec	a
F1A1: 280E    		jr	z,tm_esc0
F1A3: 3D      		dec	a
F1A4: 2825    		jr	z,tm_esc1
F1A6: 3D      		dec	a
F1A7: 282D    		jr	z,tm_esc2
F1A9: 3D      		dec	a
F1AA: 2871    		jr	z,tm_updc
F1AC: AF      	tm_escd:xor	a	; Escape done
F1AD: 3200FB  	tm_escr:ld	(tm_escs),a
F1B0: C9      		ret
F1B1: 3EFF    	tm_esc0:ld	a,0xFF	; Do 40-col
F1B3: BB      		cp	e
F1B4: 2850    		jr	z,tm_40c
F1B6: 3EFE    		ld	a,0xFE	; Do 80-col
F1B8: BB      		cp	e
F1B9: 2858    		jr	z,tm_80c
F1BB: 3EFD    		ld	a,0xFD	; Set color
F1BD: BB      		cp	e
F1BE: 2859    		jr	z,tm_scol
F1C0: 3E3D    		ld	a,0x3D	; '='
F1C2: BB      		cp	e
F1C3: 20E7    		jr	nz,tm_escd
F1C5: 3A00FB  	tm_esci:ld	a,(tm_escs)
F1C8: 3C      		inc	a
F1C9: 18E2    		jr	tm_escr
F1CB: 7B      	tm_esc1:ld	a,e
F1CC: 1E20    		ld	e,0x20
F1CE: 93      		sub	e
F1CF: FE18    		cp	24
F1D1: 30D9    		jr	nc,tm_escd
F1D3: 47      		ld	b,a
F1D4: 18EF    		jr	tm_esci
F1D6: 7B      	tm_esc2:ld	a,e
F1D7: 1E20    		ld	e,0x20
F1D9: 93      		sub	e
F1DA: FE50    		cp	80
F1DC: 30CE    		jr	nc,tm_escd
F1DE: 4F      		ld	c,a
F1DF: 18CB    		jr	tm_escd
              		
              		; Clear segment
              		; B = ending line
F1E1: 0617    	tm_cles:ld	b,23
F1E3: 04      	tm_clea:inc	b
F1E4: 1E00    		ld	e,0
F1E6: C5      		push	bc
F1E7: D5      		push	de
F1E8: 3E50    		ld	a,80
F1EA: 210050  		ld	hl,0x5000
F1ED: CDE9F2  		call	tm_chat
F1F0: D1      		pop	de
F1F1: C1      		pop	bc
F1F2: AF      	tm_cle0:xor	a
F1F3: D3A0    		out	(tm_data),a
F1F5: 0C      		inc	c
F1F6: 3E50    		ld	a,80
F1F8: B9      		cp	c
F1F9: 20F7    		jr	nz,tm_cle0
F1FB: 14      		inc	d
F1FC: AF      		xor	a
F1FD: 4F      		ld	c,a
F1FE: 7A      		ld	a,d
F1FF: B8      		cp	b
F200: 20F0    		jr	nz,tm_cle0
F202: D1      		pop	de	; Do not update character
F203: C30DF3  		jp	tm_usco
              		
F206: E5      	tm_40c:	push	hl
F207: 210200  		ld	hl,0x0002
F20A: 227AF3  	tm_cupd:ld	(tm_mode),hl
F20D: CD8AF0  		call	tm_setp
F210: E1      		pop	hl
F211: 1899    		jr	tm_escd
              		
F213: E5      	tm_80c:	push	hl
F214: 210704  		ld	hl,0x0407
F217: 18F1    		jr	tm_cupd
              		
              		; Set color command
F219: 3E04    	tm_scol:ld	a,4
F21B: 1890    		jr	tm_escr
              		
              		; Update color here
F21D: 7B      	tm_updc:ld	a,e
F21E: 327CF3  		ld	(tm_colr),a
F221: CD8AF0  		call	tm_setp
F224: 1886    		jr	tm_escd
              	
              		; Ring the bell
F226: AF      	tm_bell:xor	a
F227: D341    		out	(tm_ayla),a
F229: D340    		out	(tm_ayda),a
F22B: 3C      		inc	a
F22C: D341    		out	(tm_ayla),a
F22E: 3E80    		ld	a,0x80
F230: D340    		out	(tm_ayda),a
F232: 3E07    		ld	a,7
F234: D341    		out	(tm_ayla),a
F236: DB40    		in	a,(tm_ayda)
F238: E6C0    		and	0xC0
F23A: F63E    		or	0x3E
F23C: D340    		out	(tm_ayda),a
F23E: 3E08    		ld	a,8
F240: D341    		out	(tm_ayla),a
F242: 3E0F    		ld	a,0x0F
F244: D340    		out	(tm_ayda),a
F246: C9      		ret
              		
              	
              		
              	; Scroll both frame buffers down one
              	;
              	; uses: af, bc, de, hl
F247: 212808  	tm_dsco:ld	hl,0x0800+40
F24A: 110048  		ld	de,0x4800
F24D: 0618    		ld	b,24
F24F: CD5AF2  		call	tm_dsc0
F252: 215010  		ld	hl,0x1000+80
F255: 110050  		ld	de,0x5000
F258: 0630    		ld	b,48
F25A: C5      	tm_dsc0:push	bc
F25B: D5      		push	de
F25C: E5      		push	hl
F25D: CDF5F2  		call	tm_vcpy
F260: E1      		pop	hl
F261: D1      		pop	de
F262: 012800  		ld	bc,40
F265: 09      		add	hl,bc
F266: EB      		ex	de,hl
F267: 09      		add	hl,bc
F268: EB      		ex	de,hl
F269: C1      		pop	bc
F26A: 10EE    		djnz	tm_dsc0
F26C: C9      		ret
              		
              	
              	; Grabs the latest key pressed by the keyboard
              	; Discard keyboard errors
              	; Returns key in A, or 0xFF if none
              	;
              	; uses: af, bc, de, hl
F26D: 3A7EF3  	tm_getc:ld	a,(tm_inf)
F270: B7      		or	a
F271: 3E00    		ld	a,0
F273: 327EF3  		ld	(tm_inf),a
F276: 3A7DF3  		ld	a,(tm_inb)
F279: 2008    		jr	nz,tm_get0
              	
F27B: DB91    		in	a,(tm_keys)
F27D: E602    		and	2
F27F: 3D      		dec	a
F280: F8      		ret	m
              		
              		; Grab the key
F281: DB90    		in	a,(tm_keyd)
F283: 3201FB  	tm_get0:ld	(tm_last),a
F286: CD99F2  		call	tm_map
F289: 79      		ld	a,c
F28A: C9      		ret
              		
              	; Handles a keyboard interrupt for the VDP terminal driver
              	; Keypress stored in tm_inb and tm_inf flag is set
              	; 
              	; uses: none
F28B: F5      	tm_kirq:push	af
F28C: DB90    		in	a,(tm_keyd)
F28E: 327DF3  		ld	(tm_inb),a
F291: 3E01    		ld	a,1
F293: 327EF3  		ld	(tm_inf),a
F296: F1      		pop	af
F297: FB      		ei
F298: C9      		ret
              		
              		
              	; Maps keyboard input to ASCII
              	; a = Key to map
              	;
              	; Returns mapped key in c
              	; uses: af, c
F299: 4F      	tm_map:	ld	c,a
              		
              		; Mapping function
F29A: 21B0F2  		ld	hl,tm_mapt
F29D: 7E      	tm_map0:ld	a,(hl)
F29E: B7      		or	a
F29F: 2808    		jr	z,tm_map2
F2A1: B9      		cp	c
F2A2: 23      		inc	hl
F2A3: 7E      		ld	a,(hl)
F2A4: 23      		inc	hl
F2A5: 20F6    		jr	nz,tm_map0
F2A7: 4F      		ld	c,a
F2A8: C9      		ret
              		
              		
              		; Filter non-ASCII
F2A9: 79      	tm_map2:ld	a,c
F2AA: E680    		and	0x80	
F2AC: C8      		ret	z
F2AD: 0EFF    		ld	c,0xFF
F2AF: C9      		ret
              		
              	; Map table
F2B0: 7F08    	tm_mapt:defb	0x7F,0x08	; DEL -> BS
F2B2: E108    		defb	0xE1,0x08	; '<-' -> BS
F2B4: EA7F    		defb	0xEA,0x7F	; TV -> DEL
F2B6: E00C    		defb	0xE0,0x0C	; '->' -> Right
F2B8: E20B    		defb	0xE2,0x0B	; '/\' -> Up
F2BA: E30A    		defb	0xE3,0x0A	; '\/' -> Linefeed 
F2BC: E95C    		defb	0xE9,0x5C	; PAUSE -> '\'
F2BE: E860    		defb	0xE8,0x60	; SYM -> '@'
F2C0: E67C    		defb	0xE6,0x7C	; NO -> '|'
F2C2: E77E    		defb	0xE7,0x7E	; YES -> '~'
F2C4: 00      		defb	0
              	
              	; Puts a character on the screen
              	; c = X position
              	; d = Y position
              	; e = Character to put
              	;
              	; uses: af, bc, de, hl
F2C5: 210050  	tm_putc:ld	hl,0x5000
F2C8: 3E50    		ld	a,80
F2CA: C5      		push	bc
F2CB: D5      		push	de
F2CC: CDE9F2  		call	tm_chat	; Place it in the 80 col buffer
F2CF: ED59    		out	(c),e
F2D1: D1      		pop	de
F2D2: C1      		pop	bc
F2D3: 3AFFFA  	tm_putf:ld	a,(tm_scro)	; Place into frame buffer
F2D6: 47      		ld	b,a
F2D7: 79      		ld	a,c
F2D8: 90      		sub	b	; If character is less than scroll...
F2D9: 4F      		ld	c,a
F2DA: F8      		ret	m
F2DB: FE28    		cp	40	; If desired position is 40 or more
F2DD: D0      		ret	nc
F2DE: 210048  		ld	hl,0x4800
F2E1: 3E28    		ld	a,40
F2E3: CDE9F2  		call	tm_chat	; Place it in the 40 col screen buffer
F2E6: ED59    		out	(c),e
F2E8: C9      		ret
              	
              	; Sets the TMS address to a character at x,y
              	; a = Line width
              	; c = X position
              	; d = Y position
              	; hl = Buffer address
              	;
              	; uses: af, bc, d, hl
F2E9: 0600    	tm_chat:ld	b,0
F2EB: 09      		add	hl,bc
F2EC: 4F      		ld	c,a
F2ED: AF      		xor	a
F2EE: BA      		cp	d
F2EF: 285B    	tm_cha0:jr	z,tm_addh
F2F1: 09      		add	hl,bc
F2F2: 15      		dec	d
F2F3: 18FA    		jr	tm_cha0
              	
              	; Copies VRAM from one location to another
              	; Transfers occur in blocks of 40 bytes
              	; de = destination address
              	; hl = source location
              	;
              	; b = 0 on return
              	; uses: af, bc, de, hl
F2F5: CD4CF3  	tm_vcpy:call	tm_addh
F2F8: 0628    		ld	b,40
F2FA: 2102FB  		ld	hl,tm_cbuf
F2FD: CDE1EF  		call	tm_inir
F300: EB      		ex	de,hl
F301: CD4CF3  		call	tm_addh
F304: 0628    		ld	b,40
F306: 2102FB  		ld	hl,tm_cbuf
F309: CDD8EF  		call	tm_otir
F30C: C9      		ret
              		
              	; Updates the frame buffer based on the scroll position
              	;
              	; uses: af, bc, de, hl
F30D: 210010  	tm_usco:ld	hl,0x1000
F310: 110048  		ld	de,0x4800
F313: 3AFFFA  		ld	a,(tm_scro)
F316: 0600    		ld	b,0
F318: 4F      		ld	c,a
F319: 09      		add	hl,bc
F31A: 0618    		ld	b,24
F31C: C5      	tm_usc0:push	bc
F31D: D5      		push	de
F31E: E5      		push	hl
F31F: CDF5F2  		call	tm_vcpy
F322: E1      		pop	hl
F323: D1      		pop	de
F324: 0E50    		ld	c,80
F326: 09      		add	hl,bc
F327: EB      		ex	de,hl
F328: 0E28    		ld	c,40
F32A: 09      		add	hl,bc
F32B: EB      		ex	de,hl
F32C: C1      		pop	bc
F32D: 10ED    		djnz	tm_usc0
F32F: C9      		ret
              		
              	
              	; Clears out screen buffer and offscreen buffer
              	; Also includes clear limited function
              	;
              	; uses: af, bc, de
F330: 010048  	tm_cls:	ld	bc,0x4800
F333: 11FE0F  		ld	de,0x1000-2
F336: CD4EF3  		call	tm_addr
F339: AF      	tm_cls0:xor	a
F33A: ED79    		out	(c),a
F33C: 1B      		dec	de
F33D: 7A      		ld	a,d
F33E: B3      		or	e
F33F: 20F8    		jr	nz,tm_cls0
              		
              		; Write super special serial #
F341: 3EE5    		ld	a,0xE5
F343: ED79    		out	(c),a
F345: F5      		push	af
F346: F1      		pop	af
F347: 3E81    		ld	a,0x81
F349: ED79    		out	(c),a
F34B: C9      		ret
              	
              	; Sets the TMS address for either reading or writing
              	; bc = Address 
              	;
              	; Returns tm_data in c
              	; uses: af, bc
F34C: 44      	tm_addh:ld	b,h		; Does HL instead of BC
F34D: 4D      		ld	c,l
F34E: DBA1    	tm_addr:in	a,(tm_latc)
F350: 79      		ld	a,c
F351: D3A1    		out	(tm_latc),a
F353: 78      		ld	a,b
F354: D3A1    		out	(tm_latc),a
F356: 0EA0    		ld	c,tm_data
F358: C9      		ret
              		
              	; Handles a TMS9918 irq
F359: F5      	tm_virq:push	af
F35A: DBA1    		in	a,(tm_latc)
F35C: F1      		pop	af
F35D: FB      		ei
F35E: C9      		ret
              		
              		
              	; Disables all interrupts while VDP operations occur
              	;
              	; uses: a
F35F: 3EC9    	tm_dint:ld	a,0xC9
F361: 323800  		ld	(0x38),a
F364: ED56    		im	1
F366: 3E0E    		ld	a,0x0E
F368: D341    		out	(tm_ayla),a	; AY register = 14
F36A: 3E00    		ld	a,0x00
F36C: D340    		out	(tm_ayda),a	
F36E: C9      		ret
              		
              	; Enables interrupts again
              	;
              	; uses: a
F36F: 3E0E    	tm_eint:ld	a,0x0E
F371: D341    		out	(tm_ayla),a	; AY register = 14
F373: 3EB0    		ld	a,0xB0
F375: D340    		out	(tm_ayda),a
F377: ED5E    		im	2
F379: C9      		ret
              		
              	; Variables
F37A: 0200    	tm_mode:defw	0x0002
F37C: E1      	tm_colr:defb	0xE1
F37D: 00      	tm_inb:	defb	0
F37E: 00      	tm_inf:	defb	0
F37F: 00      	tm_curx:defb	0
F380: 00      	tm_cury:defb	0
F381: 01      	tm_cold:defb	1
              	#include "../dev/nabu_nfs.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   N H A C P   F I L E   S Y S T E M
              	;*
              	;*    Unlike a standard block device, the NFS driver provides
              	;*    a CP/M filesystem by directly intercepting system calls.
              	;*    By doing this, it can access provide access to an external
              	;*    filesystem via NHACP.
              	;*
              	;*    Virtual filesystems are directories labelled "A", "B",
              	;*    "C", etc... on the host system. That are converted to
              	;*    minor numbers 0, 1, 2, etc... when the driver is being
              	;*    added to the block device switch  
              	;* 
              	;**************************************************************
              	;
              	; BSS Segment Variables
              	.area	_BSS
FB2A: 00000000	ns_buff:defs	48	; Buffer (48b)
FB2E: 00...   	
FB5A: 00000000	ns_ptrn:defs	11	; Pattern buffer (11b)
FB5E: 00...   	
FB65: 00000000	ns_name:defs	11	; Name bufffer (11b)
FB69: 00...   	
FB70: 0000    	ns_mask:defs	2	; Ownership mask (2b)
FB72: 0000    	ns_cfcb:defs	2	; Current FCB (2b)
FB74: 00      	ns_dore:defs	1	; Do reopen? (1b)
FB75: 00      	ns_isls:defs	1	; Is listing dir? (1b)
FB76: 00      	ns_tran:defs	1	; Number of bytes in transfer (1b)
              	.area	_TEXT
              	
0040:         	ns_ayda	equ	0x40		; AY-3-8910 data port
0041:         	ns_atla	equ	0x41		; AY-3-8910 latch port
0080:         	ns_hcca	equ	0x80		; Modem data port
0000:         	ns_nctl	equ	0x00		; NABU control port
              	
0081:         	ns_fild	equ	0x81		; Default file access desc
              	
              	
              	;
              	;**************************************************************
              	;*
              	;*         D U M M Y   D I S K   G E O M E T R Y
              	;* 
              	;**************************************************************
              	;
              	
              	; Dummy DPH
F382: 00000000	ns_dph:	defw	0,0,0,0
F386: 00000000	
F38A: 10FF    		defw	dircbuf	; DIRBUF
F38C: 92F3    		defw	ns_dpb	; DPB
F38E: 0000    		defw	0	; CSV
F390: A1F3    		defw	ns_alv	; ALV 
              		
              		
              	; Dummy format
F392: 4000    	ns_dpb:	defw	64	; # sectors per track
F394: 03      		defb	3	; BSH
F395: 07      		defb	7	; BLM
F396: 00      		defb	0	; EXM
F397: 0100    		defw	1	; DSM
F399: 0000    		defw	0	; DRM
F39B: 00      		defb	0	; AL0
F39C: 00      		defb	0	; AL1
F39D: 0000    		defw	0	; Size of directory check vector
F39F: 0000    		defw	0	; Number of reserved tracks at the beginning of disk
              		
              	; Dummy ALV
F3A1: 00      	ns_alv: defb	0
              	
              	; Driver entry point
              	; a = Command #
              	;
              	; uses: all
F3A2: B7      	nfsdev:	or	a
F3A3: 2807    		jr	z,ns_init
F3A5: 3D      		dec	a
F3A6: 3D      		dec	a
F3A7: 2814    		jr	z,ns_sel
F3A9: 3E01    		ld	a,1
F3AB: C9      		ret
              	
              	; Inits the device
              	; Figures out which devices that the NFS driver "owns"
              	; b = Logical CP/M device #
              	; hl = Call argument
              	;
              	; uses: does not matter
F3AC: 78      	ns_init:ld	a,b
F3AD: CDA9F7  		call	ns_domk
F3B0: 2A70FB  		ld	hl,(ns_mask)
F3B3: 7C      		ld	a,h
F3B4: B0      		or	b
F3B5: 67      		ld	h,a
F3B6: 7D      		ld	a,l
F3B7: B1      		or	c
F3B8: 6F      		ld	l,a
F3B9: 2270FB  		ld	(ns_mask),hl
F3BC: C9      		ret
              	
              	
              	; Selects the drive
              	; c = Logging status
              	; hl = Call argument
              	;
              	; uses: hl
F3BD: 11B9ED  	ns_sel:	ld	de,dirbuf
F3C0: 218AF3  		ld	hl,ns_dph+8
F3C3: 010800  		ld	bc,8
F3C6: EDB0    		ldir
F3C8: C374ED  		jp	goback
              		
              	
              	; Set up the HCCA modem connection
              	; Configures the AY-3-8910 to monitor correct interrupts
              	; and leaves it in a state where the interrupt port is
              	; exposed
              	;
              	; uses: a, b
F3CB: 3E07    	ns_hini:ld	a,0x07
F3CD: D341    		out	(ns_atla),a	; AY register = 7
F3CF: DB40    		in	a,(ns_ayda)
F3D1: E63F    		and	0x3F
F3D3: F640    		or	0x40
F3D5: D340    		out	(ns_ayda),a	; Configure AY port I/O
              		
              		; Claim interrupt vectors
F3D7: E5      		push	hl
F3D8: 21DEF8  		ld	hl,ns_rirq
F3DB: 2200FF  		ld	(intvec),hl
F3DE: 2125F9  		ld	hl,ns_wirq
F3E1: 2202FF  		ld	(intvec+2),hl
F3E4: E1      		pop	hl
              		
              	; Set interrupts to their default state
              	;
              	; uses: a
F3E5: 3E0E    	ns_dflt:ld	a,0x0E
F3E7: D341    		out	(ns_atla),a	; AY register = 14
F3E9: 3EB0    		ld	a,0xB0
F3EB: D340    		out	(ns_ayda),a	; Enable HCCA receive and but not send, plus key and VDP
              		
F3ED: 3E0F    	ns_dfl0:ld	a,0x0F		
F3EF: D341    		out	(ns_atla),a	; AY register = 15
              		
F3F1: C9      		ret
              	
              	; Set receive and send interrupts
              	;
              	; uses: a
F3F2: 3E0E    	ns_esnd:ld	a,0x0E
F3F4: D341    		out	(ns_atla),a	; AY register = 14
F3F6: 3EC0    		ld	a,0xC0
F3F8: D340    		out	(ns_ayda),a	; Enable HCCA receive and send
F3FA: 18F1    		jr	ns_dfl0
              		
              	; Set receive but not send interrupt
              	;
              	; uses: a
F3FC: 3E0E    	ns_dsnd:ld	a,0x0E
F3FE: D341    		out	(ns_atla),a	; AY register = 14
F400: 3E80    		ld	a,0x80
F402: D340    		out	(ns_ayda),a	; Enable HCCA receive and but not send
F404: 18E7    		jr	ns_dfl0
              	
              	; Loads the CCP into the CCP space
F406: 219BF9  	ns_ccp:	ld	hl,ns_p0
F409: 1803    		jr	ns_grb0
              		
              	; Loads the GRB into the CCP space
F40B: 21A8F9  	ns_grb:	ld	hl,ns_p1
F40E: 11BEF9  	ns_grb0:ld	de,ns_m0na
F411: 010D00  		ld	bc,13
F414: EDB0    		ldir			; Copy name to file open
F416: CDCBF3  		call	ns_hini		; Go to HCCA mode
F419: 210000  		ld	hl,0x0000	; O_RDONLY
F41C: CDEAF7  		call	ns_opef		; Open the file
F41F: 110000  		ld	de,0
F422: 2100D8  		ld	hl,cbase
F425: CD09F8  	ns_grb1:call	ns_getb
F428: 1C      		inc	e
F429: 3E10    		ld	a,16
F42B: BB      		cp	e
F42C: 20F7    		jr	nz,ns_grb1
F42E: C9      		ret
              		
              	; CP/M system hook
              	; Used to intercept certain syscalls
              	;
              	; uses: af if not hooked, all otherwise
F42F: 79      	ns_sysh:ld	a,c
F430: D60F    		sub	15
F432: D8      		ret	c		; No syscalls lower than 15
F433: 2841    		jr	z,ns_fopn	; Open file
F435: 3D      		dec	a
F436: CAB6F4  		jp	z,ns_fcls	; Close file
F439: 3D      		dec	a
F43A: CA67F5  		jp	z,ns_sfir	; Search for first 
F43D: 3D      		dec	a
F43E: CA8CF5  		jp	z,ns_snxt	; Search for next 
F441: 3D      		dec	a
F442: CADCF5  		jp	z,ns_dele	; Delete file
F445: 3D      		dec	a
F446: CA95F6  		jp	z,ns_frea	; File read next record
F449: 3D      		dec	a
F44A: CAC1F6  		jp	z,ns_fwri	; File write next record
F44D: 3D      		dec	a
F44E: CA14F7  		jp	z,ns_fmak	; Create file
F451: 3D      		dec	a
F452: CA3BF7  		jp	z,ns_frnm	; Rename file
F455: D607    		sub	7
F457: 2817    		jr	z,ns_stmp	; Set file attributes (stump)
F459: D603    		sub	3
F45B: CADBF6  		jp	z,ns_rrea	; File read random
F45E: 3D      		dec	a
F45F: CAEAF6  		jp	z,ns_rwri	; File write random
F462: 3D      		dec	a
F463: CA7FF7  		jp	z,ns_size	; Compute file size
F466: 3D      		dec	a
F467: CAF9F6  		jp	z,ns_rrec	; Update random access pointer
F46A: D604    		sub	4
F46C: CAEAF6  		jp	z,ns_rwri	; FIle write random (we will ignore the zero part)
F46F: C9      		ret
              		
              	; Stump, do nothing if FCB is owned
              	; de = Address to FCB
              	;
              	; uses: does not matter
F470: CDB5F7  	ns_stmp:call	ns_ownr
              	
F473: C374ED  		jp	goback
              		
              	; Parses the current FCB, and searches for a file that matches
              	; the pattern.
              	; The point here is to insert the "true" name of the file into
              	; the FCB so it can be accessed later
              	; de = Address of FCB
              	;
              	; uses: af, bc, de, hl
F476: CDB5F7  	ns_fopn:call	ns_ownr
              	
              		; Go find the file
F479: D5      		push	de
F47A: CD0CF5  		call	ns_find
              		
              		; Update status
F47D: 210000  		ld	hl,0
F480: 2245E3  		ld	(status),hl
              		
              		; Copy over false CP/M filename to the FCB
F483: D1      		pop	de
F484: CD97F7  		call	ns_nblk		; Get # of blocks
F487: 79      		ld	a,c
F488: D5      		push	de
F489: 13      		inc	de
F48A: 2165FB  		ld	hl,ns_name
F48D: 010B00  		ld	bc,11
F490: EDB0    		ldir
              		
              		; Set open flag
F492: 4F      		ld	c,a
F493: 13      		inc	de
F494: 3EE7    		ld	a,0xE7
F496: 12      		ld	(de),a
F497: 13      		inc	de
F498: AF      		xor	a
F499: 12      		ld	(de),a
F49A: 13      		inc	de
F49B: 79      		ld	a,c
F49C: 12      		ld	(de),a
F49D: 13      		inc	de
              		
              		; Copy over the real filename to the FCB
F49E: 011000  		ld	bc,16
F4A1: 2140FB  		ld	hl,ns_buff+22
F4A4: EDB0    		ldir
              		
              	
              		; Check if current
F4A6: D1      		pop	de
F4A7: 2A72FB  		ld	hl,(ns_cfcb)
F4AA: ED52    		sbc	hl,de
F4AC: 2005    		jr	nz,ns_fop0
              	
              		; Set the reopen flag
F4AE: 3E01    		ld	a,1
F4B0: 3274FB  		ld	(ns_dore),a
              		
F4B3: C374ED  	ns_fop0:jp	goback
              		
              	; Close the file
              	; Main purpose is to ensure that a close on this device is deferred
              	; Also resets the open flag
              	; de = Address of DPH
              	;
              	; uses: does not matter
F4B6: CDB5F7  	ns_fcls:call	ns_ownr
              	
              		; Reset open flag
F4B9: 210D00  		ld	hl,13
F4BC: 19      		add	hl,de
F4BD: 3600    		ld	(hl),0x00
              		
              		; Set flag
F4BF: 210000  		ld	hl,0
F4C2: 2245E3  		ld	(status),hl
              	
F4C5: C374ED  		jp	goback
              		
              	; Function call to start a list-dir operation
              	; Must be called before a file search
              	; a = Logical NHACP device
              	; de = Address of FCB
              	;
              	; uses: af, bc, de, hl
F4C8: D5      	ns_slst:push	de		; Save de
F4C9: 21BEF9  		ld	hl,ns_m0na
F4CC: EB      		ex	de,hl
F4CD: CD6EF9  		call	ns_sdir 
F4D0: AF      		xor	a
F4D1: 12      		ld	(de),a		; Zero terminate string
F4D2: 3E01    		ld	a,1
F4D4: 3274FB  		ld	(ns_dore),a	; The existing file will be closed unconditionally
F4D7: 210800  		ld	hl,0x0008	; Set flag type to directory
F4DA: CDEAF7  		call	ns_opef		; Call ns_open, but don't set flag
F4DD: 21FF00  		ld	hl,0x00FF
F4E0: 2245E3  		ld	(status),hl	; Set status
F4E3: C274ED  		jp	nz,goback	; Error if cannot open file
              		
              		; Send LIST-DIR
F4E6: 21F0F9  		ld	hl,ns_m4
F4E9: 0607    		ld	b,7
F4EB: CD96F8  		call	ns_send		; Start list-dir command
F4EE: 212AFB  		ld	hl,ns_buff
F4F1: CD78F8  		call	ns_rece
F4F4: 3A2AFB  		ld	a,(ns_buff)	; Check for errors
F4F7: FE81    		cp	0x81
F4F9: C274ED  		jp	nz,goback
              		
              		; Copy the file pattern to the pattern buffer
F4FC: E1      		pop	hl		; Get the FCB back
F4FD: 23      		inc	hl
F4FE: 115AFB  		ld	de,ns_ptrn
F501: 060B    		ld	b,11
F503: 7E      	ns_sls0:ld	a,(hl)
F504: E67F    		and	0x7F		; Fix for CP/M stupidness
F506: 12      		ld	(de),a
F507: 13      		inc	de
F508: 23      		inc	hl
F509: 10F8    		djnz	ns_sls0
F50B: C9      		ret
              	
              	; Does a complete find operation
              	; Calls ns_slst, and then falls to ns_find
              	; a = Logical NHACP device
              	; de = Address of FCB
              	;
              	; uses: af, bc, de ,hl
F50C: CDC8F4  	ns_find:call	ns_slst		; Complete find operation
              		
              	; Put the next found file name into the name buffer
              	; If no more names are found, exit with status of 0x00FF
              	; ns_slst must have been run to set up state, no more disk operations
              	; should be been run in the meantime.
              	; enter into ns_lis0 to avoid setting status
              	;
              	; uses: af, bc, de, hl
              	
F50F: 21FF00  	ns_list:ld	hl,0x00FF
F512: 2245E3  		ld	(status),hl	; Set status
              	
              		
F515: 212AFB  	ns_lis0:ld	hl,ns_buff	; Clear out the first 40 bytes of the buffer
F518: AF      		xor	a		; This is to emulate zero termination, due
F519: 77      		ld	(hl),a		; To the fact that NHACP does not zero-terminate
F51A: 112BFB  		ld	de,ns_buff+1	; strings coming back from the adapter...
F51D: 012800  		ld	bc,40		
F520: EDB0    		ldir			
              	
              		; Lets read a directory now
F522: 21F7F9  		ld	hl,ns_m5	; Entry point from ns_sfir
F525: 0607    		ld	b,7
F527: CD96F8  		call	ns_send		; Get the next file
F52A: 212AFB  		ld	hl,ns_buff
F52D: CD78F8  		call	ns_rece	
F530: 3A2AFB  		ld	a,(ns_buff)	; Ensure we got FILE-INFO
F533: FE86    		cp	0x86
F535: C274ED  		jp	nz,goback
              		
              		; Ok, time to format a directory entry
F538: 2140FB  		ld	hl,ns_buff+22
F53B: 1165FB  		ld	de,ns_name
F53E: 0608    		ld	b,8
              		
              		; Format first part of file
F540: CD78F5  		call	ns_ffmt
              		
              		; Now we must skip till we either find a '.' or a '\0'
F543: 7E      	ns_lis1:ld	a,(hl)
F544: B7      		or	a
F545: 2805    		jr	z,ns_lis2
F547: 23      		inc	hl
F548: FE2E    		cp	'.'
F54A: 20F7    		jr	nz,ns_lis1
              		
              		; Now the last part
F54C: 0603    	ns_lis2:ld	b,3
F54E: CD78F5  		call	ns_ffmt
              		
              		; Back dir entry against pattern
F551: 115AFB  		ld	de,ns_ptrn
F554: 2165FB  		ld	hl,ns_name
F557: 060B    		ld	b,11
              	
F559: 1A      	ns_lis3:ld	a,(de)
F55A: 4E      		ld	c,(hl)
F55B: 23      		inc	hl
F55C: 13      		inc	de
F55D: FE3F    		cp	'?'
F55F: 2803    		jr	z,ns_lis4
F561: B9      		cp	c
F562: 20B1    		jr	nz,ns_lis0
F564: 10F3    	ns_lis4:djnz	ns_lis3
F566: C9      		ret
              		
              	; Search for first file
              	; Opens up a directory, then skips to routines that read the first dir entry
              	; de = Address of FCB
              	;
              	; uses: all
F567: AF      	ns_sfir:xor	a
F568: 3275FB  		ld	(ns_isls),a	; Clear "isls" flag
F56B: CDB5F7  		call	ns_ownr
              		
              		; Start the list-dir function
F56E: CDC8F4  		call	ns_slst
              		
              		; Set isls flag
F571: 3E01    		ld	a,1
F573: 3275FB  		ld	(ns_isls),a
              		
              		; Move into ns_snxt
F576: 181C    		jr	ns_snx0
              		
              	; Format incoming files into a dir entry
              	; Will copy over characters until a '.' or '\0' is reached
              	; Any remaining characters will be filled out with spaces
              	; b = Number of characters
              	; de = Destination of data
              	; hl = Source of data
              	;
              	; uses: af, b, de, hl
F578: 7E      	ns_ffmt:ld	a,(hl)
F579: CD81F9  		call	ns_ltou
F57C: B7      		or	a
F57D: 2804    		jr	z,ns_ffm0
F57F: FE2E    		cp	'.'
F581: 2003    		jr	nz,ns_ffm1
F583: 2B      	ns_ffm0:dec	hl
F584: 3E20    		ld	a,' '		; Turn it into a space
F586: 23      	ns_ffm1:inc	hl
F587: 12      		ld	(de),a
F588: 13      		inc	de
F589: 10ED    		djnz	ns_ffmt
F58B: C9      		ret
              		
              	; Search for next file
              	; Takes the open directory and gets the next file
              	;
              	; uses: all
F58C: 3A75FB  	ns_snxt:ld	a,(ns_isls)
F58F: B7      		or	a
F590: C8      		ret	z
              		
              		; Set up the HCCA
F591: CDCBF3  		call	ns_hini	
              		
              		; Find the next entry
F594: CD0FF5  	ns_snx0:call	ns_list
              		
              		; Copy to directory entry
F597: ED5B4DEF		ld	de,(biodma)
F59B: 3A41E3  		ld	a,(userno)
F59E: 12      		ld	(de),a
F59F: 13      		inc	de
F5A0: 2165FB  		ld	hl,ns_name
F5A3: 010B00  		ld	bc,11
F5A6: EDB0    		ldir
              		
              		; Get file size
F5A8: CD97F7  		call	ns_nblk
              		
F5AB: AF      		xor	a
F5AC: B8      		cp	b
F5AD: 0610    		ld	b,16
F5AF: 200F    		jr	nz,ns_snx1
F5B1: AF      		xor	a
F5B2: CB39    		srl	c
F5B4: 17      		rla
F5B5: CB39    		srl	c
F5B7: 17      		rla
F5B8: CB39    		srl	c
F5BA: 17      		rla
F5BB: B7      		or	a
F5BC: 41      		ld	b,c
F5BD: 2801    		jr	z,ns_snx1
F5BF: 04      		inc	b
              		
              		
              		; Set the records to 0
F5C0: 48      	ns_snx1:ld	c,b
F5C1: 0604    		ld	b,4
F5C3: AF      		xor	a
F5C4: 12      	ns_snx2:ld	(de),a
F5C5: 13      		inc	de
F5C6: 10FC    		djnz	ns_snx2
              		
              		; Spoof file size 1-16KB
F5C8: 0610    		ld	b,16
F5CA: 79      		ld	a,c
F5CB: 12      	ns_snx3:ld	(de),a
F5CC: 13      		inc	de
F5CD: B7      		or	a
F5CE: 2801    		jr	z,ns_snx4
F5D0: 3D      		dec	a
F5D1: 10F8    	ns_snx4:djnz	ns_snx3
              		
              		; Set status to 0 and return
F5D3: 210000  		ld	hl,0
F5D6: 2245E3  		ld	(status),hl
F5D9: C374ED  		jp	goback
              		
              	; Delete files based on pattern
              	; Will return error if less than 1 file is found
              	; de = Address to FCB
              	;
              	; uses: all
F5DC: CDB5F7  	ns_dele:call	ns_ownr
              	
              		; Set first part of remove message prototype
F5DF: F5      		push	af
F5E0: EB      		ex	de,hl
F5E1: 1106FA  		ld	de,ns_m6na
F5E4: CD6EF9  		call	ns_sdir
F5E7: 3E2F    		ld	a,'/'
F5E9: 12      		ld	(de),a
F5EA: EB      		ex	de,hl
F5EB: F1      		pop	af
              	
              		; Start the list-dir function
F5EC: CDC8F4  		call	ns_slst
              		
              		; Search for the next entry, do not set flag
F5EF: CD15F5  	ns_del0:call	ns_lis0
              	
              		; Copy over file name into message
F5F2: 1109FA  		ld	de,ns_m6na+3
F5F5: 2140FB  		ld	hl,ns_buff+22
F5F8: 011000  		ld	bc,16
F5FB: EDB0    		ldir
              		
              		; Send delete message
F5FD: 21FEF9  		ld	hl,ns_m6
F600: 061B    		ld	b,27
F602: CD96F8  		call	ns_send
F605: 212AFB  		ld	hl,ns_buff
F608: CD78F8  		call	ns_rece
              		
              		; Set status to 0, and get next element
F60B: 210000  		ld	hl,0
F60E: 2245E3  		ld	(status),hl
F611: 18DC    		jr	ns_del0
              	
              		
              	; Prepare to access a file
              	; Checks the magic number to ensure that the file is in fact open
              	; Also checks ns_dore and ns_cfcb to see if a reopen is required
              	; If so, copy filename from FCB and do NHACP open
              	; a = Logical NHACP device
              	; de = Address of FCB
              	;
              	; uses: af, bc, hl
F613: 4F      	ns_aces:ld	c,a
F614: 210D00  		ld	hl,13
F617: 19      		add	hl,de
F618: 7E      		ld	a,(hl)
F619: FEE7    		cp	0xE7
F61B: 2809    		jr	z,ns_ace0
              		
              		; Return invalid FCB
F61D: 210900  		ld	hl,9
F620: 2245E3  		ld	(status),hl
F623: C374ED  		jp	goback
              		
              		; Check to see if it is currently being accessed
F626: 2A72FB  	ns_ace0:ld	hl,(ns_cfcb)
F629: ED52    		sbc	hl,de
F62B: 2005    		jr	nz,ns_ace1
              		
              		; See if a reopen is needed
F62D: 3A74FB  		ld	a,(ns_dore)
F630: B7      		or	a
F631: C8      		ret	z
              		
              		; A reopen is needed, do it!
F632: 21FF00  	ns_ace1:ld	hl,0x00FF
F635: 2245E3  		ld	(status),hl
              		
              		; Set the current FCB to this one
F638: ED5372FB		ld	(ns_cfcb),de
              		
              		; Clear ns_dore flag
F63C: AF      		xor	a
F63D: 3274FB  		ld	(ns_dore),a
              		
              		; Copy over the true filename
F640: 211000  		ld	hl,16
F643: 19      		add	hl,de
F644: D5      		push	de
F645: 11BEF9  		ld	de,ns_m0na
F648: 79      		ld	a,c
F649: CD6EF9  		call	ns_sdir
F64C: 3E2F    		ld	a,'/'
F64E: 12      		ld	(de),a
F64F: 13      		inc	de
F650: 011000  		ld	bc,16
F653: EDB0    		ldir
              		
              		; Now open the file
F655: CDE7F7  		call	ns_open
F658: D1      		pop	de
F659: C9      		ret
              		
              	; Takes in a FCB, and returns the current record to access
              	; de = Address to FCB
              	;
              	; Returns record # in bc
              	; uses: af, bc, hl
F65A: 210C00  	ns_gcre:ld	hl,0x0C
F65D: 19      		add	hl,de
F65E: 46      		ld	b,(hl)
F65F: 0E00    		ld	c,0
F661: CB38    		srl	b
F663: CB19    		rr	c
F665: 23      		inc	hl
F666: 23      		inc	hl
F667: 7E      		ld	a,(hl)
F668: 07      		rlca
F669: 07      		rlca
F66A: 07      		rlca
F66B: 07      		rlca
F66C: B0      		or	b
F66D: 47      		ld	b,a
F66E: 212000  		ld	hl,0x20
F671: 19      		add	hl,de
F672: 7E      		ld	a,(hl)
F673: B1      		or	c
F674: 4F      		ld	c,a
F675: C9      		ret
              		
              	; Takes in a random record, and writes it to the FCB
              	; bc = Record #
              	; de = Address to FCB
              	;
              	; uses: af, bc, hl
F676: 212000  	ns_scre:ld	hl,0x20
F679: 19      		add	hl,de
F67A: 79      		ld	a,c
F67B: E67F    		and	0x7F
F67D: 77      		ld	(hl),a
F67E: 210E00  		ld	hl,0x0E
F681: 19      		add	hl,de
F682: 78      		ld	a,b
F683: 0F      		rrca
F684: 0F      		rrca
F685: 0F      		rrca
F686: 0F      		rrca
F687: E60F    		and	0x0F
F689: 77      		ld	(hl),a
F68A: 2B      		dec	hl
F68B: 2B      		dec	hl
F68C: CB21    		sla	c
F68E: CB10    		rl	b
F690: 78      		ld	a,b
F691: E60F    		and	0x0F
F693: 77      		ld	(hl),a
F694: C9      		ret
              			
              	; Read next record
              	; Reads the next 128 bytes in a file into the DMA address
              	; The FCB record count will be incremented by 1
              	; de = Address of FCB
              	;
              	; uses: all
F695: CDB5F7  	ns_frea:call	ns_ownr
              	
              		; Set file up to access
F698: CD13F6  		call	ns_aces
              		
              		; Get the record to read
F69B: CD5AF6  		call	ns_gcre
              		
              		; Set up and do read
F69E: C5      		push	bc
F69F: D5      		push	de
F6A0: 50      	ns_fre0:ld	d,b
F6A1: 59      		ld	e,c
F6A2: 2A4DEF  		ld	hl,(biodma)
F6A5: CD09F8  		call	ns_getb
              		
              		; Make sure there were no issues
F6A8: DA74ED  	ns_fre1:jp	c,goback
              		
              		; Increment and writeback
F6AB: D1      		pop	de
F6AC: C1      		pop	bc
F6AD: 03      		inc	bc
F6AE: CD76F6  		call	ns_scre
              		
              		; Set return status
F6B1: 210000  		ld	hl,0
F6B4: 3A76FB  		ld	a,(ns_tran)
F6B7: B7      		or	a
F6B8: 2001    		jr	nz,ns_fre2
F6BA: 23      		inc	hl
              		
F6BB: 2245E3  	ns_fre2:ld	(status),hl
F6BE: C374ED  		jp	goback
              		
              	; Write next record
              	; Writes the next 128 bytes into a file from the DMA address
              	; The FCB record count will be incremented by 1
              	; de = Address of FCB
              	;
              	; uses: all
F6C1: CDB5F7  	ns_fwri:call	ns_ownr
              	
              		; Set file up to access
F6C4: CD13F6  		call	ns_aces
              		
              		; Get the record to write
F6C7: CD5AF6  		call	ns_gcre
              		
              		; Set up and do write
F6CA: C5      		push	bc
F6CB: D5      		push	de
F6CC: 50      	ns_fwr0:ld	d,b
F6CD: 59      		ld	e,c
F6CE: 2A4DEF  		ld	hl,(biodma)
F6D1: CD4AF8  		call	ns_putb
              		
              		; Set amount transfered to 128
F6D4: 3E80    		ld	a,128
F6D6: 3276FB  		ld	(ns_tran),a
              		
              		; Continue in read
F6D9: 18CD    		jr	ns_fre1
              		
              	; Read record random
              	; Takes the random address and read a sector from it
F6DB: CDB5F7  	ns_rrea:call	ns_ownr
              	
              		; Set file up to access
F6DE: CD13F6  		call	ns_aces
              		
              		; Decode random address
F6E1: CD0CF7  		call	ns_deco
F6E4: 0B      		dec	bc
F6E5: C5      		push	bc
F6E6: D5      		push	de
F6E7: 03      		inc	bc
F6E8: 18B6    		jr	ns_fre0
              		
              	; Write record random
              	; Takes the random address and write a sector to it
              	; de = Address to FCB
              	;
              	; uses: all
F6EA: CDB5F7  	ns_rwri:call	ns_ownr
              	
              		; Set file up to access
F6ED: CD13F6  		call	ns_aces
              		
              		; Decode random address
F6F0: CD0CF7  		call	ns_deco
F6F3: 0B      		dec	bc
F6F4: C5      		push	bc
F6F5: D5      		push	de
F6F6: 03      		inc	bc
F6F7: 18D3    		jr	ns_fwr0
              		
              	; Set random record
              	; de = Address to FCB
              	;
              	; uses: all
F6F9: CDB5F7  	ns_rrec:call	ns_ownr
              		
              		; Get current address from FCB
F6FC: CD5AF6  		call	ns_gcre
              		
              		; Set FCB random record
F6FF: 212100  		ld	hl,0x21
F702: 19      		add	hl,de
F703: 71      		ld	(hl),c
F704: 23      		inc	hl
F705: 70      		ld	(hl),b
F706: 23      		inc	hl
F707: 3600    		ld	(hl),0
              		
              		; Done
F709: C374ED  		jp	goback
              		
              	; Decodes random address
              	; de = Address to FCB
              	;
              	; Returns block number in bc
              	; uses: af, bc, hl
F70C: 212100  	ns_deco:ld	hl,0x21
F70F: 19      		add	hl,de
F710: 4E      		ld	c,(hl)
F711: 23      		inc	hl
F712: 46      		ld	b,(hl)
F713: C9      		ret
              		
              	; Make new file
              	; Reboot the system if the file already exists
              	; de = Address to FCB
              	;
              	; uses: all
F714: CDB5F7  	ns_fmak:call	ns_ownr
              	
              		; We either succeed or die trying
F717: 210000  		ld	hl,0
F71A: 2245E3  		ld	(status),hl
              	
              		; Decode filename into open buffer
F71D: 21BEF9  		ld	hl,ns_m0na
F720: D5      		push	de
F721: EB      		ex	de,hl
F722: 23      		inc	hl
F723: CD36F9  		call	ns_form
              		
              		; Set the flag and open
F726: 213000  		ld	hl,0x0030
F729: 22BBF9  		ld	(ns_m0fl),hl
F72C: CDEAF7  		call	ns_opef
              		
              		; Error? time to reboot!
F72F: C20000  		jp	nz,0
              		
              		; Nope? Activate FCB
F732: D1      		pop	de
              		
              		; Force reopen
F733: 3E01    		ld	a,1
F735: 3274FB  		ld	(ns_dore),a
              		
              		; Do an open
F738: C376F4  		jp	ns_fopn
              		
              	; Rename file
              	; Similar to delete, wildcards are allowed
              	; de = Address to FCB
              	;
              	; uses: all
F73B: CDB5F7  	ns_frnm:call	ns_ownr
              	
              		; Set first part of rename message prototype
F73E: F5      		push	af
F73F: EB      		ex	de,hl
F740: 111FFA  		ld	de,ns_m7n0
F743: CD6EF9  		call	ns_sdir
F746: 3E2F    		ld	a,'/'
F748: 12      		ld	(de),a
F749: F1      		pop	af
F74A: F5      		push	af
F74B: E5      		push	hl
F74C: 111100  		ld	de,17
F74F: 19      		add	hl,de
F750: 1133FA  		ld	de,ns_m7n1
F753: CD36F9  		call	ns_form
F756: D1      		pop	de
F757: F1      		pop	af
              		
              	
              		; Start the list-dir function
F758: CDC8F4  		call	ns_slst
              		
              		; Search for the next entry, do not set flag
F75B: CD15F5  	ns_frn0:call	ns_lis0
              	
              		; Copy over file name into message
F75E: 1122FA  		ld	de,ns_m7n0+3
F761: 2140FB  		ld	hl,ns_buff+22
F764: 011000  		ld	bc,16
F767: EDB0    		ldir
              		
              		; Send rename message
F769: 2119FA  		ld	hl,ns_m7
F76C: 062D    		ld	b,45
F76E: CD96F8  		call	ns_send
F771: 212AFB  		ld	hl,ns_buff
F774: CD78F8  		call	ns_rece
              		
              		; Set status to 0, and get next element
F777: 210000  		ld	hl,0
F77A: 2245E3  		ld	(status),hl
F77D: 18DC    		jr	ns_frn0
              		
              	; Place size of file into FCB
              	; de = Address to FCB
              	;
              	; uses: all
F77F: CDB5F7  	ns_size:call	ns_ownr
              	
              		; Find file
F782: D5      		push	de
F783: CD0CF5  		call	ns_find
F786: D1      		pop	de
              		
              		; Get number of blocks
F787: CD97F7  		call	ns_nblk
              		
              		; Set in FCB
F78A: 212100  		ld	hl,0x21
F78D: 19      		add	hl,de
F78E: 71      		ld	(hl),c
F78F: 23      		inc	hl
F790: 70      		ld	(hl),b
F791: 23      		inc	hl
F792: 3600    		ld	(hl),0
              	
F794: C374ED  		jp	goback	
              		
              	; Use a FILE-INFO block in ns_buff to calculate
              	; the number of blocks in a file
              	;
              	; Returns number of blocks in bc
              	; uses: af, bc, hl
F797: 213DFB  	ns_nblk:ld	hl,ns_buff+19
F79A: 46      		ld	b,(hl)
F79B: 2B      		dec	hl
F79C: 4E      		ld	c,(hl)
F79D: 2B      		dec	hl
F79E: 7E      		ld	a,(hl)
F79F: CB27    		sla	a
F7A1: CB11    		rl	c
F7A3: CB10    		rl	b
F7A5: B7      		or	a
F7A6: C8      		ret	z
F7A7: 03      		inc	bc
F7A8: C9      		ret
              		
              	; Set a 16 bit mask based on a number from 0-15
              	; a = Bit to set
              	;
              	; Returns bit mask in bc
              	; uses: af, bc
F7A9: 010100  	ns_domk:ld	bc,1
F7AC: B7      		or	a
F7AD: C8      	ns_dom0:ret	z
F7AE: CB21    		sla	c
F7B0: CB10    		rl	b
F7B2: 3D      		dec	a
F7B3: 18F8    		jr	ns_dom0
              		
              	; Check if driver owns device
              	; Bail if it does not
              	; If it does, get the logical NHACP device
              	; de = Address of FCB
              	;
              	; Returns logical device in a
              	; uses: af, hl
F7B5: C5      	ns_ownr:push	bc
F7B6: CDE0F7  		call	ns_getd		; Get FCB device
F7B9: CDA9F7  		call	ns_domk		; Create bitmask
F7BC: 2A70FB  		ld	hl,(ns_mask)
F7BF: 7C      		ld	a,h
F7C0: A0      		and	b
F7C1: 2002    		jr	nz,ns_own0
F7C3: 7D      		ld	a,l
F7C4: A1      		and	c
F7C5: 2816    	ns_own0:jr	z,ns_exit	; Exit if does not own	
F7C7: 217DEF  		ld	hl,bdevsw+2
F7CA: CDE0F7  		call	ns_getd		; Get FCB device
F7CD: 010400  		ld	bc,4
F7D0: B7      		or	a
F7D1: 2804    	ns_own1:jr	z,ns_own2
F7D3: 09      		add	hl,bc
F7D4: 3D      		dec	a
F7D5: 18FA    		jr	ns_own1
F7D7: CDCBF3  	ns_own2:call	ns_hini		; We are commited at this point, init HCCA
F7DA: 7E      		ld	a,(hl)		; a = Logical NHACP device
F7DB: C1      		pop	bc
F7DC: C9      		ret
              	
              	; Exit, do not return to caller
F7DD: C1      	ns_exit:pop	bc
F7DE: F1      		pop	af		; Throw away caller address
F7DF: C9      		ret
              	
              	; Gets the logical device number from a FCB
              	; de = Address of FCB
              	; 
              	; Logical device returns in a
              	; uses: af
F7E0: 1A      	ns_getd:ld	a,(de)
F7E1: 3D      		dec	a
F7E2: F0      		ret	p
F7E3: 3A42E3  		ld	a,(active)
F7E6: C9      		ret
              	
              	; Open the prepared file
              	; Closes the existing file too
              	; ns_opef can be called to set custom flag
              	;
              	; Flag z cleared on error
              	; uses: af, b, hl
F7E7: 210200  	ns_open:ld	hl,0x0002	; Read/Write Protect flag
F7EA: 22BBF9  	ns_opef:ld	(ns_m0fl),hl
F7ED: 21D2F9  		ld	hl,ns_m1
F7F0: 0606    		ld	b,6
F7F2: CD96F8  		call	ns_send
F7F5: 21B5F9  		ld	hl,ns_m0
F7F8: 061C    		ld	b,28
F7FA: CD96F8  		call	ns_send
F7FD: 212AFB  		ld	hl,ns_buff
F800: CD78F8  		call	ns_rece
F803: 3A2AFB  		ld	a,(ns_buff)
F806: FE83    		cp	0x83
F808: C9      		ret
              		
              	; Gets a block from the currently open file
              	; and places it in (hl)
              	; de = Block to read
              	; hl = Destination for information
              	;
              	; Returns location directly after in hl
              	; Carry flag set on error
              	; uses: af, b, hl
F809: CD0FF8  	ns_getb:call	ns_get0
F80C: C3E5F3  		jp	ns_dflt
F80F: EB      	ns_get0:ex	de,hl
F810: 22DEF9  		ld	(ns_m2bn),hl
F813: EB      		ex	de,hl
F814: E5      		push	hl
F815: 21D8F9  		ld	hl,ns_m2
F818: 060C    		ld	b,12
F81A: CD96F8  		call	ns_send
F81D: E1      		pop	hl
F81E: D8      		ret	c
F81F: CD9FF8  		call	ns_hcrd
F822: CDA2F8  		call	ns_hcre
F825: D8      		ret	c
F826: FE84    		cp	0x84
F828: 37      		scf
F829: 2017    		jr	nz,ns_get2
F82B: CDA2F8  		call	ns_hcre
F82E: 3276FB  		ld	(ns_tran),a
F831: 47      		ld	b,a
F832: CDA2F8  		call	ns_hcre
F835: 78      		ld	a,b
F836: B7      		or	a
F837: C8      		ret	z
F838: CDA2F8  	ns_get1:call	ns_hcre
F83B: D8      		ret	c
F83C: 77      		ld	(hl),a
F83D: 23      		inc	hl
F83E: 10F8    		djnz	ns_get1
F840: B7      		or	a
F841: C9      		ret
F842: CD9FF8  	ns_get2:call	ns_hcrd	; Read the error message and exit
F845: CDA2F8  		call	ns_hcre
F848: 37      		scf
F849: C9      		ret
              		
              	; Puts a block into the currently open file
              	; from that location (hl)
              	; de = Block to write
              	; hl = Source of information
              	;
              	; Carry flag set on error
              	; uses: af, b, hl
F84A: CD50F8  	ns_putb:call	ns_put0
F84D: C3E5F3  		jp	ns_dflt
F850: EB      	ns_put0:ex	de,hl
F851: 22EAF9  		ld	(ns_m3bn),hl
F854: EB      		ex	de,hl
F855: E5      		push	hl
F856: 21E4F9  		ld	hl,ns_m3
F859: 060C    		ld	b,12
F85B: CD96F8  		call	ns_send		; Send message precursor
F85E: E1      		pop	hl
F85F: D8      		ret	c
F860: 0680    		ld	b,128
F862: 7E      	ns_put1:ld	a,(hl)		; Send the block
F863: CDECF8  		call	ns_hcwr
F866: D8      		ret	c
F867: 23      		inc	hl
F868: 10F8    		djnz	ns_put1
F86A: 212AFB  		ld	hl,ns_buff
F86D: CD78F8  		call	ns_rece
F870: 3A2AFB  		ld	a,(ns_buff)
F873: FE81    		cp	0x81
F875: C8      		ret	z
F876: 37      		scf
F877: C9      		ret
              		
              	; Receives a general response from the NHACP server
              	; hl = Destination of message
              	;
              	; Carry flag set on error
              	; uses: af, b, hl
F878: CDFCF3  	ns_rece:call	ns_dsnd
F87B: CD81F8  		call	ns_rec0
F87E: C3E5F3  		jp	ns_dflt
F881: CDA2F8  	ns_rec0:call	ns_hcre
F884: D8      		ret	c		; Existing error
F885: 47      		ld	b,a
F886: CDA2F8  		call	ns_hcre
F889: D8      		ret	c		; Existing error
F88A: 37      		scf
F88B: C0      		ret	nz		; Message too big!
F88C: CDA2F8  	ns_rec1:call	ns_hcre
F88F: D8      		ret	c		; Error!
F890: 77      		ld	(hl),a
F891: 23      		inc	hl
F892: 10F8    		djnz	ns_rec1
F894: B7      		or	a
F895: C9      		ret
              		
              	; Write a number of bytes to the HCCA port
              	; b = Bytes to write
              	; hl = Start of message
              	;
              	; Carry flag set on error
              	; uses: af, b, hl
F896: 7E      	ns_send:ld	a,(hl)
F897: 23      		inc	hl
F898: CDECF8  		call	ns_hcwr
F89B: D8      		ret	c		; Error!
F89C: 10F8    		djnz	ns_send
F89E: C9      		ret
              		
              	; Read from the HCCA port
              	; Assumes AY is set to reg 15
              	; Will panic on timeout
              	;
              	; Returns result in a
              	; Carry flag set on error
              	; Uses: af
F89F: CDA2F8  	ns_hcrd:call	ns_hcre
F8A2: AF      	ns_hcre:xor	a
F8A3: 329AF9  		ld	(ns_inf),a
F8A6: D5      		push	de
F8A7: 3E09    		ld	a,0x09
F8A9: D300    		out	(ns_nctl),a	; Turn on recv light
F8AB: 11FFFF  		ld	de,0xFFFF
F8AE: 3A9AF9  	ns_hcr0:ld	a,(ns_inf)
F8B1: B7      		or	a
F8B2: 201D    		jr	nz,ns_hcr2
F8B4: DB40    		in	a,(ns_ayda)
              		;bit	0,a
              		;jr	z,ns_hcr0	; Await an interrupt
              		;bit	1,a
              		;jr	z,ns_hcr1
F8B6: E60F    		and	0x0F
F8B8: EE01    		xor	0b00000001
F8BA: 280C    		jr	z,ns_hcr1
F8BC: 1B      		dec	de
F8BD: 7B      		ld	a,e
F8BE: B2      		or	d
F8BF: 20ED    		jr	nz,ns_hcr0
F8C1: 3E01    	ns_hcer:ld	a,0x01
F8C3: D300    		out	(ns_nctl),a	; Turn off recv light
F8C5: 37      		scf
F8C6: D1      		pop	de
F8C7: C9      		ret			; Timed out waiting
F8C8: 3E01    	ns_hcr1:ld	a,0x01
F8CA: D300    		out	(ns_nctl),a	; Turn off recv light
F8CC: DB80    		in	a,(ns_hcca)
F8CE: D1      		pop	de
F8CF: B7      		or	a
F8D0: C9      		ret
F8D1: 3E01    	ns_hcr2:ld	a,0x01
F8D3: D300    		out	(ns_nctl),a	; Turn off recv light
F8D5: AF      		xor	a
F8D6: 329AF9  		ld	(ns_inf),a
F8D9: 3A99F9  		ld	a,(ns_inb)
F8DC: D1      		pop	de
F8DD: C9      		ret
              		
              	; HCCA read interrupt
              	; Reads from the HCCA, buffers it, and then sets the flag
              	;
              	; uses: none
F8DE: F5      	ns_rirq:push	af
F8DF: DB80    		in	a,(ns_hcca)
F8E1: 3299F9  		ld	(ns_inb),a
F8E4: 3E01    		ld	a,1
F8E6: 329AF9  		ld	(ns_inf),a
F8E9: F1      		pop	af
F8EA: FB      		ei
F8EB: C9      		ret
              		
              		
              	; Write to the HCCA port
              	; Assumes AY is set to reg 15
              	; Will panic on timeout
              	; a = Character to write
              	;
              	; Carry flag set on error
              	; Uses: f
F8EC: D5      	ns_hcwr:push	de
F8ED: 3297F9  		ld	(ns_outb),a
F8F0: AF      		xor	a
F8F1: 3298F9  		ld	(ns_outf),a
F8F4: CDF2F3  		call	ns_esnd
F8F7: 11FFFF  		ld	de,0xFFFF
F8FA: 3E21    		ld	a,0x21
F8FC: D300    		out	(ns_nctl),a	; Turn on send light
F8FE: 3A98F9  	ns_hcw0:ld	a,(ns_outf)
F901: B7      		or	a
F902: 2017    		jr	nz,ns_hcw2
F904: DB40    		in	a,(ns_ayda)
              		;bit	0,a
              		;jr	z,ns_hcw0	; Await an interrupt
              		;bit	1,a
              		;jr	nz,ns_hcw1
F906: E60F    		and	0x0F
F908: EE03    		xor	0b00000011
F90A: 280A    		jr	z,ns_hcw1
F90C: 1B      		dec	de
F90D: 7B      		ld	a,e
F90E: B2      		or	d
F90F: 20ED    		jr	nz,ns_hcw0
F911: CDFCF3  		call	ns_dsnd
F914: 18AB    		jr	ns_hcer		; Timed out waiting
F916: 3A97F9  	ns_hcw1:ld	a,(ns_outb)
F919: D380    		out	(ns_hcca),a
F91B: D1      	ns_hcw2:pop	de
F91C: 3E01    		ld	a,0x01
F91E: D300    		out	(ns_nctl),a	; Turn off send light
F920: CDFCF3  		call	ns_dsnd
F923: B7      		or	a
F924: C9      		ret
              		
              	; HCCA write interrupt
              	; Writes to the HCCA from the buffer, and 
F925: F5      	ns_wirq:push	af
F926: 3A97F9  		ld	a,(ns_outb)
F929: D380    		out	(ns_hcca),a
F92B: 3E01    		ld	a,1
F92D: 3298F9  		ld	(ns_outf),a
F930: CDFCF3  		call	ns_dsnd		; Y'all can't behave, turning off
F933: F1      		pop	af
F934: FB      		ei
F935: C9      		ret
              		
              		
              	; Takes a FCB-style name and formats it to standard notation
              	; a = Logical NHACP device
              	; de = Desintation for formatted name
              	; hl = Source FCB file name
              	;
              	; uses: all
F936: CD6EF9  	ns_form:call	ns_sdir
F939: 3E2F    		ld	a,'/'
F93B: CD7EF9  		call	ns_wchd
F93E: 0608    		ld	b,8		; Look at all 8 possible name chars
F940: 7E      	ns_for1:ld	a,(hl)
F941: E67F    		and	0x7F
F943: CD8CF9  		call	ns_utol
F946: FE21    		cp	0x21
F948: 3806    		jr	c,ns_for2
F94A: CD7EF9  		call	ns_wchd
F94D: 23      		inc	hl
F94E: 10F0    		djnz	ns_for1
F950: 3E2E    	ns_for2:ld	a,0x2E		; '.'
F952: CD7EF9  		call	ns_wchd
F955: 48      		ld	c,b
F956: 0600    		ld	b,0
F958: 09      		add	hl,bc		; Fast forward to extenstion
F959: 0603    		ld	b,3		; Copy over extension
F95B: 7E      	ns_for3:ld	a,(hl)
F95C: E67F    		and	0x7F
F95E: CD8CF9  		call	ns_utol
F961: FE21    		cp	0x21
F963: 3806    		jr	c,ns_for4
F965: CD7EF9  		call	ns_wchd
F968: 23      		inc	hl
F969: 10F0    		djnz	ns_for3
F96B: AF      	ns_for4:xor	a		; Zero terminate
F96C: 12      		ld	(de),a
F96D: C9      		ret
              		
              	; Part of ns_form, but sometimes is called independently
              	; Sets the directory to access files from
              	; a = Logical NHACP device
              	; de = Desintation for formatted name
              	;
              	; uses: af, de
F96E: C641    	ns_sdir:add	a,'A'
F970: CD7EF9  		call	ns_wchd
F973: 3A41E3  		ld	a,(userno)
F976: C630    		add	a,'0'
F978: FE3A    		cp	':'
F97A: 3802    		jr	c,ns_wchd
F97C: C607    		add	a,7
              		
              		; Fall to ns_wchd
              		
              	; Writes a byte to (de), then increments de
              	; a = Character to write
              	; de = Destination for character
              	;
              	; Returns de=de+1
              	; uses: af, de
F97E: 12      	ns_wchd:ld	(de),a
F97F: 13      		inc	de
F980: C9      		ret
              	
              	; Converts lowercase to uppercase
              	; a = Character to convert
              	;
              	; Returns uppercase in A
              	; uses: af
F981: E67F    	ns_ltou:and	0x7F
F983: FE61    		cp	0x61		; 'a'
F985: D8      		ret	c
F986: FE7B    		cp	0x7B		; '{'
F988: D0      		ret	nc
F989: D620    		sub	0x20
F98B: C9      		ret
              		
              	; Converts uppercase to lowercase
              	; a = Character to convert
              	;
              	; Returns lowercase in A
              	; uses: af
F98C: E67F    	ns_utol:and	0x7F
F98E: FE41    		cp	0x41		; 'A'
F990: D8      		ret	c
F991: FE5B    		cp	0x5B		; '['
F993: D0      		ret	nc
F994: C620    		add	0x20
F996: C9      		ret
              		
              	; Byte to send out of HCCA
F997: 00      	ns_outb:defb	0
              	
              	; HCCA output flag
F998: 00      	ns_outf:defb	0
              	
              	; Byte received from HCCA
F999: 00      	ns_inb:	defb	0
              	
              	; HCCA input flag
F99A: 00      	ns_inf: defb	0
              		
              	; Path to CP/M image
              	; Total length: 13 bytes
F99B: 41302F43	ns_p0:	defb	'A0/CPM22.SYS',0
F99F: 504D3232	
F9A3: 2E535953	
F9A7: 00      	
              	
              	; Path to GRB image
              	; Total length: 13 bytes
F9A8: 41302F46	ns_p1:	defb	'A0/FONT.GRB',0,0
F9AC: 4F4E542E	
F9B0: 47524200	
F9B4: 00      	
              	
              	; Message prototype to open a file
              	; Total length: 28 bytes
F9B5: 8F00    	ns_m0:	defb	0x8F,0x00
F9B7: 1800    		defw	24		; Message length
F9B9: 01      		defb	0x01		; Cmd: STORAGE-OPEN
F9BA: 81      		defb	ns_fild		; Default file descriptor
F9BB: 0000    	ns_m0fl:defw	0x0000		; Read/Write flags
F9BD: 13      		defb	19		; File name length
F9BE: 58585858	ns_m0na:defs	19,'X'		; File name field
F9C2: 58...   	
F9D1: 00      		defb	0x00		; Padding
              		
              	; Message prototype to close a file
              	; Total length: 6 bytes
F9D2: 8F00    	ns_m1:	defb	0x8F,0x00
F9D4: 0200    		defw	2		; Message length
F9D6: 05      		defb	0x05		; Cmd: FILE-CLOSE
F9D7: 81      		defb	ns_fild		; Default file descriptor
              		
              	; Message prototype to read a block
              	; Total length: 12 bytes
F9D8: 8F00    	ns_m2:	defb	0x8F,0x00
F9DA: 0800    		defw	8		; Message length
F9DC: 07      		defb	0x07		; Cmd: STORAGE-GET-BLOCK
F9DD: 81      		defb	ns_fild		; Default file descritor
F9DE: 00000000	ns_m2bn:defw	0x00,0x00	; Block number
F9E2: 8000    		defw	128		; Block length
              		
              	; Message prototype to write a block
              	; Total length: 12 bytes
F9E4: 8F00    	ns_m3:	defb	0x8F,0x00
F9E6: 8800    		defw	136		; Message length
F9E8: 08      		defb	0x08		; Cmd: STORAGE-PUT-BLOCK
F9E9: 81      		defb	ns_fild		; Default file descritor
F9EA: 00000000	ns_m3bn:defw	0x00,0x00	; Block number
F9EE: 8000    		defw	128		; Block length
              		
              	; Message prototype to start a list-dir
              	; Total length: 7 bytes
F9F0: 8F00    	ns_m4:	defb	0x8F,0x00
F9F2: 0300    		defw	3		; Message length
F9F4: 0E      		defb	0x0E		; Cmd: LIST-DIR
F9F5: 81      		defb	ns_fild		; Default file descriptor
F9F6: 00      		defb	0x00		; Null string
              		
              	; Message prototype to get the next dir entry
              	; Total length: 7 bytes
F9F7: 8F00    	ns_m5:	defb	0x8F,0x00
F9F9: 0300    		defw	3		; Message length
F9FB: 0F      		defb	0x0F		; Cmd: GET-DIR-ENTRY
F9FC: 81      		defb	ns_fild		; Default file descriptor
F9FD: 10      		defb	16		; Max length of file
              		
              	; Message prototype to remove a file
              	; Total length: 27 bytes
F9FE: 8F00    	ns_m6:	defb	0x8F,0x00
FA00: 1700    		defw	23		; Message length
FA02: 10      		defb	0x10		; Cmd: REMOVE
FA03: 0000    		defw	0x0000		; Remove regular file
FA05: 13      		defb	19		; File name length
FA06: 58585858	ns_m6na:defs	19,'X'		; File name field
FA0A: 58...   	
              	
              	; Message prototype to rename a file
              	; Total length: 45 bytes
FA19: 8F00    	ns_m7:	defb	0x8F,0x00
FA1B: 2900    		defw	41		; Message length
FA1D: 11      		defb	0x11		; Cmd: RENAME
FA1E: 13      		defb	19		; File name #1 length
FA1F: 58585858	ns_m7n0:defs	19,'X'		; File name #1 field
FA23: 58...   	
FA32: 13      		defb	19		; File name #2 length
FA33: 58585858	ns_m7n1:defs	19,'X'		; File name #2 field
FA37: 58...   	
              	#include "../dev/nabu_prt.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   P A R A L L E L   O U T P U T
              	;*
              	;*      A simple output-only device driver for the NABU
              	;*      parellel printer port. 
              	;* 
              	;**************************************************************
              	;
              	.area	_TEXT
              	
0040:         	pr_ayda	equ	0x40		; AY-3-8910 data port
0041:         	pr_atla	equ	0x41		; AY-3-8910 latch port
00B0:         	pr_prnt	equ	0xB0		; Parallel output
0000:         	pr_ctrl	equ	0x00		; Device control register
              	
              	; Driver jump table 
FA46: B7      	prtdev:	or	a
FA47: 2808    		jr	z,pr_init
FA49: 3D      		dec	a
FA4A: 2806    		jr	z,pr_stat
FA4C: 3D      		dec	a
FA4D: 2805    		jr	z,pr_read
FA4F: 1805    		jr	pr_writ
              		
              	; Device init
              	; Does nothing
              	;
              	; uses: none
FA51: C9      	pr_init:ret
              	
              	; Device status 
              	; There are never any characters to read
              	;
              	; Returns a=0xFF if there is a character to read
              	; uses: af
FA52: AF      	pr_stat:xor	a
FA53: C9      		ret
              		
              	; Waits for a character to come in and returns it
              	; No characters to read, returns 0
              	;
              	; Returns ASCII key in A
              	; uses: af
FA54: AF      	pr_read:xor	a
FA55: C9      		ret
              		
              	; Writes a character to the device
              	; c = Character to write
              	;
              	; uses: af, bc
FA56: 3E0F    	pr_writ:ld	a,0x0F
FA58: D341    		out	(pr_atla),a	; AY register = 15
              		
FA5A: DB40    	pr_wri0:in	a,(pr_ayda)	; Wait for not busy
FA5C: E610    		and	0x10
FA5E: 20FA    		jr	nz,pr_wri0
              		
FA60: 79      		ld	a,c
FA61: D3B0    		out	(pr_prnt),a	; Write data
              		
FA63: 3E05    		ld	a,0x05		; Strobe
FA65: D300    		out	(pr_ctrl),a
              		
FA67: 0620    		ld	b,32		
FA69: 10FE    	pr_wri1:djnz	pr_wri1		; Wait a few cycles
              		
FA6B: 3E01    		ld	a,0x01		; Strobe off
FA6D: D300    		out	(pr_ctrl),a
              		
FA6F: C9      		ret
              		
              	#include "../dev/nabu_sio.asm"
              	;
              	;**************************************************************
              	;*
              	;*        N A B U   S E R I A L   O P T I O N   C A R D
              	;*
              	;*      This driver allows the NABU serial option card to be
              	;*      used as a bidirectional Ishkur serial device. It will
              	;*      automatically search for a serial card on init. Serial
              	;*      cards are numbered by order. The first serial card gets
              	;*      a minor # of 0, the second card gets a minor number of
              	;*      1, etc... Up to 4 serial cards are supported.
              	;* 
              	;**************************************************************
              	;
              	.area	_TEXT
              	
              	
              	
              	; Driver jump table 
FA70: B7      	siodev:	or	a
FA71: 2808    		jr	z,so_init
FA73: 3D      		dec	a
FA74: 2833    		jr	z,so_stat
FA76: 3D      		dec	a
FA77: 2841    		jr	z,so_read
FA79: 1851    		jr	so_writ
              		
              	; Device init
              	; Tries to find the option card if it is installed
              	; hl = Device options
              	;
              	; uses: none
FA7B: 11E0FA  	so_init:ld	de,so_atab
FA7E: 45      		ld	b,l
FA7F: 04      		inc	b		; Slot 1,2,3,...
FA80: 19      		add	hl,de 		; Get address table entry
FA81: 0ECF    		ld	c,0xCF		; First slot
              		
FA83: ED78    	so_ini0:in	a,(c)
FA85: FE08    		cp	0x08
FA87: 2807    		jr	z,so_ini2
              		
FA89: 3E10    	so_ini1:ld	a,0x10
FA8B: 81      		add	c
FA8C: F0      		ret	p		; Can't find, failure
FA8D: 4F      		ld	c,a
FA8E: 18F3    		jr	so_ini0
              		
FA90: 10F7    	so_ini2:djnz	so_ini1		; Repeat if looking for next card
FA92: 79      		ld	a,c
FA93: D60F    		sub	0x0F
FA95: 4F      		ld	c,a
FA96: 71      		ld	(hl),c
FA97: 11E4FA  		ld	de,so_conf
FA9A: 060D    		ld	b,13
              		
              		; Lets set up the serial card for 9600 8N1
              		; First we set up the 8253, then the 8251
FA9C: 1A      	so_ini3:ld	a,(de)
FA9D: 13      		inc	de
FA9E: 86      		add	a,(hl)
FA9F: 4F      		ld	c,a
FAA0: 1A      		ld	a,(de)
FAA1: 13      		inc	de
FAA2: ED79    		out	(c),a
FAA4: E5      		push	hl
FAA5: E1      		pop	hl	; Small delay
FAA6: 10F4    		djnz	so_ini3
FAA8: C9      		ret
              	
              	; Device status 
              	; hl = Device options
              	;
              	; Returns a=0xFF if there is a character to read
              	; uses: af
FAA9: 11E0FA  	so_stat:ld	de,so_atab
FAAC: 19      		add	hl,de
FAAD: AF      		xor	a
FAAE: BE      		cp	(hl)
FAAF: C8      		ret	z	; No device, return 0
FAB0: 4E      		ld	c,(hl)
FAB1: 0C      		inc	c
FAB2: ED78    	so_sta0:in	a,(c)	; Check status register
FAB4: E602    		and	0x02
FAB6: C8      		ret	z
FAB7: 3EFF    		ld	a,0xFF
FAB9: C9      		ret
              		
              		
              	; Waits for a character to come in and returns it
              	; hl = Device options
              	;
              	; Returns ASCII key in A
              	; uses: af
FABA: 11E0FA  	so_read:ld	de,so_atab
FABD: 19      		add	hl,de
FABE: AF      		xor	a
FABF: BE      		cp	(hl)
FAC0: C8      		ret	z	; No device, return 0
FAC1: 4E      		ld	c,(hl)
FAC2: 0C      		inc	c
FAC3: CDB2FA  	so_rea0:call	so_sta0	; Wait for a character
FAC6: 28FB    		jr	z,so_rea0
FAC8: 0D      		dec	c
FAC9: ED78    		in	a,(c)
FACB: C9      		ret
              		
              	; Writes a character to the device
              	; c = Character to write
              	; hl = Device options
              	;
              	; uses: af, bc
FACC: 41      	so_writ:ld	b,c
FACD: 11E0FA  		ld	de,so_atab
FAD0: 19      		add	hl,de
FAD1: AF      		xor	a
FAD2: BE      		cp	(hl)
FAD3: C8      		ret	z	; No device, return 0
FAD4: 4E      		ld	c,(hl)
FAD5: 0C      		inc	c
FAD6: ED78    	so_wri0:in	a,(c)
FAD8: E601    		and	0x01
FADA: 28FA    		jr	z,so_wri0
FADC: 0D      		dec	c
FADD: ED41    		out	(c),b
FADF: C9      		ret
              		
              		
              	; Variables
              	; 4 possible slots
FAE0: 00000000	so_atab:defb	0x00,0x00,0x00,0x00
              	
              	; Configuration string
              	; Sets up counters 1 and 2 on the 8523 timer
FAE4: 0737    	so_conf:defb	0x07,0x37	; Counter 1 setup
FAE6: 0412    		defb	0x04,0x12
FAE8: 0400    		defb	0x04,0x00
FAEA: 0777    		defb	0x07,0x77	; Counter 2 setup
FAEC: 0512    		defb	0x05,0x12
FAEE: 0500    		defb	0x05,0x00
              		
FAF0: 0100    		defb	0x01,0x00	; 8251 setup
FAF2: 0100    		defb	0x01,0x00
FAF4: 0100    		defb	0x01,0x00
FAF6: 0100    		defb	0x01,0x00
FAF8: 0140    		defb	0x01,0x40
FAFA: 014E    		defb	0x01,0x4E
FAFC: 0137    		defb	0x01,0x37


; +++ segments +++

#CODE _TEXT        = $D800 = 55296,  size = $22FE =  8958
#DATA _BSS         = $FAFE = 64254,  size = $0079 =   121
#DATA _NOINIT      = $FB77 = 64375,  size = $0000 =     0
#DATA _JUMP_TABLE  = $FF00 = 65280,  size = $0090 =   144

; +++ global symbols +++

ADDAH            = $DB5E = 56158  _TEXT       zcpr1_ccp_nfs.asm:1321
ADVAN            = $DB51 = 56145  _TEXT       zcpr1_ccp_nfs.asm:1304
BDOS             = $0005 =     5  _TEXT       zcpr1_ccp_nfs.asm:13
BDOSB            = $DA03 = 55811  _TEXT       zcpr1_ccp_nfs.asm:985
BDOSJP           = $DA2F = 55855  _TEXT       zcpr1_ccp_nfs.asm:1040
BEL              = $0007 =     7  _TEXT       zcpr1_ccp_nfs.asm:475
BREAK            = $DB06 = 56070  _TEXT       zcpr1_ccp_nfs.asm:1234
BRKBK            = $DB0F = 56079  _TEXT       zcpr1_ccp_nfs.asm:1239 (unused)
BUFLEN           = $0050 =    80  _TEXT       zcpr1_ccp_nfs.asm:555
CALLPROG         = $DF36 = 57142  _TEXT       zcpr1_ccp_nfs.asm:2229
CB1              = $DAF5 = 56053  _TEXT       zcpr1_ccp_nfs.asm:1220
CB2              = $DAFD = 56061  _TEXT       zcpr1_ccp_nfs.asm:1226 (unused)
CBUFF            = $D804 = 55300  _TEXT       zcpr1_ccp_nfs.asm:558
CHRCNT           = $D8BA = 55482  _TEXT       zcpr1_ccp_nfs.asm:635
CIBPTR           = $D856 = 55382  _TEXT       zcpr1_ccp_nfs.asm:577
CIBUF            = $D83B = 55355  _TEXT       zcpr1_ccp_nfs.asm:571
CIBUFF           = $D805 = 55301  _TEXT       zcpr1_ccp_nfs.asm:561
CIPTR            = $D858 = 55384  _TEXT       zcpr1_ccp_nfs.asm:579
CLEVEL3          = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:442
CLOSE            = $DA45 = 55877  _TEXT       zcpr1_ccp_nfs.asm:1068
CMDSER           = $DC87 = 56455  _TEXT       zcpr1_ccp_nfs.asm:1605
CMDTBL           = $D95F = 55647  _TEXT       zcpr1_ccp_nfs.asm:817
CMS1             = $DC8C = 56460  _TEXT       zcpr1_ccp_nfs.asm:1616
CMS2             = $DC91 = 56465  _TEXT       zcpr1_ccp_nfs.asm:1619
CMS3             = $DC9F = 56479  _TEXT       zcpr1_ccp_nfs.asm:1630
CMS4             = $DCA2 = 56482  _TEXT       zcpr1_ccp_nfs.asm:1633
CNVBUF           = $DAF0 = 56048  _TEXT       zcpr1_ccp_nfs.asm:1216
COM              = $DEF7 = 57079  _TEXT       zcpr1_ccp_nfs.asm:2190
COM1             = $DF1B = 57115  _TEXT       zcpr1_ccp_nfs.asm:2211
COM4             = $DF64 = 57188  _TEXT       zcpr1_ccp_nfs.asm:2249
COM5             = $DF6D = 57197  _TEXT       zcpr1_ccp_nfs.asm:2259
COM6             = $DF73 = 57203  _TEXT       zcpr1_ccp_nfs.asm:2263
COM7             = $DF7B = 57211  _TEXT       zcpr1_ccp_nfs.asm:2274 (unused)
COMLOG           = $DBFE = 56318  _TEXT       zcpr1_ccp_nfs.asm:1472
COMMSG           = $D874 = 55412  _TEXT       zcpr1_ccp_nfs.asm:588
CONIN            = $D9B5 = 55733  _TEXT       zcpr1_ccp_nfs.asm:899
CONOUT           = $D9A8 = 55720  _TEXT       zcpr1_ccp_nfs.asm:886
CPR              = $D8C0 = 55488  _TEXT       zcpr1_ccp_nfs.asm:684
CPR1             = $D8BC = 55484  _TEXT       zcpr1_ccp_nfs.asm:669 (unused)
CPRDIR           = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:356
CPRLST           = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:355
CPRMPT           = $003E =    62  _TEXT       zcpr1_ccp_nfs.asm:462
CPRTYP           = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:352
CR               = $000D =    13  _TEXT       zcpr1_ccp_nfs.asm:471
CRLF             = $D9A1 = 55713  _TEXT       zcpr1_ccp_nfs.asm:881
DEFDMA           = $DA26 = 55846  _TEXT       zcpr1_ccp_nfs.asm:1032
DEFUSR           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:337
DELETE           = $DA5F = 55903  _TEXT       zcpr1_ccp_nfs.asm:1092
DFU              = $DEE5 = 57061  _TEXT       zcpr1_ccp_nfs.asm:2143
DFUSR            = $DFB7 = 57271  _TEXT       zcpr1_ccp_nfs.asm:2369
DIR              = $DCA9 = 56489  _TEXT       zcpr1_ccp_nfs.asm:1655
DIR10            = $DD46 = 56646  _TEXT       zcpr1_ccp_nfs.asm:1783
DIR11            = $DD50 = 56656  _TEXT       zcpr1_ccp_nfs.asm:1788
DIR2             = $DCD8 = 56536  _TEXT       zcpr1_ccp_nfs.asm:1680
DIR2A            = $DCD9 = 56537  _TEXT       zcpr1_ccp_nfs.asm:1682 (unused)
DIR3             = $DCE7 = 56551  _TEXT       zcpr1_ccp_nfs.asm:1701
DIR4             = $DD0A = 56586  _TEXT       zcpr1_ccp_nfs.asm:1736
DIR5             = $DD12 = 56594  _TEXT       zcpr1_ccp_nfs.asm:1751
DIR6             = $DD14 = 56596  _TEXT       zcpr1_ccp_nfs.asm:1753
DIR7             = $DD2F = 56623  _TEXT       zcpr1_ccp_nfs.asm:1768
DIR8             = $DD31 = 56625  _TEXT       zcpr1_ccp_nfs.asm:1770
DIR9             = $DD45 = 56645  _TEXT       zcpr1_ccp_nfs.asm:1781
DIRPR            = $DCD9 = 56537  _TEXT       zcpr1_ccp_nfs.asm:1690
DIRPTR           = $DBE1 = 56289  _TEXT       zcpr1_ccp_nfs.asm:1445
DLOG5            = $DBFB = 56315  _TEXT       zcpr1_ccp_nfs.asm:1468
DLOGIN           = $DBF4 = 56308  _TEXT       zcpr1_ccp_nfs.asm:1463
DMASET           = $DA29 = 55849  _TEXT       zcpr1_ccp_nfs.asm:1034
DRUSER           = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:348
ENTRY            = $D800 = 55296  _TEXT       zcpr1_ccp_nfs.asm:516
EPRMPT           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:350
ERA              = $DD5A = 56666  _TEXT       zcpr1_ccp_nfs.asm:1811
ERA1             = $DD73 = 56691  _TEXT       zcpr1_ccp_nfs.asm:1823
ERARJ            = $DD6D = 56685  _TEXT       zcpr1_ccp_nfs.asm:1820 (unused)
ERR1             = $DB2A = 56106  _TEXT       zcpr1_ccp_nfs.asm:1272
ERR2             = $DB1D = 56093  _TEXT       zcpr1_ccp_nfs.asm:1263
ERRLOG           = $DFFA = 57338  _TEXT       zcpr1_ccp_nfs.asm:2435
ERROR            = $DB17 = 56087  _TEXT       zcpr1_ccp_nfs.asm:1260
EXECADR          = $DF89 = 57225  _TEXT       zcpr1_ccp_nfs.asm:2283
EXTEST           = $DE68 = 56936  _TEXT       zcpr1_ccp_nfs.asm:2042
FALSE            = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:146
FCBCR            = $D8B8 = 55480  _TEXT       zcpr1_ccp_nfs.asm:628
FCBDM            = $D8A8 = 55464  _TEXT       zcpr1_ccp_nfs.asm:626
FCBDN            = $D898 = 55448  _TEXT       zcpr1_ccp_nfs.asm:617
FCBFN            = $D899 = 55449  _TEXT       zcpr1_ccp_nfs.asm:619
FCBFT            = $D8A1 = 55457  _TEXT       zcpr1_ccp_nfs.asm:621
FENCE            = $007C =   124  _TEXT       zcpr1_ccp_nfs.asm:449
FFEED            = $000C =    12  _TEXT       zcpr1_ccp_nfs.asm:474
FILLQ            = $DD52 = 56658  _TEXT       zcpr1_ccp_nfs.asm:1794
FQLP             = $DD54 = 56660  _TEXT       zcpr1_ccp_nfs.asm:1796
GET              = $DF97 = 57239  _TEXT       zcpr1_ccp_nfs.asm:2301
GETDRV           = $DA22 = 55842  _TEXT       zcpr1_ccp_nfs.asm:1026
GETUSR           = $DA68 = 55912  _TEXT       zcpr1_ccp_nfs.asm:1103
GO               = $DEF2 = 57074  _TEXT       zcpr1_ccp_nfs.asm:2179
GOTSYS           = $DCCC = 56524  _TEXT       zcpr1_ccp_nfs.asm:1672
GRBDOS           = $DA40 = 55872  _TEXT       zcpr1_ccp_nfs.asm:1063
HEXNUM           = $DBA1 = 56225  _TEXT       zcpr1_ccp_nfs.asm:1391
HNUM0            = $DBA4 = 56228  _TEXT       zcpr1_ccp_nfs.asm:1393
HNUM1            = $DBAC = 56236  _TEXT       zcpr1_ccp_nfs.asm:1397
HNUM2            = $DBC3 = 56259  _TEXT       zcpr1_ccp_nfs.asm:1410
HNUM3            = $DBDE = 56286  _TEXT       zcpr1_ccp_nfs.asm:1438
INPASS           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:346
JUMP             = $DEED = 57069  _TEXT       zcpr1_ccp_nfs.asm:2159
LC1              = $D9DC = 55772  _TEXT       zcpr1_ccp_nfs.asm:941
LCOUT            = $D9D0 = 55760  _TEXT       zcpr1_ccp_nfs.asm:924
LF               = $000A =    10  _TEXT       zcpr1_ccp_nfs.asm:472
LIST             = $DD81 = 56705  _TEXT       zcpr1_ccp_nfs.asm:1856
LOADADR          = $DFD5 = 57301  _TEXT       zcpr1_ccp_nfs.asm:2401
LOGIN            = $DA32 = 55858  _TEXT       zcpr1_ccp_nfs.asm:1043
LSTOUT           = $D9D7 = 55767  _TEXT       zcpr1_ccp_nfs.asm:937 (unused)
LTAB             = $DDF0 = 56816  _TEXT       zcpr1_ccp_nfs.asm:1941
MAXDR            = $0001 =     1  _TEXT       zcpr1_ccp_nfs.asm:333 (unused)
MAXDRIV          = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:330
MAXUSR           = $0013 =    19  _TEXT       zcpr1_ccp_nfs.asm:326
MBUFF            = $D803 = 55299  _TEXT       zcpr1_ccp_nfs.asm:556
MEMLOAD          = $DFA2 = 57250  _TEXT       zcpr1_ccp_nfs.asm:2318
ML2              = $DFD7 = 57303  _TEXT       zcpr1_ccp_nfs.asm:2403
ML3              = $DFF0 = 57328  _TEXT       zcpr1_ccp_nfs.asm:2418
ML4              = $DFF4 = 57332  _TEXT       zcpr1_ccp_nfs.asm:2425
MLA              = $DFAE = 57262  _TEXT       zcpr1_ccp_nfs.asm:2328
MLA0             = $DFC5 = 57285  _TEXT       zcpr1_ccp_nfs.asm:2384
MLA1             = $DFD4 = 57300  _TEXT       zcpr1_ccp_nfs.asm:2400
MLERR            = $DFF7 = 57335  _TEXT       zcpr1_ccp_nfs.asm:2429
NCHARS           = $0004 =     4  _TEXT       zcpr1_ccp_nfs.asm:812
NCMNDS           = $000B =    11  _TEXT       zcpr1_ccp_nfs.asm:871
NLINES           = $0018 =    24  _TEXT       zcpr1_ccp_nfs.asm:447
NOBOP            = $DE00 = 56832  _TEXT       zcpr1_ccp_nfs.asm:1953
NOECHO           = $D9C3 = 55747  _TEXT       zcpr1_ccp_nfs.asm:913
NOHYPH           = $DDD8 = 56792  _TEXT       zcpr1_ccp_nfs.asm:1926
NOLOG            = $D8DE = 55518  _TEXT       zcpr1_ccp_nfs.asm:711
NOSLAS           = $DD9C = 56732  _TEXT       zcpr1_ccp_nfs.asm:1890
NRCMDS           = $0003 =     3  _TEXT       zcpr1_ccp_nfs.asm:839 (unused)
NUM0             = $DB79 = 56185  _TEXT       zcpr1_ccp_nfs.asm:1351
NUM1             = $DB7F = 56191  _TEXT       zcpr1_ccp_nfs.asm:1355
NUM2             = $DB9C = 56220  _TEXT       zcpr1_ccp_nfs.asm:1379
NUMBASE          = $0048 =    72  _TEXT       zcpr1_ccp_nfs.asm:464
NUMBER           = $DB63 = 56163  _TEXT       zcpr1_ccp_nfs.asm:1331
NUMERR           = $DB9E = 56222  _TEXT       zcpr1_ccp_nfs.asm:1385
NUMS             = $DB6B = 56171  _TEXT       zcpr1_ccp_nfs.asm:1338
NUMS1            = $DB75 = 56181  _TEXT       zcpr1_ccp_nfs.asm:1345
OPEN             = $DA3E = 55870  _TEXT       zcpr1_ccp_nfs.asm:1060
OPENF            = $DA37 = 55863  _TEXT       zcpr1_ccp_nfs.asm:1055
OUTPUT           = $D9AB = 55723  _TEXT       zcpr1_ccp_nfs.asm:889
PAGCNT           = $D8B9 = 55481  _TEXT       zcpr1_ccp_nfs.asm:633
PGBAK            = $D9FC = 55804  _TEXT       zcpr1_ccp_nfs.asm:973
PGDFLG           = $0050 =    80  _TEXT       zcpr1_ccp_nfs.asm:452
PGDFLT           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:451
PGFLG            = $D9EF = 55791  _TEXT       zcpr1_ccp_nfs.asm:960
PRFLG            = $D9D2 = 55762  _TEXT       zcpr1_ccp_nfs.asm:929
PRIN1            = $DA17 = 55831  _TEXT       zcpr1_ccp_nfs.asm:1011
PRINT            = $DA0F = 55823  _TEXT       zcpr1_ccp_nfs.asm:1000
PRINTC           = $DA0A = 55818  _TEXT       zcpr1_ccp_nfs.asm:995
PRNLE            = $DE5E = 56926  _TEXT       zcpr1_ccp_nfs.asm:2032
PRNNF            = $D954 = 55636  _TEXT       zcpr1_ccp_nfs.asm:804
PRT              = $DDFF = 56831  _TEXT       zcpr1_ccp_nfs.asm:1952
QMCNT            = $D8BB = 55483  _TEXT       zcpr1_ccp_nfs.asm:637
RAS              = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:315
RB1              = $DADA = 56026  _TEXT       zcpr1_ccp_nfs.asm:1195
RCPRNL           = $D943 = 55619  _TEXT       zcpr1_ccp_nfs.asm:793
READ             = $DA01 = 55809  _TEXT       zcpr1_ccp_nfs.asm:980
READF            = $D9FE = 55806  _TEXT       zcpr1_ccp_nfs.asm:978
REDBUF           = $DA83 = 55939  _TEXT       zcpr1_ccp_nfs.asm:1140
REDBUF0          = $DA94 = 55956  _TEXT       zcpr1_ccp_nfs.asm:1148
REN              = $DE97 = 56983  _TEXT       zcpr1_ccp_nfs.asm:2073
REN0             = $DE9E = 56990  _TEXT       zcpr1_ccp_nfs.asm:2078 (unused)
REN1             = $DEB0 = 57008  _TEXT       zcpr1_ccp_nfs.asm:2086 (unused)
REN2             = $DEC7 = 57031  _TEXT       zcpr1_ccp_nfs.asm:2101
REN3             = $DED5 = 57045  _TEXT       zcpr1_ccp_nfs.asm:2109 (unused)
REN4             = $DED8 = 57048  _TEXT       zcpr1_ccp_nfs.asm:2111
RESET            = $DA2D = 55853  _TEXT       zcpr1_ccp_nfs.asm:1038
RESETUSR         = $DA63 = 55907  _TEXT       zcpr1_ccp_nfs.asm:1098
RESTRT           = $D8F2 = 55538  _TEXT       zcpr1_ccp_nfs.asm:727
RESTTMP          = $DB31 = 56113  _TEXT       zcpr1_ccp_nfs.asm:1276
RNGSUB           = $D8E2 = 55522  _TEXT       zcpr1_ccp_nfs.asm:714
RS00             = $D910 = 55568  _TEXT       zcpr1_ccp_nfs.asm:750
RS000            = $D915 = 55573  _TEXT       zcpr1_ccp_nfs.asm:756 (unused)
RS1              = $D918 = 55576  _TEXT       zcpr1_ccp_nfs.asm:761
RSTCPR           = $D940 = 55616  _TEXT       zcpr1_ccp_nfs.asm:788
RSTJP            = $DEE2 = 57058  _TEXT       zcpr1_ccp_nfs.asm:2128
SAVE             = $DE12 = 56850  _TEXT       zcpr1_ccp_nfs.asm:1986
SAVE0            = $DE32 = 56882  _TEXT       zcpr1_ccp_nfs.asm:2004
SAVE1            = $DE39 = 56889  _TEXT       zcpr1_ccp_nfs.asm:2007
SAVE2            = $DE55 = 56917  _TEXT       zcpr1_ccp_nfs.asm:2024
SAVE3            = $DE65 = 56933  _TEXT       zcpr1_ccp_nfs.asm:2036
SBLANK           = $DB55 = 56149  _TEXT       zcpr1_ccp_nfs.asm:1310
SCAN15           = $DC45 = 56389  _TEXT       zcpr1_ccp_nfs.asm:1535
SCAN16           = $DC48 = 56392  _TEXT       zcpr1_ccp_nfs.asm:1540
SCAN17           = $DC4A = 56394  _TEXT       zcpr1_ccp_nfs.asm:1542
SCAN2            = $DC24 = 56356  _TEXT       zcpr1_ccp_nfs.asm:1509
SCAN3            = $DC2A = 56362  _TEXT       zcpr1_ccp_nfs.asm:1513
SCAN4            = $DC30 = 56368  _TEXT       zcpr1_ccp_nfs.asm:1521
SCANER           = $DC08 = 56328  _TEXT       zcpr1_ccp_nfs.asm:1492
SCANF            = $DC58 = 56408  _TEXT       zcpr1_ccp_nfs.asm:1561
SCANF1           = $DC69 = 56425  _TEXT       zcpr1_ccp_nfs.asm:1570
SCANF2           = $DC70 = 56432  _TEXT       zcpr1_ccp_nfs.asm:1575
SCANF3           = $DC72 = 56434  _TEXT       zcpr1_ccp_nfs.asm:1577
SCANF4           = $DC79 = 56441  _TEXT       zcpr1_ccp_nfs.asm:1585
SCANX            = $DC0B = 56331  _TEXT       zcpr1_ccp_nfs.asm:1494
SCQ              = $DC7F = 56447  _TEXT       zcpr1_ccp_nfs.asm:1595
SDELM            = $DB34 = 56116  _TEXT       zcpr1_ccp_nfs.asm:1280
SEAR1            = $DA4C = 55884  _TEXT       zcpr1_ccp_nfs.asm:1074
SEARF            = $DA49 = 55881  _TEXT       zcpr1_ccp_nfs.asm:1072
SEARN            = $DA50 = 55888  _TEXT       zcpr1_ccp_nfs.asm:1078
SECTFLG          = $0053 =    83  _TEXT       zcpr1_ccp_nfs.asm:467
SECURE           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:335
SETTSE           = $DFBC = 57276  _TEXT       zcpr1_ccp_nfs.asm:2376
SETU0D           = $DA7D = 55933  _TEXT       zcpr1_ccp_nfs.asm:1130
SETUD            = $DA6E = 55918  _TEXT       zcpr1_ccp_nfs.asm:1117
SETUSR           = $DA6A = 55914  _TEXT       zcpr1_ccp_nfs.asm:1105
SLOGIN           = $DBEA = 56298  _TEXT       zcpr1_ccp_nfs.asm:1454
SOFLG            = $0053 =    83  _TEXT       zcpr1_ccp_nfs.asm:457
SPRMPT           = $0024 =    36  _TEXT       zcpr1_ccp_nfs.asm:461
STACK            = $D874 = 55412  _TEXT       zcpr1_ccp_nfs.asm:584
SUBA             = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:421
SUBFCB           = $D877 = 55415  _TEXT       zcpr1_ccp_nfs.asm:593
SUBFCR           = $D897 = 55447  _TEXT       zcpr1_ccp_nfs.asm:613
SUBFRC           = $D886 = 55430  _TEXT       zcpr1_ccp_nfs.asm:610
SUBFS2           = $D885 = 55429  _TEXT       zcpr1_ccp_nfs.asm:608 (unused)
SUBKIL           = $DA54 = 55892  _TEXT       zcpr1_ccp_nfs.asm:1084
SUPRES           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:459
SUSER            = $DEDF = 57055  _TEXT       zcpr1_ccp_nfs.asm:2126
SYSFLG           = $0041 =    65  _TEXT       zcpr1_ccp_nfs.asm:455
SYSTST           = $DCF9 = 56569  _TEXT       zcpr1_ccp_nfs.asm:1714
TAB              = $0009 =     9  _TEXT       zcpr1_ccp_nfs.asm:473
TBUFF            = $0080 =   128  _TEXT       zcpr1_ccp_nfs.asm:16
TDRIVE           = $DA7E = 55934  _TEXT       zcpr1_ccp_nfs.asm:1131
TEMPDR           = $DBFF = 56319  _TEXT       zcpr1_ccp_nfs.asm:1473
TFCB             = $005C =    92  _TEXT       zcpr1_ccp_nfs.asm:15
TMPUSR           = $DA64 = 55908  _TEXT       zcpr1_ccp_nfs.asm:1099
TPA              = $0100 =   256  _TEXT       zcpr1_ccp_nfs.asm:484
TRUE             = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:147
TSELUSR          = $DFB9 = 57273  _TEXT       zcpr1_ccp_nfs.asm:2371
TWOCOL           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:377
TWOPOK           = $DD01 = 56577  _TEXT       zcpr1_ccp_nfs.asm:1728 (unused)
TYPE             = $DD85 = 56709  _TEXT       zcpr1_ccp_nfs.asm:1869
TYPE0            = $DD86 = 56710  _TEXT       zcpr1_ccp_nfs.asm:1877
TYPE1            = $DDB4 = 56756  _TEXT       zcpr1_ccp_nfs.asm:1900
TYPE2            = $DDC5 = 56773  _TEXT       zcpr1_ccp_nfs.asm:1911
TYPE2L           = $DE03 = 56835  _TEXT       zcpr1_ccp_nfs.asm:1958
TYPE3            = $DE0D = 56845  _TEXT       zcpr1_ccp_nfs.asm:1964
TYPE4            = $DE0F = 56847  _TEXT       zcpr1_ccp_nfs.asm:1967
UCASE            = $D9BA = 55738  _TEXT       zcpr1_ccp_nfs.asm:905
UDFLAG           = $0004 =     4  _TEXT       zcpr1_ccp_nfs.asm:11
USER             = $DEDB = 57051  _TEXT       zcpr1_ccp_nfs.asm:2123
USRMAX           = $0000 =     0  _TEXT       zcpr1_ccp_nfs.asm:319
USRNUM           = $DB11 = 56081  _TEXT       zcpr1_ccp_nfs.asm:1245
WIDE             = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:448
WSTYPE           = $00FF =   255  _TEXT       zcpr1_ccp_nfs.asm:353
YESCR            = $DDFD = 56829  _TEXT       zcpr1_ccp_nfs.asm:1950
_BSS             = $FAFE = 64254  _BSS        config_nfs.asm:44 (unused)
_BSS_end         = $FB77 = 64375  _BSS        config_nfs.asm:44
_BSS_size        = $0079 =   121  _BSS        config_nfs.asm:44
_JUMP_TABLE      = $FF00 = 65280  _JUMP_TABLE config_nfs.asm:46 (unused)
_JUMP_TABLE_end  = $FF90 = 65424  _JUMP_TABLE config_nfs.asm:46 (unused)
_JUMP_TABLE_size = $0090 =   144  _JUMP_TABLE config_nfs.asm:46 (unused)
_NOINIT          = $FB77 = 64375  _NOINIT     config_nfs.asm:45 (unused)
_NOINIT_end      = $FB77 = 64375  _NOINIT     config_nfs.asm:45 (unused)
_NOINIT_size     = $0000 =     0  _NOINIT     config_nfs.asm:45 (unused)
_TEXT            = $D800 = 55296  _TEXT       config_nfs.asm:43 (unused)
_TEXT_end        = $FAFE = 64254  _TEXT       config_nfs.asm:43
_TEXT_size       = $22FE =  8958  _TEXT       config_nfs.asm:43 (unused)
active           = $E342 = 58178  _TEXT       bdos.asm:489
adda2hl          = $E564 = 58724  _TEXT       bdos.asm:918
alloc0           = $EDCA = 60874  _TEXT       bdos.asm:2466
alloc1           = $EDCC = 60876  _TEXT       bdos.asm:2467
alocvect         = $EDBF = 60863  _TEXT       bdos.asm:2456
auto             = $EDDE = 60894  _TEXT       bdos.asm:2481
autoflag         = $EDE0 = 60896  _TEXT       bdos.asm:2483
autosel          = $EC51 = 60497  _TEXT       bdos.asm:2196
autosl1          = $EC75 = 60533  _TEXT       bdos.asm:2212
backup           = $E1A4 = 57764  _TEXT       bdos.asm:249
backup1          = $E1AC = 57772  _TEXT       bdos.asm:252
badsctr          = $E009 = 57353  _TEXT       bdos.asm:33
badsec           = $E0CA = 57546  _TEXT       bdos.asm:104
badsel           = $E0D5 = 57557  _TEXT       bdos.asm:105
badslct          = $E00B = 57355  _TEXT       bdos.asm:34
batch            = $D8E2 = 55522  _TEXT       zcpr1_ccp_nfs.asm:713
bdevsw           = $EF7B = 61307  _TEXT       config_nfs.asm:167
bdosdrv          = $E0C6 = 57542  _TEXT       bdos.asm:103
bdoserr          = $E0BA = 57530  _TEXT       bdos.asm:102
bigdisk          = $EDDD = 60893  _TEXT       bdos.asm:2480
biodma           = $EF4D = 61261  _TEXT       bios.asm:337
bitmap           = $E6A3 = 59043  _TEXT       bdos.asm:1211
bitmap1          = $E6B1 = 59057  _TEXT       bdos.asm:1226
bitmap2          = $E6D2 = 59090  _TEXT       bdos.asm:1247
bitmap3          = $E6F6 = 59126  _TEXT       bdos.asm:1264
blkmask          = $EDC4 = 60868  _TEXT       bdos.asm:2462
blknmbr          = $EDE5 = 60901  _TEXT       bdos.asm:2487
blkshft          = $EDC3 = 60867  _TEXT       bdos.asm:2461
boot             = $EE33 = 60979  _TEXT       bios.asm:42
bs               = $0008 =     8  _TEXT       zcpr1_ccp_nfs.asm:24
bshook           = $EF18 = 61208  _TEXT       bios.asm:288
callbd           = $EEF6 = 61174  _TEXT       bios.asm:230
callmj           = $EF4A = 61258  _TEXT       bios.asm:331
cbase            = $D800 = 55296  _TEXT       zcpr1_ccp_nfs.asm:515
cbinit           = $EF69 = 61289  _TEXT       config_nfs.asm:98
cdevsw           = $EFBB = 61371  _TEXT       config_nfs.asm:206
cdindi0          = $EF22 = 61218  _TEXT       bios.asm:296
cdindi1          = $EF28 = 61224  _TEXT       bios.asm:300
cdindir          = $EF1E = 61214  _TEXT       bios.asm:294
cfirq            = $EF6F = 61295  _TEXT       config_nfs.asm:114
charbuf          = $E30E = 58126  _TEXT       bdos.asm:478
checkdir         = $E59E = 58782  _TEXT       bdos.asm:991
checksum         = $E4F7 = 58615  _TEXT       bdos.asm:830
chgnam1          = $E827 = 59431  _TEXT       bdos.asm:1503
chgnames         = $E816 = 59414  _TEXT       bdos.asm:1495
chkblk           = $E484 = 58500  _TEXT       bdos.asm:737
chkchar          = $E114 = 57620  _TEXT       bdos.asm:146
chkdir1          = $E5C4 = 58820  _TEXT       bdos.asm:1011
chknmbr          = $E58C = 58764  _TEXT       bdos.asm:964
chkrofl          = $E544 = 58692  _TEXT       bdos.asm:894
chksum1          = $E4FD = 58621  _TEXT       bdos.asm:833
chkvect          = $EDBD = 60861  _TEXT       bdos.asm:2455
chkwprt          = $E554 = 58708  _TEXT       bdos.asm:905
chrout           = $EEB9 = 61113  _TEXT       bios.asm:171
ckbitmap         = $E635 = 58933  _TEXT       bdos.asm:1105
ckbmap1          = $E656 = 58966  _TEXT       bdos.asm:1140
ckcon1           = $E142 = 57666  _TEXT       bdos.asm:176
ckcon2           = $E145 = 57669  _TEXT       bdos.asm:177
ckconsol         = $E123 = 57635  _TEXT       bdos.asm:162
ckfilpos         = $E5F5 = 58869  _TEXT       bdos.asm:1054
ckrof1           = $E547 = 58695  _TEXT       bdos.asm:895
cksumtbl         = $EDEC = 60908  _TEXT       bdos.asm:2495
clears2          = $E572 = 58738  _TEXT       bdos.asm:935
closefil         = $ECA5 = 60581  _TEXT       bdos.asm:2243
closeflg         = $EDD2 = 60882  _TEXT       bdos.asm:2472
closeit          = $E8A2 = 59554  _TEXT       bdos.asm:1589
closeit1         = $E8CD = 59597  _TEXT       bdos.asm:1609
closeit2         = $E8DB = 59611  _TEXT       bdos.asm:1617
closeit3         = $E8E1 = 59617  _TEXT       bdos.asm:1621
closeit4         = $E8E8 = 59624  _TEXT       bdos.asm:1624
closeit5         = $E8FD = 59645  _TEXT       bdos.asm:1637
closeit6         = $E917 = 59671  _TEXT       bdos.asm:1655
closeit7         = $E91F = 59679  _TEXT       bdos.asm:1658
cntrlc           = $0003 =     3  _TEXT       zcpr1_ccp_nfs.asm:22
cntrle           = $0005 =     5  _TEXT       zcpr1_ccp_nfs.asm:23
cntrlp           = $0010 =    16  _TEXT       zcpr1_ccp_nfs.asm:29
cntrlr           = $0012 =    18  _TEXT       zcpr1_ccp_nfs.asm:30
cntrls           = $0013 =    19  _TEXT       zcpr1_ccp_nfs.asm:31
cntrlu           = $0015 =    21  _TEXT       zcpr1_ccp_nfs.asm:32
cntrlx           = $0018 =    24  _TEXT       zcpr1_ccp_nfs.asm:33
cntrlz           = $001A =    26  _TEXT       zcpr1_ccp_nfs.asm:34 (unused)
comblk           = $E477 = 58487  _TEXT       bdos.asm:728
comprand         = $EBA5 = 60325  _TEXT       bdos.asm:2062
conin            = $EEAB = 61099  _TEXT       bios.asm:158
conout           = $EEB7 = 61111  _TEXT       bios.asm:170
const            = $EEA0 = 61088  _TEXT       bios.asm:146
counter          = $EDD8 = 60888  _TEXT       bdos.asm:2478
cpmlow           = $EE98 = 61080  _TEXT       bios.asm:135
cr               = $000D =    13  _TEXT       zcpr1_ccp_nfs.asm:28
curpos           = $E30C = 58124  _TEXT       bdos.asm:476
de2hl            = $E34F = 58191  _TEXT       bdos.asm:507
de2hl1           = $E350 = 58192  _TEXT       bdos.asm:508
default          = $0000 =     0              config_nfs.asm:19
defdma           = $E5DA = 58842  _TEXT       bdos.asm:1029
del              = $007F =   127  _TEXT       zcpr1_ccp_nfs.asm:35
delfile          = $ECD7 = 60631  _TEXT       bdos.asm:2274
dirbuf           = $EDB9 = 60857  _TEXT       bdos.asm:2453
dirc1            = $E2E0 = 58080  _TEXT       bdos.asm:434
dircbuf          = $FF10 = 65296  _JUMP_TABLE config_nfs.asm:48
dircio           = $E2D4 = 58068  _TEXT       bdos.asm:428
dirdma           = $E5E0 = 58848  _TEXT       bdos.asm:1034
dirdma1          = $E5E3 = 58851  _TEXT       bdos.asm:1039
dirread          = $E5D4 = 58836  _TEXT       bdos.asm:1024
dirsize          = $EDC8 = 60872  _TEXT       bdos.asm:2465
dirwrite         = $E5C6 = 58822  _TEXT       bdos.asm:1016
diskpb           = $EDBB = 60859  _TEXT       bdos.asm:2454
diskro           = $E0E1 = 57569  _TEXT       bdos.asm:107
doread           = $E3B2 = 58290  _TEXT       bdos.asm:578
dowrite          = $E3B8 = 58296  _TEXT       bdos.asm:583
dsksize          = $EDC6 = 60870  _TEXT       bdos.asm:2464
eboot            = $EE41 = 60993  _TEXT       bios.asm:57
emptyfcb         = $EDAC = 60844  _TEXT       bdos.asm:2440
entry            = $0005 =     5  _TEXT       zcpr1_ccp_nfs.asm:12 (unused)
eparam           = $EDD6 = 60886  _TEXT       bdos.asm:2476
erafil1          = $E7A4 = 59300  _TEXT       bdos.asm:1381
erafile          = $E79C = 59292  _TEXT       bdos.asm:1378
error1           = $E099 = 57497  _TEXT       bdos.asm:85
error2           = $E0A5 = 57509  _TEXT       bdos.asm:91
error3           = $E0AB = 57515  _TEXT       bdos.asm:94
error4           = $E0B1 = 57521  _TEXT       bdos.asm:97
error5           = $E0B4 = 57524  _TEXT       bdos.asm:99
extblk           = $E45E = 58462  _TEXT       bdos.asm:709
extblk1          = $E471 = 58481  _TEXT       bdos.asm:719
extmask          = $EDC5 = 60869  _TEXT       bdos.asm:2463
fbase            = $E006 = 57350  _TEXT       bdos.asm:29
fbase1           = $E011 = 57361  _TEXT       bdos.asm:41
fcb2hl           = $E55E = 58718  _TEXT       bdos.asm:913
fcbpos           = $EDE9 = 60905  _TEXT       bdos.asm:2489
fcbset           = $E7FD = 59389  _TEXT       bdos.asm:1473
fcreate          = $ECEC = 60652  _TEXT       bdos.asm:2291
ff               = $000C =    12  _TEXT       zcpr1_ccp_nfs.asm:27 (unused)
filepos          = $EDEA = 60906  _TEXT       bdos.asm:2490
filero           = $E0DC = 57564  _TEXT       bdos.asm:106
filesize         = $ED4D = 60749  _TEXT       bdos.asm:2365
findfst          = $E718 = 59160  _TEXT       bdos.asm:1298
findnxt          = $E72D = 59181  _TEXT       bdos.asm:1311
fndnxt1          = $E74A = 59210  _TEXT       bdos.asm:1324
fndnxt2          = $E753 = 59219  _TEXT       bdos.asm:1328
fndnxt3          = $E773 = 59251  _TEXT       bdos.asm:1344
fndnxt4          = $E77C = 59260  _TEXT       bdos.asm:1353
fndnxt5          = $E783 = 59267  _TEXT       bdos.asm:1358
fndnxt6          = $E794 = 59284  _TEXT       bdos.asm:1371
fndspa1          = $E7C0 = 59328  _TEXT       bdos.asm:1411
fndspa2          = $E7D1 = 59345  _TEXT       bdos.asm:1434
fndspa3          = $E7EC = 59372  _TEXT       bdos.asm:1455
fndspa4          = $E7F4 = 59380  _TEXT       bdos.asm:1465
fndspace         = $E7BE = 59326  _TEXT       bdos.asm:1405
fndstat          = $EDD4 = 60884  _TEXT       bdos.asm:2474
functns          = $E047 = 57415  _TEXT       bdos.asm:76
getaloc          = $ED11 = 60689  _TEXT       bdos.asm:2319
getblk1          = $E445 = 58437  _TEXT       bdos.asm:687
getblk2          = $E453 = 58451  _TEXT       bdos.asm:696
getblk3          = $E45C = 58460  _TEXT       bdos.asm:701
getblock         = $E43E = 58430  _TEXT       bdos.asm:684
getchar          = $E0FB = 57595  _TEXT       bdos.asm:124
getcon           = $E2C8 = 58056  _TEXT       bdos.asm:416
getcrnt          = $ED04 = 60676  _TEXT       bdos.asm:2308
getcsts          = $E2FE = 58110  _TEXT       bdos.asm:461
getecho          = $E106 = 57606  _TEXT       bdos.asm:133
getempty         = $E924 = 59684  _TEXT       bdos.asm:1665
getfst           = $ECAB = 60587  _TEXT       bdos.asm:2250
getfst1          = $ECC2 = 60610  _TEXT       bdos.asm:2261
getiob           = $E2ED = 58093  _TEXT       bdos.asm:442
getlog           = $ECFE = 60670  _TEXT       bdos.asm:2303
getmt1           = $E946 = 59718  _TEXT       bdos.asm:1681
getnext          = $E95A = 59738  _TEXT       bdos.asm:1695
getnxt           = $ECC8 = 60616  _TEXT       bdos.asm:2266
getparm          = $ED26 = 60710  _TEXT       bdos.asm:2336
getprm1          = $ED29 = 60713  _TEXT       bdos.asm:2337
getrdr           = $E2CE = 58062  _TEXT       bdos.asm:421
getrov           = $ED17 = 60695  _TEXT       bdos.asm:2324
gets2            = $E569 = 58729  _TEXT       bdos.asm:927
getuser          = $ED2D = 60717  _TEXT       bdos.asm:2344
getver           = $EC7E = 60542  _TEXT       bdos.asm:2220
getwprt          = $E51E = 58654  _TEXT       bdos.asm:867
goback           = $ED74 = 60788  _TEXT       bdos.asm:2400
goback1          = $ED91 = 60817  _TEXT       bdos.asm:2412
gtnext1          = $E983 = 59779  _TEXT       bdos.asm:1715
gtnext2          = $E98E = 59790  _TEXT       bdos.asm:1724
gtnext3          = $E9AC = 59820  _TEXT       bdos.asm:1735
gtnext4          = $E9AF = 59823  _TEXT       bdos.asm:1736
gtnext5          = $E9B6 = 59830  _TEXT       bdos.asm:1743
home             = $EED9 = 61145  _TEXT       bios.asm:204
homedrv          = $E3A1 = 58273  _TEXT       bdos.asm:564
inbuff           = $D803 = 55299  _TEXT       zcpr1_ccp_nfs.asm:554
intvec           = $FF00 = 65280  _JUMP_TABLE config_nfs.asm:47
iobyte           = $0003 =     3  _TEXT       zcpr1_ccp_nfs.asm:9
ioerr1           = $E305 = 58117  _TEXT       bdos.asm:471
ioret            = $E3BB = 58299  _TEXT       bdos.asm:584
jumphl           = $E34A = 58186  _TEXT       bdos.asm:499
lf               = $000A =    10  _TEXT       zcpr1_ccp_nfs.asm:26
list             = $EEC3 = 61123  _TEXT       bios.asm:181
logical          = $E48A = 58506  _TEXT       bdos.asm:748
logicl1          = $E490 = 58512  _TEXT       bdos.asm:750
login            = $EDAF = 60847  _TEXT       bdos.asm:2442
logindrv         = $EC21 = 60449  _TEXT       bdos.asm:2164
logoff           = $ED53 = 60755  _TEXT       bdos.asm:2374
logsect          = $EDE7 = 60903  _TEXT       bdos.asm:2488
mem              = $0036 =    54              config_nfs.asm:38
mode             = $EDD5 = 60885  _TEXT       bdos.asm:2475
morefls          = $E57F = 58751  _TEXT       bdos.asm:951
movedir          = $E5E9 = 58857  _TEXT       bdos.asm:1046
moveword         = $E894 = 59540  _TEXT       bdos.asm:1572
newline          = $E1B1 = 57777  _TEXT       bdos.asm:258
newln1           = $E1B9 = 57785  _TEXT       bdos.asm:261
nfsdev           = $F3A2 = 62370  _TEXT       nabu_nfs.asm:73
nfuncts          = $0029 =    41  _TEXT       bdos.asm:74
ns_ace0          = $F626 = 63014  _TEXT       nabu_nfs.asm:594
ns_ace1          = $F632 = 63026  _TEXT       nabu_nfs.asm:604
ns_aces          = $F613 = 62995  _TEXT       nabu_nfs.asm:581
ns_alv           = $F3A1 = 62369  _TEXT       nabu_nfs.asm:67
ns_atla          = $0041 =    65  _TEXT       nabu_nfs.asm:31
ns_ayda          = $0040 =    64  _TEXT       nabu_nfs.asm:30
ns_buff          = $FB2A = 64298  _BSS        nabu_nfs.asm:20
ns_ccp           = $F406 = 62470  _TEXT       nabu_nfs.asm:165
ns_cfcb          = $FB72 = 64370  _BSS        nabu_nfs.asm:24
ns_deco          = $F70C = 63244  _TEXT       nabu_nfs.asm:816
ns_del0          = $F5EF = 62959  _TEXT       nabu_nfs.asm:552
ns_dele          = $F5DC = 62940  _TEXT       nabu_nfs.asm:536
ns_dfl0          = $F3ED = 62445  _TEXT       nabu_nfs.asm:141
ns_dflt          = $F3E5 = 62437  _TEXT       nabu_nfs.asm:136
ns_dom0          = $F7AD = 63405  _TEXT       nabu_nfs.asm:959
ns_domk          = $F7A9 = 63401  _TEXT       nabu_nfs.asm:957
ns_dore          = $FB74 = 64372  _BSS        nabu_nfs.asm:25
ns_dpb           = $F392 = 62354  _TEXT       nabu_nfs.asm:55
ns_dph           = $F382 = 62338  _TEXT       nabu_nfs.asm:47
ns_dsnd          = $F3FC = 62460  _TEXT       nabu_nfs.asm:158
ns_esnd          = $F3F2 = 62450  _TEXT       nabu_nfs.asm:149
ns_exit          = $F7DD = 63453  _TEXT       nabu_nfs.asm:996
ns_fcls          = $F4B6 = 62646  _TEXT       nabu_nfs.asm:295
ns_ffm0          = $F583 = 62851  _TEXT       nabu_nfs.asm:457
ns_ffm1          = $F586 = 62854  _TEXT       nabu_nfs.asm:459
ns_ffmt          = $F578 = 62840  _TEXT       nabu_nfs.asm:451
ns_fild          = $0081 =   129  _TEXT       nabu_nfs.asm:35
ns_find          = $F50C = 62732  _TEXT       nabu_nfs.asm:357
ns_fmak          = $F714 = 63252  _TEXT       nabu_nfs.asm:828
ns_fop0          = $F4B3 = 62643  _TEXT       nabu_nfs.asm:287
ns_fopn          = $F476 = 62582  _TEXT       nabu_nfs.asm:238
ns_for1          = $F940 = 63808  _TEXT       nabu_nfs.asm:1269
ns_for2          = $F950 = 63824  _TEXT       nabu_nfs.asm:1277
ns_for3          = $F95B = 63835  _TEXT       nabu_nfs.asm:1283
ns_for4          = $F96B = 63851  _TEXT       nabu_nfs.asm:1291
ns_form          = $F936 = 63798  _TEXT       nabu_nfs.asm:1265
ns_fre0          = $F6A0 = 63136  _TEXT       nabu_nfs.asm:704
ns_fre1          = $F6A8 = 63144  _TEXT       nabu_nfs.asm:710
ns_fre2          = $F6BB = 63163  _TEXT       nabu_nfs.asm:725
ns_frea          = $F695 = 63125  _TEXT       nabu_nfs.asm:693
ns_frn0          = $F75B = 63323  _TEXT       nabu_nfs.asm:888
ns_frnm          = $F73B = 63291  _TEXT       nabu_nfs.asm:864
ns_fwr0          = $F6CC = 63180  _TEXT       nabu_nfs.asm:745
ns_fwri          = $F6C1 = 63169  _TEXT       nabu_nfs.asm:734
ns_gcre          = $F65A = 63066  _TEXT       nabu_nfs.asm:637
ns_get0          = $F80F = 63503  _TEXT       nabu_nfs.asm:1041
ns_get1          = $F838 = 63544  _TEXT       nabu_nfs.asm:1063
ns_get2          = $F842 = 63554  _TEXT       nabu_nfs.asm:1070
ns_getb          = $F809 = 63497  _TEXT       nabu_nfs.asm:1039
ns_getd          = $F7E0 = 63456  _TEXT       nabu_nfs.asm:1005
ns_grb           = $F40B = 62475  _TEXT       nabu_nfs.asm:169
ns_grb0          = $F40E = 62478  _TEXT       nabu_nfs.asm:170
ns_grb1          = $F425 = 62501  _TEXT       nabu_nfs.asm:178
ns_hcca          = $0080 =   128  _TEXT       nabu_nfs.asm:32
ns_hcer          = $F8C1 = 63681  _TEXT       nabu_nfs.asm:1172
ns_hcr0          = $F8AE = 63662  _TEXT       nabu_nfs.asm:1157
ns_hcr1          = $F8C8 = 63688  _TEXT       nabu_nfs.asm:1177
ns_hcr2          = $F8D1 = 63697  _TEXT       nabu_nfs.asm:1183
ns_hcrd          = $F89F = 63647  _TEXT       nabu_nfs.asm:1150
ns_hcre          = $F8A2 = 63650  _TEXT       nabu_nfs.asm:1151
ns_hcw0          = $F8FE = 63742  _TEXT       nabu_nfs.asm:1220
ns_hcw1          = $F916 = 63766  _TEXT       nabu_nfs.asm:1237
ns_hcw2          = $F91B = 63771  _TEXT       nabu_nfs.asm:1239
ns_hcwr          = $F8EC = 63724  _TEXT       nabu_nfs.asm:1212
ns_hini          = $F3CB = 62411  _TEXT       nabu_nfs.asm:118
ns_inb           = $F999 = 63897  _TEXT       nabu_nfs.asm:1354
ns_inf           = $F99A = 63898  _TEXT       nabu_nfs.asm:1357
ns_init          = $F3AC = 62380  _TEXT       nabu_nfs.asm:87
ns_isls          = $FB75 = 64373  _BSS        nabu_nfs.asm:26
ns_lis0          = $F515 = 62741  _TEXT       nabu_nfs.asm:371
ns_lis1          = $F543 = 62787  _TEXT       nabu_nfs.asm:397
ns_lis2          = $F54C = 62796  _TEXT       nabu_nfs.asm:405
ns_lis3          = $F559 = 62809  _TEXT       nabu_nfs.asm:413
ns_lis4          = $F564 = 62820  _TEXT       nabu_nfs.asm:421
ns_list          = $F50F = 62735  _TEXT       nabu_nfs.asm:367
ns_ltou          = $F981 = 63873  _TEXT       nabu_nfs.asm:1326
ns_m0            = $F9B5 = 63925  _TEXT       nabu_nfs.asm:1369
ns_m0fl          = $F9BB = 63931  _TEXT       nabu_nfs.asm:1373
ns_m0na          = $F9BE = 63934  _TEXT       nabu_nfs.asm:1375
ns_m1            = $F9D2 = 63954  _TEXT       nabu_nfs.asm:1380
ns_m2            = $F9D8 = 63960  _TEXT       nabu_nfs.asm:1387
ns_m2bn          = $F9DE = 63966  _TEXT       nabu_nfs.asm:1391
ns_m3            = $F9E4 = 63972  _TEXT       nabu_nfs.asm:1396
ns_m3bn          = $F9EA = 63978  _TEXT       nabu_nfs.asm:1400
ns_m4            = $F9F0 = 63984  _TEXT       nabu_nfs.asm:1405
ns_m5            = $F9F7 = 63991  _TEXT       nabu_nfs.asm:1413
ns_m6            = $F9FE = 63998  _TEXT       nabu_nfs.asm:1421
ns_m6na          = $FA06 = 64006  _TEXT       nabu_nfs.asm:1426
ns_m7            = $FA19 = 64025  _TEXT       nabu_nfs.asm:1430
ns_m7n0          = $FA1F = 64031  _TEXT       nabu_nfs.asm:1434
ns_m7n1          = $FA33 = 64051  _TEXT       nabu_nfs.asm:1436
ns_mask          = $FB70 = 64368  _BSS        nabu_nfs.asm:23
ns_name          = $FB65 = 64357  _BSS        nabu_nfs.asm:22
ns_nblk          = $F797 = 63383  _TEXT       nabu_nfs.asm:938
ns_nctl          = $0000 =     0  _TEXT       nabu_nfs.asm:33
ns_opef          = $F7EA = 63466  _TEXT       nabu_nfs.asm:1018
ns_open          = $F7E7 = 63463  _TEXT       nabu_nfs.asm:1017
ns_outb          = $F997 = 63895  _TEXT       nabu_nfs.asm:1348
ns_outf          = $F998 = 63896  _TEXT       nabu_nfs.asm:1351
ns_own0          = $F7C5 = 63429  _TEXT       nabu_nfs.asm:981
ns_own1          = $F7D1 = 63441  _TEXT       nabu_nfs.asm:986
ns_own2          = $F7D7 = 63447  _TEXT       nabu_nfs.asm:990
ns_ownr          = $F7B5 = 63413  _TEXT       nabu_nfs.asm:972
ns_p0            = $F99B = 63899  _TEXT       nabu_nfs.asm:1361
ns_p1            = $F9A8 = 63912  _TEXT       nabu_nfs.asm:1365
ns_ptrn          = $FB5A = 64346  _BSS        nabu_nfs.asm:21
ns_put0          = $F850 = 63568  _TEXT       nabu_nfs.asm:1084
ns_put1          = $F862 = 63586  _TEXT       nabu_nfs.asm:1094
ns_putb          = $F84A = 63562  _TEXT       nabu_nfs.asm:1082
ns_rec0          = $F881 = 63617  _TEXT       nabu_nfs.asm:1115
ns_rec1          = $F88C = 63628  _TEXT       nabu_nfs.asm:1122
ns_rece          = $F878 = 63608  _TEXT       nabu_nfs.asm:1112
ns_rirq          = $F8DE = 63710  _TEXT       nabu_nfs.asm:1195
ns_rrea          = $F6DB = 63195  _TEXT       nabu_nfs.asm:759
ns_rrec          = $F6F9 = 63225  _TEXT       nabu_nfs.asm:794
ns_rwri          = $F6EA = 63210  _TEXT       nabu_nfs.asm:777
ns_scre          = $F676 = 63094  _TEXT       nabu_nfs.asm:664
ns_sdir          = $F96E = 63854  _TEXT       nabu_nfs.asm:1301
ns_sel           = $F3BD = 62397  _TEXT       nabu_nfs.asm:105
ns_send          = $F896 = 63638  _TEXT       nabu_nfs.asm:1136
ns_sfir          = $F567 = 62823  _TEXT       nabu_nfs.asm:429
ns_size          = $F77F = 63359  _TEXT       nabu_nfs.asm:912
ns_sls0          = $F503 = 62723  _TEXT       nabu_nfs.asm:343
ns_slst          = $F4C8 = 62664  _TEXT       nabu_nfs.asm:314
ns_snx0          = $F594 = 62868  _TEXT       nabu_nfs.asm:477
ns_snx1          = $F5C0 = 62912  _TEXT       nabu_nfs.asm:509
ns_snx2          = $F5C4 = 62916  _TEXT       nabu_nfs.asm:512
ns_snx3          = $F5CB = 62923  _TEXT       nabu_nfs.asm:519
ns_snx4          = $F5D1 = 62929  _TEXT       nabu_nfs.asm:524
ns_snxt          = $F58C = 62860  _TEXT       nabu_nfs.asm:469
ns_stmp          = $F470 = 62576  _TEXT       nabu_nfs.asm:227
ns_sysh          = $F42F = 62511  _TEXT       nabu_nfs.asm:189
ns_tran          = $FB76 = 64374  _BSS        nabu_nfs.asm:27
ns_utol          = $F98C = 63884  _TEXT       nabu_nfs.asm:1339
ns_wchd          = $F97E = 63870  _TEXT       nabu_nfs.asm:1317
ns_wirq          = $F925 = 63781  _TEXT       nabu_nfs.asm:1248
nulldev          = $EF49 = 61257  _TEXT       bios.asm:328 (unused)
nxent1           = $E619 = 58905  _TEXT       bdos.asm:1084
nxent2           = $E620 = 58912  _TEXT       bdos.asm:1087
nxentry          = $E605 = 58885  _TEXT       bdos.asm:1076
offset           = $EDCE = 60878  _TEXT       bdos.asm:2468
olddrv           = $EDDF = 60895  _TEXT       bdos.asm:2482
openfil          = $EC9C = 60572  _TEXT       bdos.asm:2237
openit           = $E851 = 59473  _TEXT       bdos.asm:1529
openit1          = $E85A = 59482  _TEXT       bdos.asm:1533
openit2          = $E88B = 59531  _TEXT       bdos.asm:1561
outchar          = $E148 = 57672  _TEXT       bdos.asm:184
outchr1          = $E162 = 57698  _TEXT       bdos.asm:198
outchr2          = $E179 = 57721  _TEXT       bdos.asm:214
outcon           = $E190 = 57744  _TEXT       bdos.asm:235
outcon1          = $E196 = 57750  _TEXT       bdos.asm:238
outcrlf          = $E1C9 = 57801  _TEXT       bdos.asm:271
outflag          = $E30A = 58122  _TEXT       bdos.asm:474
params           = $E343 = 58179  _TEXT       bdos.asm:490
pattrn2          = $E000 = 57344  _TEXT       bdos.asm:21 (unused)
position         = $EB03 = 60163  _TEXT       bdos.asm:1939
positn1          = $EB07 = 60167  _TEXT       bdos.asm:1944
positn2          = $EB47 = 60231  _TEXT       bdos.asm:1990
positn3          = $EB7F = 60287  _TEXT       bdos.asm:2022
positn4          = $EB84 = 60292  _TEXT       bdos.asm:2028
positn5          = $EB8B = 60299  _TEXT       bdos.asm:2035
pr_atla          = $0041 =    65  _TEXT       nabu_prt.asm:14
pr_ayda          = $0040 =    64  _TEXT       nabu_prt.asm:13
pr_ctrl          = $0000 =     0  _TEXT       nabu_prt.asm:16
pr_init          = $FA51 = 64081  _TEXT       nabu_prt.asm:31
pr_prnt          = $00B0 =   176  _TEXT       nabu_prt.asm:15
pr_read          = $FA54 = 64084  _TEXT       nabu_prt.asm:46
pr_stat          = $FA52 = 64082  _TEXT       nabu_prt.asm:38
pr_wri0          = $FA5A = 64090  _TEXT       nabu_prt.asm:56
pr_wri1          = $FA69 = 64105  _TEXT       nabu_prt.asm:67
pr_writ          = $FA56 = 64086  _TEXT       nabu_prt.asm:53
prstat           = $EF12 = 61202  _TEXT       bios.asm:276
prtdev           = $FA46 = 64070  _TEXT       nabu_prt.asm:19
prterr           = $E0E5 = 57573  _TEXT       bdos.asm:111
prtflag          = $E30D = 58125  _TEXT       bdos.asm:477
prtmesg          = $E1D3 = 57811  _TEXT       bdos.asm:278
prtstr           = $E2F8 = 58104  _TEXT       bdos.asm:454
punch            = $EEC7 = 61127  _TEXT       bios.asm:187
putdma           = $ED0A = 60682  _TEXT       bdos.asm:2313
ransiz1          = $EBE4 = 60388  _TEXT       bdos.asm:2118
ransiz2          = $EC06 = 60422  _TEXT       bdos.asm:2140
ransiz3          = $EC0C = 60428  _TEXT       bdos.asm:2142
ransize          = $EBD2 = 60370  _TEXT       bdos.asm:2107
rdbuf1           = $E1EF = 57839  _TEXT       bdos.asm:297
rdbuf10          = $E270 = 57968  _TEXT       bdos.asm:359
rdbuf11          = $E278 = 57976  _TEXT       bdos.asm:365
rdbuf12          = $E28A = 57994  _TEXT       bdos.asm:377
rdbuf13          = $E299 = 58009  _TEXT       bdos.asm:384
rdbuf14          = $E2A6 = 58022  _TEXT       bdos.asm:392
rdbuf15          = $E2A9 = 58025  _TEXT       bdos.asm:395
rdbuf16          = $E2BD = 58045  _TEXT       bdos.asm:407
rdbuf17          = $E2C1 = 58049  _TEXT       bdos.asm:409
rdbuf2           = $E1F1 = 57841  _TEXT       bdos.asm:299
rdbuf3           = $E216 = 57878  _TEXT       bdos.asm:316
rdbuf4           = $E226 = 57894  _TEXT       bdos.asm:325
rdbuf5           = $E237 = 57911  _TEXT       bdos.asm:333
rdbuf6           = $E248 = 57928  _TEXT       bdos.asm:342
rdbuf7           = $E24E = 57934  _TEXT       bdos.asm:345
rdbuf8           = $E25F = 57951  _TEXT       bdos.asm:352
rdbuf9           = $E26B = 57963  _TEXT       bdos.asm:357
rdbuff           = $E1E1 = 57825  _TEXT       bdos.asm:290
rdrandom         = $ED41 = 60737  _TEXT       bdos.asm:2355
rdseq            = $E9BC = 59836  _TEXT       bdos.asm:1748
rdseq1           = $E9C1 = 59841  _TEXT       bdos.asm:1750
rdseq2           = $E9E6 = 59878  _TEXT       bdos.asm:1765
rdseq3           = $E9FB = 59899  _TEXT       bdos.asm:1775
rdwrtflg         = $EDD3 = 60883  _TEXT       bdos.asm:2473
read             = $EF0A = 61194  _TEXT       bios.asm:261
reader           = $EECB = 61131  _TEXT       bios.asm:193
readran          = $EB93 = 60307  _TEXT       bdos.asm:2042
readseq          = $ECE0 = 60640  _TEXT       bdos.asm:2281
relblock         = $EDD7 = 60887  _TEXT       bdos.asm:2477
renfile          = $ECF5 = 60661  _TEXT       bdos.asm:2297
resccp           = $EF75 = 61301  _TEXT       config_nfs.asm:156
resgrb           = $EF78 = 61304  _TEXT       config_nfs.asm:162
rodisk           = $E00D = 57357  _TEXT       bdos.asm:35
rofile           = $E00F = 57359  _TEXT       bdos.asm:36
rstdsk           = $EC83 = 60547  _TEXT       bdos.asm:2225
rtn              = $E304 = 58116  _TEXT       bdos.asm:467
samext           = $E707 = 59143  _TEXT       bdos.asm:1279
savatr1          = $E840 = 59456  _TEXT       bdos.asm:1519
saveattr         = $E83B = 59451  _TEXT       bdos.asm:1517
savefcb          = $EDD9 = 60889  _TEXT       bdos.asm:2479
savext           = $EDE2 = 60898  _TEXT       bdos.asm:2485
savnrec          = $EDE3 = 60899  _TEXT       bdos.asm:2486
savnxt           = $EDE1 = 60897  _TEXT       bdos.asm:2484
scratch1         = $EDB3 = 60851  _TEXT       bdos.asm:2447
scratch2         = $EDB5 = 60853  _TEXT       bdos.asm:2448
scratch3         = $EDB7 = 60855  _TEXT       bdos.asm:2449
sectors          = $EDC1 = 60865  _TEXT       bdos.asm:2460
sectrn           = $EF15 = 61205  _TEXT       bios.asm:281
seldsk           = $EEDE = 61150  _TEXT       bios.asm:213
select           = $E359 = 58201  _TEXT       bdos.asm:518
select1          = $E39D = 58269  _TEXT       bdos.asm:558
setattr          = $ED1D = 60701  _TEXT       bdos.asm:2329
setbit           = $E50B = 58635  _TEXT       bdos.asm:850
setdir           = $E59C = 58780  _TEXT       bdos.asm:984
setdma           = $EF04 = 61188  _TEXT       bios.asm:253
setdsk           = $EC45 = 60485  _TEXT       bdos.asm:2185
setext           = $E4A6 = 58534  _TEXT       bdos.asm:765
setfile          = $E66B = 58987  _TEXT       bdos.asm:1169
setfl1           = $E675 = 58997  _TEXT       bdos.asm:1174
setfl2           = $E688 = 59016  _TEXT       bdos.asm:1186
setfl3           = $E68E = 59022  _TEXT       bdos.asm:1192
setfl4           = $E69D = 59037  _TEXT       bdos.asm:1201
sethlde          = $E4AE = 58542  _TEXT       bdos.asm:773
setiob           = $E2F3 = 58099  _TEXT       bdos.asm:447
setnrec          = $E4D2 = 58578  _TEXT       bdos.asm:799
setran           = $EC0E = 60430  _TEXT       bdos.asm:2148
sets2b7          = $E578 = 58744  _TEXT       bdos.asm:941
setsec           = $EF00 = 61184  _TEXT       bios.asm:246
setstat          = $E301 = 58113  _TEXT       bdos.asm:466
settrk           = $EEFC = 61180  _TEXT       bios.asm:239
setuser          = $ED3B = 60731  _TEXT       bdos.asm:2349
shiftl           = $E504 = 58628  _TEXT       bdos.asm:841
shiftl1          = $E505 = 58629  _TEXT       bdos.asm:842
shiftr           = $E4EA = 58602  _TEXT       bdos.asm:815
shiftr1          = $E4EB = 58603  _TEXT       bdos.asm:816
showit           = $E17F = 57727  _TEXT       bdos.asm:222
siodev           = $FA70 = 64112  _TEXT       nabu_sio.asm:20
slcterr          = $E347 = 58183  _TEXT       bdos.asm:495
so_atab          = $FAE0 = 64224  _TEXT       nabu_sio.asm:131
so_conf          = $FAE4 = 64228  _TEXT       nabu_sio.asm:135
so_ini0          = $FA83 = 64131  _TEXT       nabu_sio.asm:39
so_ini1          = $FA89 = 64137  _TEXT       nabu_sio.asm:43
so_ini2          = $FA90 = 64144  _TEXT       nabu_sio.asm:49
so_ini3          = $FA9C = 64156  _TEXT       nabu_sio.asm:59
so_init          = $FA7B = 64123  _TEXT       nabu_sio.asm:33
so_rea0          = $FAC3 = 64195  _TEXT       nabu_sio.asm:102
so_read          = $FABA = 64186  _TEXT       nabu_sio.asm:95
so_sta0          = $FAB2 = 64178  _TEXT       nabu_sio.asm:83
so_stat          = $FAA9 = 64169  _TEXT       nabu_sio.asm:76
so_wri0          = $FAD6 = 64214  _TEXT       nabu_sio.asm:121
so_writ          = $FACC = 64204  _TEXT       nabu_sio.asm:113
starting         = $E30B = 58123  _TEXT       bdos.asm:475
status           = $E345 = 58181  _TEXT       bdos.asm:491
stbitmap         = $E65C = 58972  _TEXT       bdos.asm:1149
stbmap1          = $E664 = 58980  _TEXT       bdos.asm:1160
stfilpos         = $E5FE = 58878  _TEXT       bdos.asm:1064
stkarea          = $E341 = 58177  _TEXT       bdos.asm:486
stnrec1          = $E4DE = 58590  _TEXT       bdos.asm:804
strdata          = $E4BB = 58555  _TEXT       bdos.asm:783
ststatus         = $E701 = 59137  _TEXT       bdos.asm:1271
subhl            = $E595 = 58773  _TEXT       bdos.asm:974
swindi0          = $EF31 = 61233  _TEXT       bios.asm:311
swindi1          = $EF37 = 61239  _TEXT       bios.asm:315
swindir          = $EF2D = 61229  _TEXT       bios.asm:309
syshook          = $EF72 = 61298  _TEXT       config_nfs.asm:134
tab              = $0009 =     9  _TEXT       zcpr1_ccp_nfs.asm:25
tbase            = $0100 =   256  _TEXT       zcpr1_ccp_nfs.asm:18 (unused)
tbuff            = $0080 =   128  _TEXT       zcpr1_ccp_nfs.asm:17
tdrive           = $0004 =     4  _TEXT       zcpr1_ccp_nfs.asm:10
tfcb             = $005C =    92  _TEXT       zcpr1_ccp_nfs.asm:14 (unused)
tm_40c           = $F206 = 61958  _TEXT       nabu_vdp.asm:464
tm_80c           = $F213 = 61971  _TEXT       nabu_vdp.asm:471
tm_addh          = $F34C = 62284  _TEXT       nabu_vdp.asm:730
tm_addr          = $F34E = 62286  _TEXT       nabu_vdp.asm:732
tm_ayda          = $0040 =    64  _TEXT       nabu_vdp.asm:36
tm_ayla          = $0041 =    65  _TEXT       nabu_vdp.asm:37
tm_bell          = $F226 = 61990  _TEXT       nabu_vdp.asm:486
tm_bs            = $F157 = 61783  _TEXT       nabu_vdp.asm:348
tm_cbuf          = $FB02 = 64258  _BSS        nabu_vdp.asm:26
tm_cha0          = $F2EF = 62191  _TEXT       nabu_vdp.asm:652
tm_chat          = $F2E9 = 62185  _TEXT       nabu_vdp.asm:647
tm_cle0          = $F1F2 = 61938  _TEXT       nabu_vdp.asm:449
tm_clea          = $F1E3 = 61923  _TEXT       nabu_vdp.asm:440
tm_cles          = $F1E1 = 61921  _TEXT       nabu_vdp.asm:439
tm_cloc          = $F068 = 61544  _TEXT       nabu_vdp.asm:172
tm_cls           = $F330 = 62256  _TEXT       nabu_vdp.asm:706
tm_cls0          = $F339 = 62265  _TEXT       nabu_vdp.asm:709
tm_cold          = $F381 = 62337  _TEXT       nabu_vdp.asm:777
tm_colr          = $F37C = 62332  _TEXT       nabu_vdp.asm:772
tm_cr            = $F154 = 61780  _TEXT       nabu_vdp.asm:345
tm_cshm          = $F166 = 61798  _TEXT       nabu_vdp.asm:362
tm_cupd          = $F20A = 61962  _TEXT       nabu_vdp.asm:466
tm_curx          = $F37F = 62335  _TEXT       nabu_vdp.asm:775
tm_cury          = $F380 = 62336  _TEXT       nabu_vdp.asm:776
tm_data          = $00A0 =   160  _TEXT       nabu_vdp.asm:30
tm_dint          = $F35F = 62303  _TEXT       nabu_vdp.asm:751
tm_dsc0          = $F25A = 62042  _TEXT       nabu_vdp.asm:517
tm_dsco          = $F247 = 62023  _TEXT       nabu_vdp.asm:510
tm_eint          = $F36F = 62319  _TEXT       nabu_vdp.asm:763
tm_esc           = $F1A0 = 61856  _TEXT       nabu_vdp.asm:396
tm_esc0          = $F1B1 = 61873  _TEXT       nabu_vdp.asm:407
tm_esc1          = $F1CB = 61899  _TEXT       nabu_vdp.asm:422
tm_esc2          = $F1D6 = 61910  _TEXT       nabu_vdp.asm:429
tm_escd          = $F1AC = 61868  _TEXT       nabu_vdp.asm:404
tm_esci          = $F1C5 = 61893  _TEXT       nabu_vdp.asm:419
tm_escr          = $F1AD = 61869  _TEXT       nabu_vdp.asm:405
tm_escs          = $FB00 = 64256  _BSS        nabu_vdp.asm:24
tm_get0          = $F283 = 62083  _TEXT       nabu_vdp.asm:552
tm_getc          = $F26D = 62061  _TEXT       nabu_vdp.asm:538
tm_home          = $F169 = 61801  _TEXT       nabu_vdp.asm:363
tm_inb           = $F37D = 62333  _TEXT       nabu_vdp.asm:773
tm_inf           = $F37E = 62334  _TEXT       nabu_vdp.asm:774
tm_ini0          = $F03B = 61499  _TEXT       nabu_vdp.asm:140
tm_ini1          = $F05B = 61531  _TEXT       nabu_vdp.asm:161
tm_inir          = $EFE1 = 61409  _TEXT       nabu_vdp.asm:79
tm_init          = $F013 = 61459  _TEXT       nabu_vdp.asm:116
tm_inr0          = $EFE2 = 61410  _TEXT       nabu_vdp.asm:80
tm_keyd          = $0090 =   144  _TEXT       nabu_vdp.asm:33
tm_keys          = $0091 =   145  _TEXT       nabu_vdp.asm:34
tm_kirq          = $F28B = 62091  _TEXT       nabu_vdp.asm:561
tm_last          = $FB01 = 64257  _BSS        nabu_vdp.asm:25
tm_latc          = $00A1 =   161  _TEXT       nabu_vdp.asm:31
tm_lf            = $F148 = 61768  _TEXT       nabu_vdp.asm:336
tm_map           = $F299 = 62105  _TEXT       nabu_vdp.asm:576
tm_map0          = $F29D = 62109  _TEXT       nabu_vdp.asm:580
tm_map2          = $F2A9 = 62121  _TEXT       nabu_vdp.asm:593
tm_mapt          = $F2B0 = 62128  _TEXT       nabu_vdp.asm:600
tm_mode          = $F37A = 62330  _TEXT       nabu_vdp.asm:771
tm_oti0          = $EFD9 = 61401  _TEXT       nabu_vdp.asm:66
tm_otir          = $EFD8 = 61400  _TEXT       nabu_vdp.asm:65
tm_outc          = $FAFE = 64254  _BSS        nabu_vdp.asm:22
tm_putc          = $F2C5 = 62149  _TEXT       nabu_vdp.asm:618
tm_putf          = $F2D3 = 62163  _TEXT       nabu_vdp.asm:626 (unused)
tm_rea0          = $F0C1 = 61633  _TEXT       nabu_vdp.asm:237
tm_rea1          = $F0D7 = 61655  _TEXT       nabu_vdp.asm:249
tm_rea2          = $F0EC = 61676  _TEXT       nabu_vdp.asm:262
tm_rea3          = $F0FC = 61692  _TEXT       nabu_vdp.asm:272
tm_read          = $F0B5 = 61621  _TEXT       nabu_vdp.asm:231
tm_ri            = $F141 = 61761  _TEXT       nabu_vdp.asm:330
tm_sclf          = $F080 = 61568  _TEXT       nabu_vdp.asm:188
tm_scol          = $F219 = 61977  _TEXT       nabu_vdp.asm:476
tm_scr0          = $F078 = 61560  _TEXT       nabu_vdp.asm:185
tm_scr1          = $F07E = 61566  _TEXT       nabu_vdp.asm:187
tm_scri          = $F06E = 61550  _TEXT       nabu_vdp.asm:180
tm_scro          = $FAFF = 64255  _BSS        nabu_vdp.asm:23
tm_setp          = $F08A = 61578  _TEXT       nabu_vdp.asm:198
tm_sta0          = $EFF6 = 61430  _TEXT       nabu_vdp.asm:98
tm_sta1          = $F001 = 61441  _TEXT       nabu_vdp.asm:103
tm_sta2          = $F10D = 61709  _TEXT       nabu_vdp.asm:286
tm_stal          = $F10A = 61706  _TEXT       nabu_vdp.asm:284
tm_stat          = $EFEA = 61418  _TEXT       nabu_vdp.asm:92
tm_up            = $F161 = 61793  _TEXT       nabu_vdp.asm:357
tm_updc          = $F21D = 61981  _TEXT       nabu_vdp.asm:480
tm_usc0          = $F31C = 62236  _TEXT       nabu_vdp.asm:685
tm_usco          = $F30D = 62221  _TEXT       nabu_vdp.asm:678
tm_vcpy          = $F2F5 = 62197  _TEXT       nabu_vdp.asm:664
tm_virq          = $F359 = 62297  _TEXT       nabu_vdp.asm:741
tm_wri0          = $F12E = 61742  _TEXT       nabu_vdp.asm:318
tm_wri1          = $F16D = 61805  _TEXT       nabu_vdp.asm:368
tm_writ          = $F113 = 61715  _TEXT       nabu_vdp.asm:298
trksec           = $E3C3 = 58307  _TEXT       bdos.asm:592
trksec1          = $E3D1 = 58321  _TEXT       bdos.asm:601
trksec2          = $E3E4 = 58340  _TEXT       bdos.asm:614
trksec3          = $E3FA = 58362  _TEXT       bdos.asm:630
trksec4          = $E40F = 58383  _TEXT       bdos.asm:647
update           = $E801 = 59393  _TEXT       bdos.asm:1480
update1          = $E810 = 59408  _TEXT       bdos.asm:1488
userdma          = $EDB1 = 60849  _TEXT       bdos.asm:2443
userno           = $E341 = 58177  _TEXT       bdos.asm:488
usrstack         = $E30F = 58127  _TEXT       bdos.asm:482
vdpdev           = $EFCB = 61387  _TEXT       nabu_vdp.asm:51
wbinit           = $EF4F = 61263  _TEXT       config_nfs.asm:67
wboot            = $EE46 = 60998  _TEXT       bios.asm:62
wboot0           = $EE6D = 61037  _TEXT       bios.asm:99
wbootin          = $EE03 = 60931  _TEXT       bios.asm:22
wbootr           = $EE5D = 61021  _TEXT       bios.asm:87
write            = $EF0E = 61198  _TEXT       bios.asm:268
writeran         = $EB9C = 60316  _TEXT       bdos.asm:2049
wrtprt           = $EDAD = 60845  _TEXT       bdos.asm:2441
wrtprtd          = $E52C = 58668  _TEXT       bdos.asm:877
wrtseq           = $ECE6 = 60646  _TEXT       bdos.asm:2286
wtrandom         = $ED47 = 60743  _TEXT       bdos.asm:2360
wtseq            = $E9FE = 59902  _TEXT       bdos.asm:1779
wtseq1           = $EA03 = 59907  _TEXT       bdos.asm:1781
wtseq10          = $EAD2 = 60114  _TEXT       bdos.asm:1896
wtseq11          = $EAFE = 60158  _TEXT       bdos.asm:1920
wtseq12          = $EB00 = 60160  _TEXT       bdos.asm:1921
wtseq2           = $EA3B = 59963  _TEXT       bdos.asm:1804
wtseq3           = $EA48 = 59976  _TEXT       bdos.asm:1810
wtseq4           = $EA64 = 60004  _TEXT       bdos.asm:1822
wtseq5           = $EA6C = 60012  _TEXT       bdos.asm:1829
wtseq6           = $EA6E = 60014  _TEXT       bdos.asm:1830
wtseq7           = $EA8C = 60044  _TEXT       bdos.asm:1853
wtseq8           = $EA9A = 60058  _TEXT       bdos.asm:1860
wtseq9           = $EABB = 60091  _TEXT       bdos.asm:1880
wtseq99          = $EADF = 60127  _TEXT       bdos.asm:1907 (unused)
wtspecl          = $ED9B = 60827  _TEXT       bdos.asm:2426
xlate            = $EDD0 = 60880  _TEXT       bdos.asm:2469


total time: 0.1419 sec.
no errors
